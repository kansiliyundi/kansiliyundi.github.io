{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/1510820449852.jpg","path":"img/1510820449852.jpg","modified":0,"renderable":0},{"_id":"source/img/1510820508851.jpg","path":"img/1510820508851.jpg","modified":0,"renderable":0},{"_id":"source/img/1510820994873.jpg","path":"img/1510820994873.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-icon.png","path":"images/apple-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/my_avatar.png","path":"images/my_avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CentOS-Hexo-Git搭建静态博客.md","hash":"e21ccb6d92aa8aae3983ec9eb8d03044830b1ab1","modified":1626074302725},{"_id":"source/_posts/git不提交空文件夹结构解决办法.md","hash":"d71cc7cbdba96dcad964acd0cd38327790f264d9","modified":1625824607000},{"_id":"source/_posts/iOS Crash Hook.md","hash":"204c449699b99b98b99492f0170b4492584d48c5","modified":1626074315260},{"_id":"source/_posts/ubantu一键换内核并安装锐速脚本.md","hash":"ca1ce68fc76035c3793a1c2d2d7ddbdf91214fb6","modified":1626074324958},{"_id":"source/_posts/ijkPlayer编译集成.md","hash":"e9fba158d6cda88ee14d28e1430e3010dd21dd17","modified":1626074214439},{"_id":"source/_posts/中小型移动端工程结构总结.md","hash":"d31a1c6c1752bc37985b5ab4a4d8add6ad024182","modified":1626074270582},{"_id":"source/_posts/使用Geth搭建ETH节点服务器.md","hash":"0a409fbdcb89f34cd13f166e6f796fe255888e12","modified":1630475211757},{"_id":"source/_posts/构建令人愉悦的shell环境(mac).md","hash":"92d627182bd9e02d1832b39b029ca7a323fa6b76","modified":1626074256104},{"_id":"source/_posts/给centOS安装锐速.md","hash":"2effb18a161a138f32bd664678f5df356d595410","modified":1626074246295},{"_id":"source/_posts/程序员必备的翻墙姿势.md","hash":"827b96ea8a190c289c9ff6cae89df3a07e6dbee0","modified":1626074239169},{"_id":"source/.DS_Store","hash":"f5b0537555b63335f92ccfc9b4641002c75ef79d","modified":1630474667958},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1626055102796},{"_id":"source/img/1510820508851.jpg","hash":"8de289403f78d55fa381d2e82764b0746aa33414","modified":1625824607723},{"_id":"source/img/1510820449852.jpg","hash":"563496498801bd78e68bbc55f45479d7789b7122","modified":1625824607722},{"_id":"source/img/1510820994873.jpg","hash":"3a06d21edc151bd5cef2739bdf2005b97fddb77b","modified":1625824607724},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1626055960037},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1626055960035},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1626055960035},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1626055960035},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1626055960037},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1626055960037},{"_id":"themes/next/_config.yml","hash":"d2f2c956dc6857b5aae7f20bda0bd4e54d943b69","modified":1626073761562},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1626055960037},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1626055960038},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1626055960058},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1626055960038},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1626055960035},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1626055960036},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1626055960036},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1626055960036},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1626055960036},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1626055960037},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1626055960037},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1626055960042},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1626055960037},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1626055960037},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1626055960037},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1626055960037},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1626055960038},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1626055960038},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1626055960038},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1626055960039},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1626055960039},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1626055960039},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1626055960042},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1626055960042},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626055960042},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626055960042},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1626055960042},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1626055960042},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1626055960042},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1626055960042},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1626055960039},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1626055960042},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1626055960043},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1626055960039},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1626055960043},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1626055960043},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1626055960039},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1626055960043},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1626055960043},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1626055960043},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1626055960043},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1626055960044},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1626055960044},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1626055960044},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1626055960044},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1626055960044},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1626055960044},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1626055960045},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1626055960057},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1626055960057},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1626055960057},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1626055960058},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1626055960058},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1626055960058},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1626055960062},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1626055960036},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1626055960036},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1626055960036},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1626055960036},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1626055960039},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1626055960039},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1626055960040},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1626055960040},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1626055960040},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1626055960045},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1626055960041},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1626055960045},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1626055960045},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1626055960045},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1626055960045},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1626055960041},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1626055960041},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1626055960047},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1626055960048},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1626055960050},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1626055960050},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1626055960050},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1626055960050},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1626055960051},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1626055960051},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1626055960052},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1626055960054},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1626055960054},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1626055960055},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1626055960059},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1626055960061},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1626055960061},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1626055960061},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1626055960061},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1626055960061},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1626055960062},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1626055960062},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1626055960062},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1626055960062},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1626055960062},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1626055960063},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1626055960063},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1626055960063},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1626055960063},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1626055960063},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1626055960063},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1626055960064},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1626055960064},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1626055960064},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1626055960064},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1626055960078},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1626055960083},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626055960086},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1626055960086},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1626055960087},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1626055960086},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1626055960086},{"_id":"themes/next/source/images/alipay.jpg","hash":"4ec55e32056cb74dff733f62d9525fe161bfe875","modified":1625824607793},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1626055960086},{"_id":"themes/next/source/images/apple-icon.png","hash":"47922db473238dea2ce29aac962cdee6f74885c1","modified":1625824607793},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1625824607793},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626055960083},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626055960083},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626055960084},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626055960084},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626055960084},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626055960084},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626055960085},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626055960085},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626055960085},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"d18f94fc04c4ead1dd27bbc0ae1798686e823e9c","modified":1625824607795},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626055960085},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626055960085},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"b41e63e31a6e643178a11fd2632bc80304bb9b01","modified":1625824607795},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1626055960046},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1626055960046},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1626055960046},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626055960087},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1626055960046},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1626055960047},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1626055960047},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1626055960047},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1626055960047},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1626055960047},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1626055960048},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1626055960048},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1626055960048},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1626055960048},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1626055960049},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1626055960049},{"_id":"themes/next/source/images/logo.svg","hash":"ab7363d69dea016350d56164675a2ae35b503cc9","modified":1625824607795},{"_id":"themes/next/source/images/my_avatar.png","hash":"a5a77c0238be3131a40ab7cf02c76794303c615b","modified":1625824607795},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1626055960049},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1626055960049},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1626055960049},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1626055960050},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626055960051},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626055960051},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626055960051},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626055960051},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1626055960051},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1626055960052},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1626055960052},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1626055960052},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1626055960052},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1626055960053},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1626055960054},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1626055960054},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1626055960054},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1626055960054},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1626055960055},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1626055960055},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1626055960055},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1626055960056},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1626055960056},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1626055960056},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1626055960056},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1626055960056},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1626055960056},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1626055960057},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1626055960059},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1626055960059},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1626055960059},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1626055960059},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1626055960060},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1626055960061},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1626055960082},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1626055960082},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1626055960083},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1626055960083},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1626055960086},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1626055960087},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626055960089},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1626055960082},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626055960089},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1626055960065},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1626055960065},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1626055960065},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1626055960071},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1626055960075},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1626055960075},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1626055960075},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1626055960076},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1626055960068},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1626055960077},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1626055960071},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1626055960077},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1626055960077},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1626055960078},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1626055960079},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1626055960079},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1626055960079},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1626055960079},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1626055960080},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1626055960081},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1626055960082},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626055960082},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1626055960088},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1626055960088},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1626055960065},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1626055960065},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1626055960065},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1626055960066},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1626055960067},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1626055960068},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1626055960068},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1626055960068},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1626055960068},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1626055960068},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1626055960069},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1626055960069},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1626055960069},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1626055960069},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1626055960071},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1626055960073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1626055960073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1626055960073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1626055960073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1626055960074},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1626055960074},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1626055960070},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1626055960074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1626055960074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1626055960074},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1626055960075},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1626055960076},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1626055960076},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1626055960076},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1626055960075},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1626055960077},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1626055960077},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1626055960078},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1626055960078},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1626055960078},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1626055960078},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1626055960078},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"e05396f9ca1f9c53c8b791255a24df39b0332e8c","modified":1625824607797},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1626055960089},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1626055960088},{"_id":"public/2016/12/19/git不提交空文件夹结构解决办法/index.html","hash":"dc5ccd60fbb58bc8acc12eacc6d6762628c4a657","modified":1630475372635},{"_id":"public/archives/index.html","hash":"7c75041308e819c2996a193708521463b91166f5","modified":1630475372635},{"_id":"public/archives/2016/index.html","hash":"d6532788b3df9a48687d1a94a88574ef43a4a463","modified":1630475372635},{"_id":"public/archives/2016/12/index.html","hash":"e084d5d8c04c05dbf093fd312a3fa532a990d20f","modified":1630475372635},{"_id":"public/archives/2017/index.html","hash":"283b466191be7377e8cf9697c710a963ddccf29c","modified":1630475372635},{"_id":"public/archives/2017/01/index.html","hash":"f71342aef058eb7686a21e4c059c47d9c4d51878","modified":1630475372635},{"_id":"public/archives/2017/05/index.html","hash":"a5221b2c7dc595b156f0afc3b3ec7642f8b405ae","modified":1630475372635},{"_id":"public/archives/2017/10/index.html","hash":"2628a8ae7e7591af09d6cbcb9daee73d745a53cf","modified":1630475372635},{"_id":"public/archives/2017/11/index.html","hash":"918815e2ca0fc14f98f90d8373eade87e1a6504f","modified":1630475372635},{"_id":"public/archives/2018/index.html","hash":"d262bafeb465a88e2631b404c8330b2f401175c0","modified":1630475372635},{"_id":"public/archives/2018/04/index.html","hash":"d958143436fd1a67b9e6a8b726dbe51eff413a64","modified":1630475372635},{"_id":"public/archives/2020/index.html","hash":"5a4f53888b2b8519ba627b54735f79915b425422","modified":1630475372635},{"_id":"public/archives/2020/03/index.html","hash":"d4004ebffcf1afb730987e1091d52b844eb1d2b7","modified":1630475372635},{"_id":"public/archives/2021/index.html","hash":"18a2fe5fd85ab9db876d0f73c5f3d954ff5751c0","modified":1630475372635},{"_id":"public/archives/2021/04/index.html","hash":"d158c8a257d13cad5d2d72f73d53441aa5fb0849","modified":1630475372635},{"_id":"public/tags/hexo静态博客/index.html","hash":"bfbb71b64522c40ee5f610fab82d84aa1ce7596f","modified":1630475372635},{"_id":"public/tags/git/index.html","hash":"2b57883ce0f5fc39856f25f667d65fa576f3701b","modified":1630475372635},{"_id":"public/tags/iOS/index.html","hash":"be9e7de91f0d446d138a5c0bd925070baf28447f","modified":1630475372635},{"_id":"public/tags/ss-vps/index.html","hash":"7a2c3c60f27573e4a73adf6e18265f837a95cce5","modified":1630475372635},{"_id":"public/tags/blockChain/index.html","hash":"786305860bc7623c1c28345ecc77f2fb2e549fa1","modified":1630475372635},{"_id":"public/tags/Mac-Linux/index.html","hash":"6d3d7d103b5904149103be861cb0a1db2242cef9","modified":1630475372635},{"_id":"public/2021/04/21/使用Geth搭建ETH节点服务器/index.html","hash":"8d3323dff29f09e73eb38a8cbb90c88d397d2d0b","modified":1630475372635},{"_id":"public/2020/03/10/ijkPlayer编译集成/index.html","hash":"da5f2c6b958519cbf8b6bc28221b349cf96b0058","modified":1630475372635},{"_id":"public/2018/04/19/iOS Crash Hook/index.html","hash":"b55a65d13e725dcd33ddb11bdaab0b76ef54b425","modified":1630475372635},{"_id":"public/2017/11/16/构建令人愉悦的shell环境(mac)/index.html","hash":"bd5ed0de67a841f286904b85b23dfe597ed4ef33","modified":1630475372635},{"_id":"public/2017/10/19/ubantu一键换内核并安装锐速脚本/index.html","hash":"4f02dac376bac11ae5deb69cbe646aa1b5d328f9","modified":1630475372635},{"_id":"public/2017/05/10/CentOS-Hexo-Git搭建静态博客/index.html","hash":"9fc6c300f6794dcf9079b8c5f8e0f932f76d45d1","modified":1630475372635},{"_id":"public/2017/01/05/中小型移动端工程结构总结/index.html","hash":"58890459180653dbcf21a0c759c4c282c3c54fb6","modified":1630475372635},{"_id":"public/2016/12/25/给centOS安装锐速/index.html","hash":"ddefb04211e83abe5c681f37d3a6b82696e49c4d","modified":1630475372635},{"_id":"public/2016/12/21/程序员必备的翻墙姿势/index.html","hash":"9bc5390055167f9350ca3b3e2987e4fd77479cc3","modified":1630475372635},{"_id":"public/index.html","hash":"d6b3938d88b232d25dc3160786c8a2014e34fb77","modified":1630475372635},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1630475372635},{"_id":"public/images/alipay.jpg","hash":"4ec55e32056cb74dff733f62d9525fe161bfe875","modified":1630475372635},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1630475372635},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630475372635},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1630475372635},{"_id":"public/images/apple-icon.png","hash":"47922db473238dea2ce29aac962cdee6f74885c1","modified":1630475372635},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1630475372635},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1630475372635},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1630475372635},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1630475372635},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1630475372635},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1630475372635},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630475372635},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630475372635},{"_id":"public/images/favicon-16x16.png","hash":"b41e63e31a6e643178a11fd2632bc80304bb9b01","modified":1630475372635},{"_id":"public/images/my_avatar.png","hash":"a5a77c0238be3131a40ab7cf02c76794303c615b","modified":1630475372635},{"_id":"public/images/logo.svg","hash":"ab7363d69dea016350d56164675a2ae35b503cc9","modified":1630475372635},{"_id":"public/images/favicon-32x32.png","hash":"d18f94fc04c4ead1dd27bbc0ae1798686e823e9c","modified":1630475372635},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1630475372635},{"_id":"public/img/1510820508851.jpg","hash":"8de289403f78d55fa381d2e82764b0746aa33414","modified":1630475372635},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1630475372635},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1630475372635},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1630475372635},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1630475372635},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1630475372635},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1630475372635},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1630475372635},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1630475372635},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1630475372635},{"_id":"public/css/main.css","hash":"aacf599e70d9618daffd8b4caaa4b2cd045508f5","modified":1630475372635},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1630475372635},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1630475372635},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1630475372635},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1630475372635},{"_id":"public/images/wechatpay.jpg","hash":"e05396f9ca1f9c53c8b791255a24df39b0332e8c","modified":1630475372635},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1630475372635},{"_id":"public/img/1510820449852.jpg","hash":"563496498801bd78e68bbc55f45479d7789b7122","modified":1630475372635},{"_id":"public/img/1510820994873.jpg","hash":"3a06d21edc151bd5cef2739bdf2005b97fddb77b","modified":1630475372635}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"CentOS+Hexo+Git搭建静态博客","date":"2017-05-10T08:27:25.000Z","_content":"#### 1. 使用EPEL安装nodeJs\n>  EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。\n\n因为Hexo是跑在nodejs环境下的,所以要装nodejs环境\n\n首先查看当前系统下是否安装了nodeJs\n```\n$ node -v\n```\n如果没有安装则继续下面的步骤\n```\n# 先确认系统是否已经安装了epel-release包：\n$ yum info epel-release\n```\n如果有输出有关epel-release的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n```\n$ sudo yum install epel-release\n```\n安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n安装完成后，验证是否正确的安装，node -v，如果输出版本信息，说明成功安装\n```\n$ node -v\n```\n<!-- more --> \n#### 2.安装git\n查看系统是否安装了git\n```\n$ git --version\n```\n如果没有版本信息,则继续下面的步骤\n```\n$ yum install git\n```\n然后使用yum –version命令查看是否有版本信息,有版本信息则安装成功\n\n然后配置一下全局的git用户信息,先查看配置信息\n```\n$ git config --list\n```\n如果没有配置过,则\n```\n$  git config --global user.name \"输入你的用户名\"\n$  git config --global user.email \"输入你的邮箱\"\n```\n#### 3.安装Hexo\n终于到了安装Hexo的一步了\n```\n$ npm install hexo-cli -g\n```\n一个命令搞定,然后建立博客目录\n```\n$ hexo init \"blogPath\"(你想要存放博客环境的路径)\n```\n现在进入博客目录\n```\n$ cd blogPath\n```\n然后安装server服务跑起来看一下是否成功\n\n在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n```\n$ npm install hexo-server --save\n```\n安装此server后执行\n```\n$ hexo server\n```\n或者 ‘hexo s’ 这是上面命令的缩写,这个命令主要是用于让Hexo在本地运行一个虚拟服务器环境,可以看到修改的效果\n\n如果你是在远程的服务器在浏览器访问\n```\nhttp://你的服务器IP:4000\n```\n如果你是本地,则访问\n```\nhttp://localhost:4000\n```\n页面显示出来则成功建立了一个博客\n\n#### 4.配置Hexo\nHexo的配置文件是在博客目录下的_config.yml文件,在博客目录下执行\n```\n$ vim _config.yml\n```\n最上面呈现的是博客的基本信息\n```\ntitle: #网站标题\nsubtitle: #子标题\ndescription: #博客简洁\nauthor: #博客作者\nlanguage: zh-Hans #使用的语言环境 zh-Hans为中文\nemail: #邮箱\nkeywords: #关键字\n```\n关键点在于后面的这些信息,一会有用到,先混个脸熟\n```\n...\ntheme: #使用模板\n...\ndeploy: #部署信息配置\ntype: git #部署类型\nrepository: xxxx #你的git仓库地址\nbranch: master #推送的分支\n```\n#### 5.创建Repository\n##### 登录github,创建一个新的Repository\n命名规则为’你的github用户名.github.io’ 一定要按照这个规则命名\n\n创建成功后copy这个仓库的SSH地址\n```\n大致长这个样子\ngit@github.com:用户名/用户名.github.io.git\n```\n然后编辑上面说到的Hexo配置文件,找到部署信息配置,在repository后面加上刚刚复制的地址(冒号后面记得加空格),其他字段按照上面的示例配置.\n\n然后保存配置文件\n```\nesc键 然后直接输入:wq 就保存了\n```\n##### 设置SSH key\n检验是否已存在key\n\n分别执行命令\n```\n$ cd ~\n$ cd  .ssh\n```\n再执行命令 ls 查看是有已有key文件,一般存在key的话都会显示id_rsa.pub 和 id_dsa.pub这两个文件,没有key什么都不会显示\n\n添加一个 SSH key\n```\n# email为你的github登录邮箱\n$ ssh-keygen -t rsa -C \"your_email@mail.com\"\n```\n会提示你指定文件名,如果什么都不输入,直接回车,会默认使用id_rsa.pub为ssh key文件名\n\n回车之后,需要输入两次密码,这个密码是你push文件的时候要输入的密码，而不是github的密码,如果不打算使用密码,直接回车就好,然后就会看到ssh key添加成功\n\n然后使用命令显示ssh key内容\n```\n$ cat /roor/.ssh/id_rsa.pub\n```\n会出来一大坨东西,直接全部复制,然后到你的github账户\n\n点击右上角你的头像,选择’settings’,选择左边的’SSH and GPG keys’ 在SSH keys区域,选择New SSH key,然后把刚刚复制的粘贴进,保存,就OK了\n\n回到命令行,输入下面命令,测试是否添加正确\n\n```\n$ ssh -T git@github.com\n```\n如果成功,他会显示\n```\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n到这里,git上的所有操作,基本结束.\n\n#### 6.部署到github\nHexo提供了两个命令,先使用generate生成静态文件,然后使用deploy命令,他会根据配置文件里,我们填入的git信息,执行push\n\n```\n$ hexo generate\n$ hexo deploy\n```\n实际使用中每次都要写两个命令太麻烦了,所以Hexo提供了缩写命令’g -d’ 生成后,直接推送到git\n\n```\n$ hexo g -d\n```\n等待命令执行完毕后,可以查看代码是否已提交到github上,然后在浏览器输入’你的用户名.github.io’就可以访问了\n\n#### 7.使用Hexo写博客\n##### 删除博客\n\n默认Hexo会有一片hello,word的博客示例\n正好拿来练手\n\n删除博客需要进入博客根目录/source/_posts目录中删除文件后执行下面的命令就好了\n\n```\n$ hexo clean\n```\n##### 新建博客\n\n在博客目录下,使用以下命令,即可在/source/_posts目录下新建一个.md文件\n\n```\n$ hexo new 文章名\n```\n找到这个文件,对他进行编辑就可以了.\n\n#### 8. 使用Hexo主题\n\n我这里用的是大名鼎鼎的Next,我就用Next举例子了,其他的主题,可以看他们对应的说明,都会有教程的\n\ncd到博客目录下,使用下面的Git命令,将next拉到本地\n\n```\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n编辑Hexo配置文件,将theme一项后面改为next(记得冒号后面加空格)\n\n执行 hexo s –debug 开启本地站点,并进入调试模式,看下效果\n\nnext提供了三种风格,关于next的配置,需要到博客目录/themes/next下面 找到_config.yml文件进行配置,具体配置到next的官网看就可以了.\n\n##### 注意\n\n* themes目录是Hexo的主题模板文件夹\n* Hexo的配置文件命名风格都是以_config.yml命名,模板的_config.yml和Hexo的_config.yml是两回事,千万不要改错了!!!\n\n```\nhexo配置文件路径\n博客目录/_config.yml\n模板配置文件路径\n博客目录/themes/对应的模板/_config.yml\n```\n大致的从搭建到使用的步骤就是这些.\n\n从上周开始我尝试了wordpress,hexo和jekyll.也踩了很多坑,文字太多,没办法一一表述.\n\n虽然最后都解决了,并且可以正常运行了,但是犹豫再三还是放弃了\n\n最终选择了Hexo,其实主要还是觉得利用上github比较酷,感觉很专业\n\n国内还可以选择coding替代github,coding可以选择北京和香港的节点,比github要快,需要的自行百度\n\n我个人也很喜欢jekyll,还有喵神写的那个他博客用的模板.\n","source":"_posts/CentOS-Hexo-Git搭建静态博客.md","raw":"---\ntitle: CentOS+Hexo+Git搭建静态博客\ndate: 2017-5-10 16:27:25\ntags: hexo静态博客\n---\n#### 1. 使用EPEL安装nodeJs\n>  EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。\n\n因为Hexo是跑在nodejs环境下的,所以要装nodejs环境\n\n首先查看当前系统下是否安装了nodeJs\n```\n$ node -v\n```\n如果没有安装则继续下面的步骤\n```\n# 先确认系统是否已经安装了epel-release包：\n$ yum info epel-release\n```\n如果有输出有关epel-release的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n```\n$ sudo yum install epel-release\n```\n安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n安装完成后，验证是否正确的安装，node -v，如果输出版本信息，说明成功安装\n```\n$ node -v\n```\n<!-- more --> \n#### 2.安装git\n查看系统是否安装了git\n```\n$ git --version\n```\n如果没有版本信息,则继续下面的步骤\n```\n$ yum install git\n```\n然后使用yum –version命令查看是否有版本信息,有版本信息则安装成功\n\n然后配置一下全局的git用户信息,先查看配置信息\n```\n$ git config --list\n```\n如果没有配置过,则\n```\n$  git config --global user.name \"输入你的用户名\"\n$  git config --global user.email \"输入你的邮箱\"\n```\n#### 3.安装Hexo\n终于到了安装Hexo的一步了\n```\n$ npm install hexo-cli -g\n```\n一个命令搞定,然后建立博客目录\n```\n$ hexo init \"blogPath\"(你想要存放博客环境的路径)\n```\n现在进入博客目录\n```\n$ cd blogPath\n```\n然后安装server服务跑起来看一下是否成功\n\n在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n```\n$ npm install hexo-server --save\n```\n安装此server后执行\n```\n$ hexo server\n```\n或者 ‘hexo s’ 这是上面命令的缩写,这个命令主要是用于让Hexo在本地运行一个虚拟服务器环境,可以看到修改的效果\n\n如果你是在远程的服务器在浏览器访问\n```\nhttp://你的服务器IP:4000\n```\n如果你是本地,则访问\n```\nhttp://localhost:4000\n```\n页面显示出来则成功建立了一个博客\n\n#### 4.配置Hexo\nHexo的配置文件是在博客目录下的_config.yml文件,在博客目录下执行\n```\n$ vim _config.yml\n```\n最上面呈现的是博客的基本信息\n```\ntitle: #网站标题\nsubtitle: #子标题\ndescription: #博客简洁\nauthor: #博客作者\nlanguage: zh-Hans #使用的语言环境 zh-Hans为中文\nemail: #邮箱\nkeywords: #关键字\n```\n关键点在于后面的这些信息,一会有用到,先混个脸熟\n```\n...\ntheme: #使用模板\n...\ndeploy: #部署信息配置\ntype: git #部署类型\nrepository: xxxx #你的git仓库地址\nbranch: master #推送的分支\n```\n#### 5.创建Repository\n##### 登录github,创建一个新的Repository\n命名规则为’你的github用户名.github.io’ 一定要按照这个规则命名\n\n创建成功后copy这个仓库的SSH地址\n```\n大致长这个样子\ngit@github.com:用户名/用户名.github.io.git\n```\n然后编辑上面说到的Hexo配置文件,找到部署信息配置,在repository后面加上刚刚复制的地址(冒号后面记得加空格),其他字段按照上面的示例配置.\n\n然后保存配置文件\n```\nesc键 然后直接输入:wq 就保存了\n```\n##### 设置SSH key\n检验是否已存在key\n\n分别执行命令\n```\n$ cd ~\n$ cd  .ssh\n```\n再执行命令 ls 查看是有已有key文件,一般存在key的话都会显示id_rsa.pub 和 id_dsa.pub这两个文件,没有key什么都不会显示\n\n添加一个 SSH key\n```\n# email为你的github登录邮箱\n$ ssh-keygen -t rsa -C \"your_email@mail.com\"\n```\n会提示你指定文件名,如果什么都不输入,直接回车,会默认使用id_rsa.pub为ssh key文件名\n\n回车之后,需要输入两次密码,这个密码是你push文件的时候要输入的密码，而不是github的密码,如果不打算使用密码,直接回车就好,然后就会看到ssh key添加成功\n\n然后使用命令显示ssh key内容\n```\n$ cat /roor/.ssh/id_rsa.pub\n```\n会出来一大坨东西,直接全部复制,然后到你的github账户\n\n点击右上角你的头像,选择’settings’,选择左边的’SSH and GPG keys’ 在SSH keys区域,选择New SSH key,然后把刚刚复制的粘贴进,保存,就OK了\n\n回到命令行,输入下面命令,测试是否添加正确\n\n```\n$ ssh -T git@github.com\n```\n如果成功,他会显示\n```\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n到这里,git上的所有操作,基本结束.\n\n#### 6.部署到github\nHexo提供了两个命令,先使用generate生成静态文件,然后使用deploy命令,他会根据配置文件里,我们填入的git信息,执行push\n\n```\n$ hexo generate\n$ hexo deploy\n```\n实际使用中每次都要写两个命令太麻烦了,所以Hexo提供了缩写命令’g -d’ 生成后,直接推送到git\n\n```\n$ hexo g -d\n```\n等待命令执行完毕后,可以查看代码是否已提交到github上,然后在浏览器输入’你的用户名.github.io’就可以访问了\n\n#### 7.使用Hexo写博客\n##### 删除博客\n\n默认Hexo会有一片hello,word的博客示例\n正好拿来练手\n\n删除博客需要进入博客根目录/source/_posts目录中删除文件后执行下面的命令就好了\n\n```\n$ hexo clean\n```\n##### 新建博客\n\n在博客目录下,使用以下命令,即可在/source/_posts目录下新建一个.md文件\n\n```\n$ hexo new 文章名\n```\n找到这个文件,对他进行编辑就可以了.\n\n#### 8. 使用Hexo主题\n\n我这里用的是大名鼎鼎的Next,我就用Next举例子了,其他的主题,可以看他们对应的说明,都会有教程的\n\ncd到博客目录下,使用下面的Git命令,将next拉到本地\n\n```\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n编辑Hexo配置文件,将theme一项后面改为next(记得冒号后面加空格)\n\n执行 hexo s –debug 开启本地站点,并进入调试模式,看下效果\n\nnext提供了三种风格,关于next的配置,需要到博客目录/themes/next下面 找到_config.yml文件进行配置,具体配置到next的官网看就可以了.\n\n##### 注意\n\n* themes目录是Hexo的主题模板文件夹\n* Hexo的配置文件命名风格都是以_config.yml命名,模板的_config.yml和Hexo的_config.yml是两回事,千万不要改错了!!!\n\n```\nhexo配置文件路径\n博客目录/_config.yml\n模板配置文件路径\n博客目录/themes/对应的模板/_config.yml\n```\n大致的从搭建到使用的步骤就是这些.\n\n从上周开始我尝试了wordpress,hexo和jekyll.也踩了很多坑,文字太多,没办法一一表述.\n\n虽然最后都解决了,并且可以正常运行了,但是犹豫再三还是放弃了\n\n最终选择了Hexo,其实主要还是觉得利用上github比较酷,感觉很专业\n\n国内还可以选择coding替代github,coding可以选择北京和香港的节点,比github要快,需要的自行百度\n\n我个人也很喜欢jekyll,还有喵神写的那个他博客用的模板.\n","slug":"CentOS-Hexo-Git搭建静态博客","published":1,"updated":"2021-07-12T07:18:22.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtfz0000tdm25r206ams","content":"<h4 id=\"1-使用EPEL安装nodeJs\"><a href=\"#1-使用EPEL安装nodeJs\" class=\"headerlink\" title=\"1. 使用EPEL安装nodeJs\"></a>1. 使用EPEL安装nodeJs</h4><blockquote>\n<p> EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。</p>\n</blockquote>\n<p>因为Hexo是跑在nodejs环境下的,所以要装nodejs环境</p>\n<p>首先查看当前系统下是否安装了nodeJs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>如果没有安装则继续下面的步骤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先确认系统是否已经安装了epel-release包：</span><br><span class=\"line\">$ yum info epel-release</span><br></pre></td></tr></table></figure>\n<p>如果有输出有关epel-release的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n<p>安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n<p>安装完成后，验证是否正确的安装，node -v，如果输出版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span> \n<h4 id=\"2-安装git\"><a href=\"#2-安装git\" class=\"headerlink\" title=\"2.安装git\"></a>2.安装git</h4><p>查看系统是否安装了git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<p>如果没有版本信息,则继续下面的步骤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install git</span><br></pre></td></tr></table></figure>\n<p>然后使用yum –version命令查看是否有版本信息,有版本信息则安装成功</p>\n<p>然后配置一下全局的git用户信息,先查看配置信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n<p>如果没有配置过,则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git config --global user.name &quot;输入你的用户名&quot;</span><br><span class=\"line\">$  git config --global user.email &quot;输入你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><p>终于到了安装Hexo的一步了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>一个命令搞定,然后建立博客目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &quot;blogPath&quot;(你想要存放博客环境的路径)</span><br></pre></td></tr></table></figure>\n<p>现在进入博客目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd blogPath</span><br></pre></td></tr></table></figure>\n<p>然后安装server服务跑起来看一下是否成功</p>\n<p>在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>安装此server后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>或者 ‘hexo s’ 这是上面命令的缩写,这个命令主要是用于让Hexo在本地运行一个虚拟服务器环境,可以看到修改的效果</p>\n<p>如果你是在远程的服务器在浏览器访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://你的服务器IP:4000</span><br></pre></td></tr></table></figure>\n<p>如果你是本地,则访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000</span><br></pre></td></tr></table></figure>\n<p>页面显示出来则成功建立了一个博客</p>\n<h4 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h4><p>Hexo的配置文件是在博客目录下的_config.yml文件,在博客目录下执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim _config.yml</span><br></pre></td></tr></table></figure>\n<p>最上面呈现的是博客的基本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: #网站标题</span><br><span class=\"line\">subtitle: #子标题</span><br><span class=\"line\">description: #博客简洁</span><br><span class=\"line\">author: #博客作者</span><br><span class=\"line\">language: zh-Hans #使用的语言环境 zh-Hans为中文</span><br><span class=\"line\">email: #邮箱</span><br><span class=\"line\">keywords: #关键字</span><br></pre></td></tr></table></figure>\n<p>关键点在于后面的这些信息,一会有用到,先混个脸熟</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">theme: #使用模板</span><br><span class=\"line\">...</span><br><span class=\"line\">deploy: #部署信息配置</span><br><span class=\"line\">type: git #部署类型</span><br><span class=\"line\">repository: xxxx #你的git仓库地址</span><br><span class=\"line\">branch: master #推送的分支</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-创建Repository\"><a href=\"#5-创建Repository\" class=\"headerlink\" title=\"5.创建Repository\"></a>5.创建Repository</h4><h5 id=\"登录github-创建一个新的Repository\"><a href=\"#登录github-创建一个新的Repository\" class=\"headerlink\" title=\"登录github,创建一个新的Repository\"></a>登录github,创建一个新的Repository</h5><p>命名规则为’你的github用户名.github.io’ 一定要按照这个规则命名</p>\n<p>创建成功后copy这个仓库的SSH地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大致长这个样子</span><br><span class=\"line\">git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>\n<p>然后编辑上面说到的Hexo配置文件,找到部署信息配置,在repository后面加上刚刚复制的地址(冒号后面记得加空格),其他字段按照上面的示例配置.</p>\n<p>然后保存配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esc键 然后直接输入:wq 就保存了</span><br></pre></td></tr></table></figure>\n<h5 id=\"设置SSH-key\"><a href=\"#设置SSH-key\" class=\"headerlink\" title=\"设置SSH key\"></a>设置SSH key</h5><p>检验是否已存在key</p>\n<p>分别执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~</span><br><span class=\"line\">$ cd  .ssh</span><br></pre></td></tr></table></figure>\n<p>再执行命令 ls 查看是有已有key文件,一般存在key的话都会显示id_rsa.pub 和 id_dsa.pub这两个文件,没有key什么都不会显示</p>\n<p>添加一个 SSH key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># email为你的github登录邮箱</span><br><span class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@mail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>会提示你指定文件名,如果什么都不输入,直接回车,会默认使用id_rsa.pub为ssh key文件名</p>\n<p>回车之后,需要输入两次密码,这个密码是你push文件的时候要输入的密码，而不是github的密码,如果不打算使用密码,直接回车就好,然后就会看到ssh key添加成功</p>\n<p>然后使用命令显示ssh key内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /roor/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>会出来一大坨东西,直接全部复制,然后到你的github账户</p>\n<p>点击右上角你的头像,选择’settings’,选择左边的’SSH and GPG keys’ 在SSH keys区域,选择New SSH key,然后把刚刚复制的粘贴进,保存,就OK了</p>\n<p>回到命令行,输入下面命令,测试是否添加正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果成功,他会显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi xxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>到这里,git上的所有操作,基本结束.</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6.部署到github\"></a>6.部署到github</h4><p>Hexo提供了两个命令,先使用generate生成静态文件,然后使用deploy命令,他会根据配置文件里,我们填入的git信息,执行push</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>实际使用中每次都要写两个命令太麻烦了,所以Hexo提供了缩写命令’g -d’ 生成后,直接推送到git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g -d</span><br></pre></td></tr></table></figure>\n<p>等待命令执行完毕后,可以查看代码是否已提交到github上,然后在浏览器输入’你的用户名.github.io’就可以访问了</p>\n<h4 id=\"7-使用Hexo写博客\"><a href=\"#7-使用Hexo写博客\" class=\"headerlink\" title=\"7.使用Hexo写博客\"></a>7.使用Hexo写博客</h4><h5 id=\"删除博客\"><a href=\"#删除博客\" class=\"headerlink\" title=\"删除博客\"></a>删除博客</h5><p>默认Hexo会有一片hello,word的博客示例<br>正好拿来练手</p>\n<p>删除博客需要进入博客根目录/source/_posts目录中删除文件后执行下面的命令就好了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h5 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h5><p>在博客目录下,使用以下命令,即可在/source/_posts目录下新建一个.md文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 文章名</span><br></pre></td></tr></table></figure>\n<p>找到这个文件,对他进行编辑就可以了.</p>\n<h4 id=\"8-使用Hexo主题\"><a href=\"#8-使用Hexo主题\" class=\"headerlink\" title=\"8. 使用Hexo主题\"></a>8. 使用Hexo主题</h4><p>我这里用的是大名鼎鼎的Next,我就用Next举例子了,其他的主题,可以看他们对应的说明,都会有教程的</p>\n<p>cd到博客目录下,使用下面的Git命令,将next拉到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>编辑Hexo配置文件,将theme一项后面改为next(记得冒号后面加空格)</p>\n<p>执行 hexo s –debug 开启本地站点,并进入调试模式,看下效果</p>\n<p>next提供了三种风格,关于next的配置,需要到博客目录/themes/next下面 找到_config.yml文件进行配置,具体配置到next的官网看就可以了.</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>themes目录是Hexo的主题模板文件夹</li>\n<li>Hexo的配置文件命名风格都是以_config.yml命名,模板的_config.yml和Hexo的_config.yml是两回事,千万不要改错了!!!</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo配置文件路径</span><br><span class=\"line\">博客目录/_config.yml</span><br><span class=\"line\">模板配置文件路径</span><br><span class=\"line\">博客目录/themes/对应的模板/_config.yml</span><br></pre></td></tr></table></figure>\n<p>大致的从搭建到使用的步骤就是这些.</p>\n<p>从上周开始我尝试了wordpress,hexo和jekyll.也踩了很多坑,文字太多,没办法一一表述.</p>\n<p>虽然最后都解决了,并且可以正常运行了,但是犹豫再三还是放弃了</p>\n<p>最终选择了Hexo,其实主要还是觉得利用上github比较酷,感觉很专业</p>\n<p>国内还可以选择coding替代github,coding可以选择北京和香港的节点,比github要快,需要的自行百度</p>\n<p>我个人也很喜欢jekyll,还有喵神写的那个他博客用的模板.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-使用EPEL安装nodeJs\"><a href=\"#1-使用EPEL安装nodeJs\" class=\"headerlink\" title=\"1. 使用EPEL安装nodeJs\"></a>1. 使用EPEL安装nodeJs</h4><blockquote>\n<p> EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。</p>\n</blockquote>\n<p>因为Hexo是跑在nodejs环境下的,所以要装nodejs环境</p>\n<p>首先查看当前系统下是否安装了nodeJs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>如果没有安装则继续下面的步骤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先确认系统是否已经安装了epel-release包：</span><br><span class=\"line\">$ yum info epel-release</span><br></pre></td></tr></table></figure>\n<p>如果有输出有关epel-release的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n<p>安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n<p>安装完成后，验证是否正确的安装，node -v，如果输出版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2-安装git\"><a href=\"#2-安装git\" class=\"headerlink\" title=\"2.安装git\"></a>2.安装git</h4><p>查看系统是否安装了git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<p>如果没有版本信息,则继续下面的步骤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install git</span><br></pre></td></tr></table></figure>\n<p>然后使用yum –version命令查看是否有版本信息,有版本信息则安装成功</p>\n<p>然后配置一下全局的git用户信息,先查看配置信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n<p>如果没有配置过,则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git config --global user.name &quot;输入你的用户名&quot;</span><br><span class=\"line\">$  git config --global user.email &quot;输入你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><p>终于到了安装Hexo的一步了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>一个命令搞定,然后建立博客目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &quot;blogPath&quot;(你想要存放博客环境的路径)</span><br></pre></td></tr></table></figure>\n<p>现在进入博客目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd blogPath</span><br></pre></td></tr></table></figure>\n<p>然后安装server服务跑起来看一下是否成功</p>\n<p>在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>安装此server后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>或者 ‘hexo s’ 这是上面命令的缩写,这个命令主要是用于让Hexo在本地运行一个虚拟服务器环境,可以看到修改的效果</p>\n<p>如果你是在远程的服务器在浏览器访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://你的服务器IP:4000</span><br></pre></td></tr></table></figure>\n<p>如果你是本地,则访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000</span><br></pre></td></tr></table></figure>\n<p>页面显示出来则成功建立了一个博客</p>\n<h4 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h4><p>Hexo的配置文件是在博客目录下的_config.yml文件,在博客目录下执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim _config.yml</span><br></pre></td></tr></table></figure>\n<p>最上面呈现的是博客的基本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: #网站标题</span><br><span class=\"line\">subtitle: #子标题</span><br><span class=\"line\">description: #博客简洁</span><br><span class=\"line\">author: #博客作者</span><br><span class=\"line\">language: zh-Hans #使用的语言环境 zh-Hans为中文</span><br><span class=\"line\">email: #邮箱</span><br><span class=\"line\">keywords: #关键字</span><br></pre></td></tr></table></figure>\n<p>关键点在于后面的这些信息,一会有用到,先混个脸熟</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">theme: #使用模板</span><br><span class=\"line\">...</span><br><span class=\"line\">deploy: #部署信息配置</span><br><span class=\"line\">type: git #部署类型</span><br><span class=\"line\">repository: xxxx #你的git仓库地址</span><br><span class=\"line\">branch: master #推送的分支</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-创建Repository\"><a href=\"#5-创建Repository\" class=\"headerlink\" title=\"5.创建Repository\"></a>5.创建Repository</h4><h5 id=\"登录github-创建一个新的Repository\"><a href=\"#登录github-创建一个新的Repository\" class=\"headerlink\" title=\"登录github,创建一个新的Repository\"></a>登录github,创建一个新的Repository</h5><p>命名规则为’你的github用户名.github.io’ 一定要按照这个规则命名</p>\n<p>创建成功后copy这个仓库的SSH地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大致长这个样子</span><br><span class=\"line\">git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>\n<p>然后编辑上面说到的Hexo配置文件,找到部署信息配置,在repository后面加上刚刚复制的地址(冒号后面记得加空格),其他字段按照上面的示例配置.</p>\n<p>然后保存配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esc键 然后直接输入:wq 就保存了</span><br></pre></td></tr></table></figure>\n<h5 id=\"设置SSH-key\"><a href=\"#设置SSH-key\" class=\"headerlink\" title=\"设置SSH key\"></a>设置SSH key</h5><p>检验是否已存在key</p>\n<p>分别执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~</span><br><span class=\"line\">$ cd  .ssh</span><br></pre></td></tr></table></figure>\n<p>再执行命令 ls 查看是有已有key文件,一般存在key的话都会显示id_rsa.pub 和 id_dsa.pub这两个文件,没有key什么都不会显示</p>\n<p>添加一个 SSH key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># email为你的github登录邮箱</span><br><span class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@mail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>会提示你指定文件名,如果什么都不输入,直接回车,会默认使用id_rsa.pub为ssh key文件名</p>\n<p>回车之后,需要输入两次密码,这个密码是你push文件的时候要输入的密码，而不是github的密码,如果不打算使用密码,直接回车就好,然后就会看到ssh key添加成功</p>\n<p>然后使用命令显示ssh key内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /roor/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>会出来一大坨东西,直接全部复制,然后到你的github账户</p>\n<p>点击右上角你的头像,选择’settings’,选择左边的’SSH and GPG keys’ 在SSH keys区域,选择New SSH key,然后把刚刚复制的粘贴进,保存,就OK了</p>\n<p>回到命令行,输入下面命令,测试是否添加正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果成功,他会显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi xxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>到这里,git上的所有操作,基本结束.</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6.部署到github\"></a>6.部署到github</h4><p>Hexo提供了两个命令,先使用generate生成静态文件,然后使用deploy命令,他会根据配置文件里,我们填入的git信息,执行push</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>实际使用中每次都要写两个命令太麻烦了,所以Hexo提供了缩写命令’g -d’ 生成后,直接推送到git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g -d</span><br></pre></td></tr></table></figure>\n<p>等待命令执行完毕后,可以查看代码是否已提交到github上,然后在浏览器输入’你的用户名.github.io’就可以访问了</p>\n<h4 id=\"7-使用Hexo写博客\"><a href=\"#7-使用Hexo写博客\" class=\"headerlink\" title=\"7.使用Hexo写博客\"></a>7.使用Hexo写博客</h4><h5 id=\"删除博客\"><a href=\"#删除博客\" class=\"headerlink\" title=\"删除博客\"></a>删除博客</h5><p>默认Hexo会有一片hello,word的博客示例<br>正好拿来练手</p>\n<p>删除博客需要进入博客根目录/source/_posts目录中删除文件后执行下面的命令就好了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h5 id=\"新建博客\"><a href=\"#新建博客\" class=\"headerlink\" title=\"新建博客\"></a>新建博客</h5><p>在博客目录下,使用以下命令,即可在/source/_posts目录下新建一个.md文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 文章名</span><br></pre></td></tr></table></figure>\n<p>找到这个文件,对他进行编辑就可以了.</p>\n<h4 id=\"8-使用Hexo主题\"><a href=\"#8-使用Hexo主题\" class=\"headerlink\" title=\"8. 使用Hexo主题\"></a>8. 使用Hexo主题</h4><p>我这里用的是大名鼎鼎的Next,我就用Next举例子了,其他的主题,可以看他们对应的说明,都会有教程的</p>\n<p>cd到博客目录下,使用下面的Git命令,将next拉到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>编辑Hexo配置文件,将theme一项后面改为next(记得冒号后面加空格)</p>\n<p>执行 hexo s –debug 开启本地站点,并进入调试模式,看下效果</p>\n<p>next提供了三种风格,关于next的配置,需要到博客目录/themes/next下面 找到_config.yml文件进行配置,具体配置到next的官网看就可以了.</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>themes目录是Hexo的主题模板文件夹</li>\n<li>Hexo的配置文件命名风格都是以_config.yml命名,模板的_config.yml和Hexo的_config.yml是两回事,千万不要改错了!!!</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo配置文件路径</span><br><span class=\"line\">博客目录/_config.yml</span><br><span class=\"line\">模板配置文件路径</span><br><span class=\"line\">博客目录/themes/对应的模板/_config.yml</span><br></pre></td></tr></table></figure>\n<p>大致的从搭建到使用的步骤就是这些.</p>\n<p>从上周开始我尝试了wordpress,hexo和jekyll.也踩了很多坑,文字太多,没办法一一表述.</p>\n<p>虽然最后都解决了,并且可以正常运行了,但是犹豫再三还是放弃了</p>\n<p>最终选择了Hexo,其实主要还是觉得利用上github比较酷,感觉很专业</p>\n<p>国内还可以选择coding替代github,coding可以选择北京和香港的节点,比github要快,需要的自行百度</p>\n<p>我个人也很喜欢jekyll,还有喵神写的那个他博客用的模板.</p>"},{"title":"git不提交空文件夹结构解决办法","date":"2016-12-19T07:21:46.000Z","_content":"git 默认忽略空目录结构,所以要在每个空目录下添加.gitignore文件 让git检测到空目录\n\ncd到git目录下 执行以下命令\n```\n$ find . -type d -empty -exec touch {}/.gitignore \\;\n```\n","source":"_posts/git不提交空文件夹结构解决办法.md","raw":"---\ntitle: git不提交空文件夹结构解决办法\ndate: 2016-12-19 15:21:46\ntags: git\n---\ngit 默认忽略空目录结构,所以要在每个空目录下添加.gitignore文件 让git检测到空目录\n\ncd到git目录下 执行以下命令\n```\n$ find . -type d -empty -exec touch {}/.gitignore \\;\n```\n","slug":"git不提交空文件夹结构解决办法","published":1,"updated":"2021-07-09T09:56:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg30001tdm2blxt22qy","content":"<p>git 默认忽略空目录结构,所以要在每个空目录下添加.gitignore文件 让git检测到空目录</p>\n<p>cd到git目录下 执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -type d -empty -exec touch &#123;&#125;/.gitignore \\;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>git 默认忽略空目录结构,所以要在每个空目录下添加.gitignore文件 让git检测到空目录</p>\n<p>cd到git目录下 执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -type d -empty -exec touch &#123;&#125;/.gitignore \\;</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS Crash Hook","date":"2018-04-19T07:24:55.000Z","_content":"\n> crash 是程序中开发人员必不可少要面临的问题\n相对后端程序员可以随时看到crash日志来说,移动端程序员面对crash就比较麻烦了,要拿到第三方统计或者用户上报的日志文件,然后符号化,再去处理.\n所以我们希望可以用一些手段去捕获它.\n\n#### Crash捕获\n\niOS崩溃主要是有Mach异常,以及Objective-C异常两种:\nMach异常最后会被转换为Signal信号,所以可以捕获Signal信号来处理它.\nObjective-C的异常NSException会由系统抛出,可以通过注册NSUncaughtExceptionHandler来捕获它.\n<!-- more --> \n##### 直接上代码 一步一步来\n```\n//记录之前的异常处理器\nstatic NSUncaughtExceptionHandler *previousUncaughtExceptionHandler = nil;\n```\n```\n//注册未捕获异常处理\n    [[self alloc] registerExceptionHandler];\n//注册信号异常处理\n    [[self alloc] registerSignalHandler];\n\n```\n```\n//注册捕获异常处理\n-(void)registerExceptionHandler{\n    //先获取到程序已经注册过的异常处理方法\n    previousUncaughtExceptionHandler = NSGetUncaughtExceptionHandler();\n    //将自己的异常处理方法set进去\n    NSSetUncaughtExceptionHandler(&HandleException);\n}\n//注册信号异常处理\n-(void)registerSignalHandler{\n    //利用signal(int, void (*)(int))函数将需要处理的信号注册进去. 第二个参数如果传入SIG_DFL为默认的信号处理程序\n    signal(SIGABRT, SignalHandler);\n    signal(SIGILL, SignalHandler);\n    signal(SIGSEGV, SignalHandler);\n    signal(SIGFPE, SignalHandler);\n    signal(SIGBUS, SignalHandler);\n    signal(SIGPIPE, SignalHandler);\n}\n```\n上面的代码值得一提的是注册NSException异常的方法registerExceptionHandler.\n因为全局只允许存在一个异常处理的Handler,项目中不可避免的会集成一些第三方SDK内部或许也会收集异常,比较友好的做法是我们在注册自己的异常处理方法前,先通过NSGetUncaughtExceptionHandler()获取到程序中已经注册过的处理方法并持有它,再运用NSSetUncaughtExceptionHandler()将我们自己的方法注册进去,直到我们的处理机制运行完毕,再手动调用下之前的异常处理器,将异常传递出去.\n```\n//附上相应的信号解释\nSIGABRT\n程序中止命令信号\n调用abort函数生成的信号。\n\nSIGILL\n程序非法指令信号\n执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。\n\nSIGSEGV\n程序无效内存中止信号\n试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.\n\nSIGFPE\n程序浮点异常信号\n在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。\n\nSIGBUS\n程序内存字节未对齐中止信号\n非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。\n\nSIGPIPE\n程序Socket发送失败中止信号\n管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。\n```\n\n##### 异常处理\n```\n//OC异常处理\nstatic void HandleException(NSException *exception) {\n    //递增的全局计数器\n    int32_t exceptionCount = OSAtomicIncrement32(&UncaughtExceptionCount);\n    //如果全局计数器大于10则不处理 避免并发量过大\n    if (exceptionCount > UncaughtExceptionMaximum) {\n        return;\n    }\n    //获取堆栈\n    NSArray *callStackSymbols = [exception callStackSymbols];\n    NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithDictionary:[exception userInfo]];\n    [userInfo setObject:callStackSymbols forKey:UncaughtExceptionHandlerAddressesKey];\n    //新建一个NSException对象并回到主线程对它进行最终的处理\n    [[[GGCrashHookManager alloc] init]\n     performSelectorOnMainThread:@selector(handleException:)\n     withObject:[NSException exceptionWithName:[exception name]\n                             reason:[exception reason]\n                           userInfo:userInfo]\n     waitUntilDone:YES];\n    //将异常传递\n    previousUncaughtExceptionHandler(exception);\n}\n```\n\n```\n//信号异常处理\nstatic void SignalHandler(int signal) {\n    int32_t exceptionCount = OSAtomicIncrement32(&UncaughtExceptionCount);\n    if (exceptionCount > UncaughtExceptionMaximum) {\n        return;\n    }\n\n\n    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];\n    //获取堆栈信息\n    NSArray *callStack = [GGCrashHookManager backtrace];\n    [userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];\n    [userInfo setObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];\n    //将信号异常信息也写入到NSException对象里 回到主线程统一做最后处理\n    [[[GGCrashHookManager alloc] init]\n     performSelectorOnMainThread:@selector(handleException:)\n     withObject:\n     [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName\n                             reason: [NSString stringWithFormat:@\"Signal %d was raised!\",signal];\n                           userInfo: userInfo]\n     waitUntilDone:YES];\n}\n```\n##### 异常处理最后一步\n```\n//最终处理方法\n-(void)handleException:(NSException *)exception{\n    [self exceptionDataHandle:exception];\n\n    /*\n      程序执行到这里就可以结束了,我们只是想要拿到堆栈信息,但是如果在这里你想做一些友好化的提示,例如崩溃弹窗,点击继续APP不死的操作还可以做下面的一些事\n      */\n      //创建一个runLoop runLoop不提供创建方法 下面的写法会判断是否存在,不存在则会创建\n      CFRunLoopRef runLoop = CFRunLoopGetCurrent();\n      //获取到runLoop的所有Mode\n      CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);\n      //写一个死循环\n      while (1) {\n          for (NSString *mode in (__bridge NSArray *)allModes) {\n              //快速切换Mode\n              CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);\n          }\n      }\n      /*\n      上面的写法,我个人理解是因为主线程本身开启了它的runLoop,\n      runLoop在Main函数中做的事情又本身是在做一个走走停停的死循环,\n      而signal信号会通知程序终止,main函数中的runLoop无法继续循环\n      尚不确定signal信号发送后是否会关闭主线程的runLoop\n      如果会杀死,那就是手动为主线程开启了一条runLoop防止崩溃\n      如果不会杀死,那就是强行调起runLoop切换他的mode\n      杀死的可能更大,这一点有待测试\n      */\n\n    //取消信号监听\n    signal(SIGABRT, SIG_DFL);\n    signal(SIGILL, SIG_DFL);\n    signal(SIGSEGV, SIG_DFL);\n    signal(SIGFPE, SIG_DFL);\n    signal(SIGBUS, SIG_DFL);\n    signal(SIGPIPE, SIG_DFL);\n\n    if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) {\n        //如果是信号异常 将信号传递出去\n        kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);\n    }else{\n        //如果是未捕获异常 直接将异常传递出去\n        [exception raise];\n    }\n}\n\n-(void)exceptionDataHandle:(NSException *)exception {\n    NSString *title = @\"\\n--------崩溃日志---------\\n\";\n    NSString *appInfo = @\"app信息:\\n\";\n    NSString *exceptionName = @\"异常名称:\\n\";\n    NSString *exceptionReason = @\"异常原因:\\n\";\n    NSString *exceptionUserInfo = @\"异常userInfo:\\n\";\n    NSString *exceptionCallStackSymbols = @\"异常堆栈:\\n\";\n    NSString *exceptionInfo = [NSString stringWithFormat:@\"%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n\",title,appInfo, getAppInfo(),exceptionName,exception.name,exceptionReason, exception.reason,exceptionUserInfo,exception.userInfo ? : @\"no user info\", exceptionCallStackSymbols, [exception callStackSymbols]];\n    /*\n     这个exceptionInfo现在就可以用来打印或者写入自己的日志系统,上传服务器了\n    */\n\n}\n```\n","source":"_posts/iOS Crash Hook.md","raw":"---\ntitle: iOS Crash Hook\ndate: 2018-4-19 15:24:55\ntags: iOS\n---\n\n> crash 是程序中开发人员必不可少要面临的问题\n相对后端程序员可以随时看到crash日志来说,移动端程序员面对crash就比较麻烦了,要拿到第三方统计或者用户上报的日志文件,然后符号化,再去处理.\n所以我们希望可以用一些手段去捕获它.\n\n#### Crash捕获\n\niOS崩溃主要是有Mach异常,以及Objective-C异常两种:\nMach异常最后会被转换为Signal信号,所以可以捕获Signal信号来处理它.\nObjective-C的异常NSException会由系统抛出,可以通过注册NSUncaughtExceptionHandler来捕获它.\n<!-- more --> \n##### 直接上代码 一步一步来\n```\n//记录之前的异常处理器\nstatic NSUncaughtExceptionHandler *previousUncaughtExceptionHandler = nil;\n```\n```\n//注册未捕获异常处理\n    [[self alloc] registerExceptionHandler];\n//注册信号异常处理\n    [[self alloc] registerSignalHandler];\n\n```\n```\n//注册捕获异常处理\n-(void)registerExceptionHandler{\n    //先获取到程序已经注册过的异常处理方法\n    previousUncaughtExceptionHandler = NSGetUncaughtExceptionHandler();\n    //将自己的异常处理方法set进去\n    NSSetUncaughtExceptionHandler(&HandleException);\n}\n//注册信号异常处理\n-(void)registerSignalHandler{\n    //利用signal(int, void (*)(int))函数将需要处理的信号注册进去. 第二个参数如果传入SIG_DFL为默认的信号处理程序\n    signal(SIGABRT, SignalHandler);\n    signal(SIGILL, SignalHandler);\n    signal(SIGSEGV, SignalHandler);\n    signal(SIGFPE, SignalHandler);\n    signal(SIGBUS, SignalHandler);\n    signal(SIGPIPE, SignalHandler);\n}\n```\n上面的代码值得一提的是注册NSException异常的方法registerExceptionHandler.\n因为全局只允许存在一个异常处理的Handler,项目中不可避免的会集成一些第三方SDK内部或许也会收集异常,比较友好的做法是我们在注册自己的异常处理方法前,先通过NSGetUncaughtExceptionHandler()获取到程序中已经注册过的处理方法并持有它,再运用NSSetUncaughtExceptionHandler()将我们自己的方法注册进去,直到我们的处理机制运行完毕,再手动调用下之前的异常处理器,将异常传递出去.\n```\n//附上相应的信号解释\nSIGABRT\n程序中止命令信号\n调用abort函数生成的信号。\n\nSIGILL\n程序非法指令信号\n执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。\n\nSIGSEGV\n程序无效内存中止信号\n试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.\n\nSIGFPE\n程序浮点异常信号\n在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。\n\nSIGBUS\n程序内存字节未对齐中止信号\n非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。\n\nSIGPIPE\n程序Socket发送失败中止信号\n管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。\n```\n\n##### 异常处理\n```\n//OC异常处理\nstatic void HandleException(NSException *exception) {\n    //递增的全局计数器\n    int32_t exceptionCount = OSAtomicIncrement32(&UncaughtExceptionCount);\n    //如果全局计数器大于10则不处理 避免并发量过大\n    if (exceptionCount > UncaughtExceptionMaximum) {\n        return;\n    }\n    //获取堆栈\n    NSArray *callStackSymbols = [exception callStackSymbols];\n    NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithDictionary:[exception userInfo]];\n    [userInfo setObject:callStackSymbols forKey:UncaughtExceptionHandlerAddressesKey];\n    //新建一个NSException对象并回到主线程对它进行最终的处理\n    [[[GGCrashHookManager alloc] init]\n     performSelectorOnMainThread:@selector(handleException:)\n     withObject:[NSException exceptionWithName:[exception name]\n                             reason:[exception reason]\n                           userInfo:userInfo]\n     waitUntilDone:YES];\n    //将异常传递\n    previousUncaughtExceptionHandler(exception);\n}\n```\n\n```\n//信号异常处理\nstatic void SignalHandler(int signal) {\n    int32_t exceptionCount = OSAtomicIncrement32(&UncaughtExceptionCount);\n    if (exceptionCount > UncaughtExceptionMaximum) {\n        return;\n    }\n\n\n    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];\n    //获取堆栈信息\n    NSArray *callStack = [GGCrashHookManager backtrace];\n    [userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];\n    [userInfo setObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];\n    //将信号异常信息也写入到NSException对象里 回到主线程统一做最后处理\n    [[[GGCrashHookManager alloc] init]\n     performSelectorOnMainThread:@selector(handleException:)\n     withObject:\n     [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName\n                             reason: [NSString stringWithFormat:@\"Signal %d was raised!\",signal];\n                           userInfo: userInfo]\n     waitUntilDone:YES];\n}\n```\n##### 异常处理最后一步\n```\n//最终处理方法\n-(void)handleException:(NSException *)exception{\n    [self exceptionDataHandle:exception];\n\n    /*\n      程序执行到这里就可以结束了,我们只是想要拿到堆栈信息,但是如果在这里你想做一些友好化的提示,例如崩溃弹窗,点击继续APP不死的操作还可以做下面的一些事\n      */\n      //创建一个runLoop runLoop不提供创建方法 下面的写法会判断是否存在,不存在则会创建\n      CFRunLoopRef runLoop = CFRunLoopGetCurrent();\n      //获取到runLoop的所有Mode\n      CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);\n      //写一个死循环\n      while (1) {\n          for (NSString *mode in (__bridge NSArray *)allModes) {\n              //快速切换Mode\n              CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);\n          }\n      }\n      /*\n      上面的写法,我个人理解是因为主线程本身开启了它的runLoop,\n      runLoop在Main函数中做的事情又本身是在做一个走走停停的死循环,\n      而signal信号会通知程序终止,main函数中的runLoop无法继续循环\n      尚不确定signal信号发送后是否会关闭主线程的runLoop\n      如果会杀死,那就是手动为主线程开启了一条runLoop防止崩溃\n      如果不会杀死,那就是强行调起runLoop切换他的mode\n      杀死的可能更大,这一点有待测试\n      */\n\n    //取消信号监听\n    signal(SIGABRT, SIG_DFL);\n    signal(SIGILL, SIG_DFL);\n    signal(SIGSEGV, SIG_DFL);\n    signal(SIGFPE, SIG_DFL);\n    signal(SIGBUS, SIG_DFL);\n    signal(SIGPIPE, SIG_DFL);\n\n    if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) {\n        //如果是信号异常 将信号传递出去\n        kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);\n    }else{\n        //如果是未捕获异常 直接将异常传递出去\n        [exception raise];\n    }\n}\n\n-(void)exceptionDataHandle:(NSException *)exception {\n    NSString *title = @\"\\n--------崩溃日志---------\\n\";\n    NSString *appInfo = @\"app信息:\\n\";\n    NSString *exceptionName = @\"异常名称:\\n\";\n    NSString *exceptionReason = @\"异常原因:\\n\";\n    NSString *exceptionUserInfo = @\"异常userInfo:\\n\";\n    NSString *exceptionCallStackSymbols = @\"异常堆栈:\\n\";\n    NSString *exceptionInfo = [NSString stringWithFormat:@\"%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n\",title,appInfo, getAppInfo(),exceptionName,exception.name,exceptionReason, exception.reason,exceptionUserInfo,exception.userInfo ? : @\"no user info\", exceptionCallStackSymbols, [exception callStackSymbols]];\n    /*\n     这个exceptionInfo现在就可以用来打印或者写入自己的日志系统,上传服务器了\n    */\n\n}\n```\n","slug":"iOS Crash Hook","published":1,"updated":"2021-07-12T07:18:35.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg50003tdm23q6w55ps","content":"<blockquote>\n<p>crash 是程序中开发人员必不可少要面临的问题<br>相对后端程序员可以随时看到crash日志来说,移动端程序员面对crash就比较麻烦了,要拿到第三方统计或者用户上报的日志文件,然后符号化,再去处理.<br>所以我们希望可以用一些手段去捕获它.</p>\n</blockquote>\n<h4 id=\"Crash捕获\"><a href=\"#Crash捕获\" class=\"headerlink\" title=\"Crash捕获\"></a>Crash捕获</h4><p>iOS崩溃主要是有Mach异常,以及Objective-C异常两种:<br>Mach异常最后会被转换为Signal信号,所以可以捕获Signal信号来处理它.<br>Objective-C的异常NSException会由系统抛出,可以通过注册NSUncaughtExceptionHandler来捕获它.</p>\n<span id=\"more\"></span> \n<h5 id=\"直接上代码-一步一步来\"><a href=\"#直接上代码-一步一步来\" class=\"headerlink\" title=\"直接上代码 一步一步来\"></a>直接上代码 一步一步来</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//记录之前的异常处理器</span><br><span class=\"line\">static NSUncaughtExceptionHandler *previousUncaughtExceptionHandler = nil;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注册未捕获异常处理</span><br><span class=\"line\">    [[self alloc] registerExceptionHandler];</span><br><span class=\"line\">//注册信号异常处理</span><br><span class=\"line\">    [[self alloc] registerSignalHandler];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注册捕获异常处理</span><br><span class=\"line\">-(void)registerExceptionHandler&#123;</span><br><span class=\"line\">    //先获取到程序已经注册过的异常处理方法</span><br><span class=\"line\">    previousUncaughtExceptionHandler = NSGetUncaughtExceptionHandler();</span><br><span class=\"line\">    //将自己的异常处理方法set进去</span><br><span class=\"line\">    NSSetUncaughtExceptionHandler(&amp;HandleException);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//注册信号异常处理</span><br><span class=\"line\">-(void)registerSignalHandler&#123;</span><br><span class=\"line\">    //利用signal(int, void (*)(int))函数将需要处理的信号注册进去. 第二个参数如果传入SIG_DFL为默认的信号处理程序</span><br><span class=\"line\">    signal(SIGABRT, SignalHandler);</span><br><span class=\"line\">    signal(SIGILL, SignalHandler);</span><br><span class=\"line\">    signal(SIGSEGV, SignalHandler);</span><br><span class=\"line\">    signal(SIGFPE, SignalHandler);</span><br><span class=\"line\">    signal(SIGBUS, SignalHandler);</span><br><span class=\"line\">    signal(SIGPIPE, SignalHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码值得一提的是注册NSException异常的方法registerExceptionHandler.<br>因为全局只允许存在一个异常处理的Handler,项目中不可避免的会集成一些第三方SDK内部或许也会收集异常,比较友好的做法是我们在注册自己的异常处理方法前,先通过NSGetUncaughtExceptionHandler()获取到程序中已经注册过的处理方法并持有它,再运用NSSetUncaughtExceptionHandler()将我们自己的方法注册进去,直到我们的处理机制运行完毕,再手动调用下之前的异常处理器,将异常传递出去.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//附上相应的信号解释</span><br><span class=\"line\">SIGABRT</span><br><span class=\"line\">程序中止命令信号</span><br><span class=\"line\">调用abort函数生成的信号。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGILL</span><br><span class=\"line\">程序非法指令信号</span><br><span class=\"line\">执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGSEGV</span><br><span class=\"line\">程序无效内存中止信号</span><br><span class=\"line\">试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.</span><br><span class=\"line\"></span><br><span class=\"line\">SIGFPE</span><br><span class=\"line\">程序浮点异常信号</span><br><span class=\"line\">在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGBUS</span><br><span class=\"line\">程序内存字节未对齐中止信号</span><br><span class=\"line\">非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGPIPE</span><br><span class=\"line\">程序Socket发送失败中止信号</span><br><span class=\"line\">管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//OC异常处理</span><br><span class=\"line\">static void HandleException(NSException *exception) &#123;</span><br><span class=\"line\">    //递增的全局计数器</span><br><span class=\"line\">    int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);</span><br><span class=\"line\">    //如果全局计数器大于10则不处理 避免并发量过大</span><br><span class=\"line\">    if (exceptionCount &gt; UncaughtExceptionMaximum) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //获取堆栈</span><br><span class=\"line\">    NSArray *callStackSymbols = [exception callStackSymbols];</span><br><span class=\"line\">    NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithDictionary:[exception userInfo]];</span><br><span class=\"line\">    [userInfo setObject:callStackSymbols forKey:UncaughtExceptionHandlerAddressesKey];</span><br><span class=\"line\">    //新建一个NSException对象并回到主线程对它进行最终的处理</span><br><span class=\"line\">    [[[GGCrashHookManager alloc] init]</span><br><span class=\"line\">     performSelectorOnMainThread:@selector(handleException:)</span><br><span class=\"line\">     withObject:[NSException exceptionWithName:[exception name]</span><br><span class=\"line\">                             reason:[exception reason]</span><br><span class=\"line\">                           userInfo:userInfo]</span><br><span class=\"line\">     waitUntilDone:YES];</span><br><span class=\"line\">    //将异常传递</span><br><span class=\"line\">    previousUncaughtExceptionHandler(exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//信号异常处理</span><br><span class=\"line\">static void SignalHandler(int signal) &#123;</span><br><span class=\"line\">    int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);</span><br><span class=\"line\">    if (exceptionCount &gt; UncaughtExceptionMaximum) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];</span><br><span class=\"line\">    //获取堆栈信息</span><br><span class=\"line\">    NSArray *callStack = [GGCrashHookManager backtrace];</span><br><span class=\"line\">    [userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];</span><br><span class=\"line\">    [userInfo setObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];</span><br><span class=\"line\">    //将信号异常信息也写入到NSException对象里 回到主线程统一做最后处理</span><br><span class=\"line\">    [[[GGCrashHookManager alloc] init]</span><br><span class=\"line\">     performSelectorOnMainThread:@selector(handleException:)</span><br><span class=\"line\">     withObject:</span><br><span class=\"line\">     [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName</span><br><span class=\"line\">                             reason: [NSString stringWithFormat:@&quot;Signal %d was raised!&quot;,signal];</span><br><span class=\"line\">                           userInfo: userInfo]</span><br><span class=\"line\">     waitUntilDone:YES];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"异常处理最后一步\"><a href=\"#异常处理最后一步\" class=\"headerlink\" title=\"异常处理最后一步\"></a>异常处理最后一步</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//最终处理方法</span><br><span class=\"line\">-(void)handleException:(NSException *)exception&#123;</span><br><span class=\"line\">    [self exceptionDataHandle:exception];</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">      程序执行到这里就可以结束了,我们只是想要拿到堆栈信息,但是如果在这里你想做一些友好化的提示,例如崩溃弹窗,点击继续APP不死的操作还可以做下面的一些事</span><br><span class=\"line\">      */</span><br><span class=\"line\">      //创建一个runLoop runLoop不提供创建方法 下面的写法会判断是否存在,不存在则会创建</span><br><span class=\"line\">      CFRunLoopRef runLoop = CFRunLoopGetCurrent();</span><br><span class=\"line\">      //获取到runLoop的所有Mode</span><br><span class=\"line\">      CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);</span><br><span class=\"line\">      //写一个死循环</span><br><span class=\"line\">      while (1) &#123;</span><br><span class=\"line\">          for (NSString *mode in (__bridge NSArray *)allModes) &#123;</span><br><span class=\"line\">              //快速切换Mode</span><br><span class=\"line\">              CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      上面的写法,我个人理解是因为主线程本身开启了它的runLoop,</span><br><span class=\"line\">      runLoop在Main函数中做的事情又本身是在做一个走走停停的死循环,</span><br><span class=\"line\">      而signal信号会通知程序终止,main函数中的runLoop无法继续循环</span><br><span class=\"line\">      尚不确定signal信号发送后是否会关闭主线程的runLoop</span><br><span class=\"line\">      如果会杀死,那就是手动为主线程开启了一条runLoop防止崩溃</span><br><span class=\"line\">      如果不会杀死,那就是强行调起runLoop切换他的mode</span><br><span class=\"line\">      杀死的可能更大,这一点有待测试</span><br><span class=\"line\">      */</span><br><span class=\"line\"></span><br><span class=\"line\">    //取消信号监听</span><br><span class=\"line\">    signal(SIGABRT, SIG_DFL);</span><br><span class=\"line\">    signal(SIGILL, SIG_DFL);</span><br><span class=\"line\">    signal(SIGSEGV, SIG_DFL);</span><br><span class=\"line\">    signal(SIGFPE, SIG_DFL);</span><br><span class=\"line\">    signal(SIGBUS, SIG_DFL);</span><br><span class=\"line\">    signal(SIGPIPE, SIG_DFL);</span><br><span class=\"line\"></span><br><span class=\"line\">    if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) &#123;</span><br><span class=\"line\">        //如果是信号异常 将信号传递出去</span><br><span class=\"line\">        kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        //如果是未捕获异常 直接将异常传递出去</span><br><span class=\"line\">        [exception raise];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)exceptionDataHandle:(NSException *)exception &#123;</span><br><span class=\"line\">    NSString *title = @&quot;\\n--------崩溃日志---------\\n&quot;;</span><br><span class=\"line\">    NSString *appInfo = @&quot;app信息:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionName = @&quot;异常名称:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionReason = @&quot;异常原因:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionUserInfo = @&quot;异常userInfo:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionCallStackSymbols = @&quot;异常堆栈:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionInfo = [NSString stringWithFormat:@&quot;%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n&quot;,title,appInfo, getAppInfo(),exceptionName,exception.name,exceptionReason, exception.reason,exceptionUserInfo,exception.userInfo ? : @&quot;no user info&quot;, exceptionCallStackSymbols, [exception callStackSymbols]];</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     这个exceptionInfo现在就可以用来打印或者写入自己的日志系统,上传服务器了</span><br><span class=\"line\">    */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>crash 是程序中开发人员必不可少要面临的问题<br>相对后端程序员可以随时看到crash日志来说,移动端程序员面对crash就比较麻烦了,要拿到第三方统计或者用户上报的日志文件,然后符号化,再去处理.<br>所以我们希望可以用一些手段去捕获它.</p>\n</blockquote>\n<h4 id=\"Crash捕获\"><a href=\"#Crash捕获\" class=\"headerlink\" title=\"Crash捕获\"></a>Crash捕获</h4><p>iOS崩溃主要是有Mach异常,以及Objective-C异常两种:<br>Mach异常最后会被转换为Signal信号,所以可以捕获Signal信号来处理它.<br>Objective-C的异常NSException会由系统抛出,可以通过注册NSUncaughtExceptionHandler来捕获它.</p>","more":"<h5 id=\"直接上代码-一步一步来\"><a href=\"#直接上代码-一步一步来\" class=\"headerlink\" title=\"直接上代码 一步一步来\"></a>直接上代码 一步一步来</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//记录之前的异常处理器</span><br><span class=\"line\">static NSUncaughtExceptionHandler *previousUncaughtExceptionHandler = nil;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注册未捕获异常处理</span><br><span class=\"line\">    [[self alloc] registerExceptionHandler];</span><br><span class=\"line\">//注册信号异常处理</span><br><span class=\"line\">    [[self alloc] registerSignalHandler];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注册捕获异常处理</span><br><span class=\"line\">-(void)registerExceptionHandler&#123;</span><br><span class=\"line\">    //先获取到程序已经注册过的异常处理方法</span><br><span class=\"line\">    previousUncaughtExceptionHandler = NSGetUncaughtExceptionHandler();</span><br><span class=\"line\">    //将自己的异常处理方法set进去</span><br><span class=\"line\">    NSSetUncaughtExceptionHandler(&amp;HandleException);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//注册信号异常处理</span><br><span class=\"line\">-(void)registerSignalHandler&#123;</span><br><span class=\"line\">    //利用signal(int, void (*)(int))函数将需要处理的信号注册进去. 第二个参数如果传入SIG_DFL为默认的信号处理程序</span><br><span class=\"line\">    signal(SIGABRT, SignalHandler);</span><br><span class=\"line\">    signal(SIGILL, SignalHandler);</span><br><span class=\"line\">    signal(SIGSEGV, SignalHandler);</span><br><span class=\"line\">    signal(SIGFPE, SignalHandler);</span><br><span class=\"line\">    signal(SIGBUS, SignalHandler);</span><br><span class=\"line\">    signal(SIGPIPE, SignalHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码值得一提的是注册NSException异常的方法registerExceptionHandler.<br>因为全局只允许存在一个异常处理的Handler,项目中不可避免的会集成一些第三方SDK内部或许也会收集异常,比较友好的做法是我们在注册自己的异常处理方法前,先通过NSGetUncaughtExceptionHandler()获取到程序中已经注册过的处理方法并持有它,再运用NSSetUncaughtExceptionHandler()将我们自己的方法注册进去,直到我们的处理机制运行完毕,再手动调用下之前的异常处理器,将异常传递出去.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//附上相应的信号解释</span><br><span class=\"line\">SIGABRT</span><br><span class=\"line\">程序中止命令信号</span><br><span class=\"line\">调用abort函数生成的信号。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGILL</span><br><span class=\"line\">程序非法指令信号</span><br><span class=\"line\">执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGSEGV</span><br><span class=\"line\">程序无效内存中止信号</span><br><span class=\"line\">试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.</span><br><span class=\"line\"></span><br><span class=\"line\">SIGFPE</span><br><span class=\"line\">程序浮点异常信号</span><br><span class=\"line\">在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGBUS</span><br><span class=\"line\">程序内存字节未对齐中止信号</span><br><span class=\"line\">非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。</span><br><span class=\"line\"></span><br><span class=\"line\">SIGPIPE</span><br><span class=\"line\">程序Socket发送失败中止信号</span><br><span class=\"line\">管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//OC异常处理</span><br><span class=\"line\">static void HandleException(NSException *exception) &#123;</span><br><span class=\"line\">    //递增的全局计数器</span><br><span class=\"line\">    int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);</span><br><span class=\"line\">    //如果全局计数器大于10则不处理 避免并发量过大</span><br><span class=\"line\">    if (exceptionCount &gt; UncaughtExceptionMaximum) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //获取堆栈</span><br><span class=\"line\">    NSArray *callStackSymbols = [exception callStackSymbols];</span><br><span class=\"line\">    NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithDictionary:[exception userInfo]];</span><br><span class=\"line\">    [userInfo setObject:callStackSymbols forKey:UncaughtExceptionHandlerAddressesKey];</span><br><span class=\"line\">    //新建一个NSException对象并回到主线程对它进行最终的处理</span><br><span class=\"line\">    [[[GGCrashHookManager alloc] init]</span><br><span class=\"line\">     performSelectorOnMainThread:@selector(handleException:)</span><br><span class=\"line\">     withObject:[NSException exceptionWithName:[exception name]</span><br><span class=\"line\">                             reason:[exception reason]</span><br><span class=\"line\">                           userInfo:userInfo]</span><br><span class=\"line\">     waitUntilDone:YES];</span><br><span class=\"line\">    //将异常传递</span><br><span class=\"line\">    previousUncaughtExceptionHandler(exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//信号异常处理</span><br><span class=\"line\">static void SignalHandler(int signal) &#123;</span><br><span class=\"line\">    int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);</span><br><span class=\"line\">    if (exceptionCount &gt; UncaughtExceptionMaximum) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];</span><br><span class=\"line\">    //获取堆栈信息</span><br><span class=\"line\">    NSArray *callStack = [GGCrashHookManager backtrace];</span><br><span class=\"line\">    [userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];</span><br><span class=\"line\">    [userInfo setObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];</span><br><span class=\"line\">    //将信号异常信息也写入到NSException对象里 回到主线程统一做最后处理</span><br><span class=\"line\">    [[[GGCrashHookManager alloc] init]</span><br><span class=\"line\">     performSelectorOnMainThread:@selector(handleException:)</span><br><span class=\"line\">     withObject:</span><br><span class=\"line\">     [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName</span><br><span class=\"line\">                             reason: [NSString stringWithFormat:@&quot;Signal %d was raised!&quot;,signal];</span><br><span class=\"line\">                           userInfo: userInfo]</span><br><span class=\"line\">     waitUntilDone:YES];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"异常处理最后一步\"><a href=\"#异常处理最后一步\" class=\"headerlink\" title=\"异常处理最后一步\"></a>异常处理最后一步</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//最终处理方法</span><br><span class=\"line\">-(void)handleException:(NSException *)exception&#123;</span><br><span class=\"line\">    [self exceptionDataHandle:exception];</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">      程序执行到这里就可以结束了,我们只是想要拿到堆栈信息,但是如果在这里你想做一些友好化的提示,例如崩溃弹窗,点击继续APP不死的操作还可以做下面的一些事</span><br><span class=\"line\">      */</span><br><span class=\"line\">      //创建一个runLoop runLoop不提供创建方法 下面的写法会判断是否存在,不存在则会创建</span><br><span class=\"line\">      CFRunLoopRef runLoop = CFRunLoopGetCurrent();</span><br><span class=\"line\">      //获取到runLoop的所有Mode</span><br><span class=\"line\">      CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);</span><br><span class=\"line\">      //写一个死循环</span><br><span class=\"line\">      while (1) &#123;</span><br><span class=\"line\">          for (NSString *mode in (__bridge NSArray *)allModes) &#123;</span><br><span class=\"line\">              //快速切换Mode</span><br><span class=\"line\">              CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      上面的写法,我个人理解是因为主线程本身开启了它的runLoop,</span><br><span class=\"line\">      runLoop在Main函数中做的事情又本身是在做一个走走停停的死循环,</span><br><span class=\"line\">      而signal信号会通知程序终止,main函数中的runLoop无法继续循环</span><br><span class=\"line\">      尚不确定signal信号发送后是否会关闭主线程的runLoop</span><br><span class=\"line\">      如果会杀死,那就是手动为主线程开启了一条runLoop防止崩溃</span><br><span class=\"line\">      如果不会杀死,那就是强行调起runLoop切换他的mode</span><br><span class=\"line\">      杀死的可能更大,这一点有待测试</span><br><span class=\"line\">      */</span><br><span class=\"line\"></span><br><span class=\"line\">    //取消信号监听</span><br><span class=\"line\">    signal(SIGABRT, SIG_DFL);</span><br><span class=\"line\">    signal(SIGILL, SIG_DFL);</span><br><span class=\"line\">    signal(SIGSEGV, SIG_DFL);</span><br><span class=\"line\">    signal(SIGFPE, SIG_DFL);</span><br><span class=\"line\">    signal(SIGBUS, SIG_DFL);</span><br><span class=\"line\">    signal(SIGPIPE, SIG_DFL);</span><br><span class=\"line\"></span><br><span class=\"line\">    if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) &#123;</span><br><span class=\"line\">        //如果是信号异常 将信号传递出去</span><br><span class=\"line\">        kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        //如果是未捕获异常 直接将异常传递出去</span><br><span class=\"line\">        [exception raise];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)exceptionDataHandle:(NSException *)exception &#123;</span><br><span class=\"line\">    NSString *title = @&quot;\\n--------崩溃日志---------\\n&quot;;</span><br><span class=\"line\">    NSString *appInfo = @&quot;app信息:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionName = @&quot;异常名称:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionReason = @&quot;异常原因:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionUserInfo = @&quot;异常userInfo:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionCallStackSymbols = @&quot;异常堆栈:\\n&quot;;</span><br><span class=\"line\">    NSString *exceptionInfo = [NSString stringWithFormat:@&quot;%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n%@%@\\n&quot;,title,appInfo, getAppInfo(),exceptionName,exception.name,exceptionReason, exception.reason,exceptionUserInfo,exception.userInfo ? : @&quot;no user info&quot;, exceptionCallStackSymbols, [exception callStackSymbols]];</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     这个exceptionInfo现在就可以用来打印或者写入自己的日志系统,上传服务器了</span><br><span class=\"line\">    */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ijkpalyer编译集成","toc":false,"date":"2020-03-10T04:24:55.000Z","_content":"\n> ijk安卓和iOS的编译过程大同小异,只要搞清楚配置文件的规则都是一样的，本文以iOS为例\n\n## 拉代码\n```\ngit clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n# 进入代码所在文件夹\ncd ijkplayer-ios\n```\n<!-- more --> \n## 文件说明\n### 关键文件说明：\n```\n# 初始化ios源码的脚本\nijkplayer-ios/init-ios.sh\n# 初始化ios HTTPS支持的脚本\nijkplayer-ios/init-ios-openssl.sh\n\n# 对应着ijkplayer在ios平台的源码\nijkplayer-ios/ios\n./compile-ffmpeg.sh 编译ffmpeg脚本\n./compile-openssl.sh 编译https支持脚本\n# 执行以上脚本编译完成后的产物\nijkplayer-ios/ios/build\n\n\n# 配置解码器配置文件所在的文件夹 \nijkplayer-ios/config\n./module-default.sh 更多的编解码器/格式\n./module-lite-hevc.sh 较少的编解码器/格式(包括hevc)\n./module-lite.sh 较少的编解码器/格式(默认情况)\n./module.sh 软连接以上三个其中一个 软连接方法 ln -s module-lite.sh module.sh\n\n```\n### 编辑配置说明：\n```\n#修改框架支持的arm指令集架构\nijkplayer-ios/init-ios.sh 中找到FF_ALL_ARCHS_IOS8_SDK字段,保留自己想要的架构\njkplayer-ios/init-ios-openssl.sh 同上\nijkplayer-ios/ios/compile-ffmpeg.sh 同上\nijkplayer-ios/ios/compile-openssl.sh 同上\n\n# arm指令集说明\n模拟器32位处理器测试需要i386架构，（iphone5,iphone5s以下的模拟器）\n模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)\n真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7,      ipnone5,iphone5s真机/armv7s）\n真机64位处理器需要arm64架构。(iphone6,iphone6p以上的真机)\n```\n\n## 编译步骤\n### 初始化源码\n```\n# 编辑配置\n修改ijkplayer-ios/init-ios.sh支持的架构,修改方式看编辑配置一节\n执行ijkplayer-ios/init-ios.sh\n```\n### HTTPS支持\n```\n如需支持HTTPS播放,需要执行ijkplayer-ios/init-ios-openssl.sh脚本初始化openssl源码\n# 编辑配置\n修改jkplayer-ios/init-ios-openssl.sh支持的架构,修改方式看编辑配置说明一节\n   \n# 在解码器配置文件中添加一行配置\nexport COMMON_FF_CFG_FLAGS=\"$COMMON_FF_CFG_FLAGS --enable-openssl\"\n\n执行ijkplayer-ios/init-ios-openssl.sh\n```\n\n### 编译\n```\ncd ios\n# 编辑配置 修改支持的架构,修改方式看编辑配置说明一节\n./compile-ffmpeg.sh \n./compile-openssl.sh\n\n编译openssl, 如果不需要https可以跳过这一步\n# 清理上次编译的产物\n./compile-openssl.sh clean\n# 编译openssl\n./compile-openssl.sh all\n\n编译ffmpeg\n# 清理上次编译的产物\n./compile-ffmpeg.sh clean\n# 编译ffmpeg\n./compile-ffmpeg.sh all \n```\n\n### 添加支持库\n```\n如果执行了openssl编译,需要手动添加openssl的支持库\n打开ijkplayer-ios/ios/IJKMediaPlayer/IJKMediaPlayer.xcodeproj\ntarget->IJKMediaFramework->General->Frameworks and Libraries->添加->Add Other...\n找到ijkplayer-ios/ios/build/universal/lib下的libcrypto.a 和libssl.a添加\n```\n\n### 合并动态库\n```\n修改Edit scheme -> Run -> Build Configuration为Release\n分别选择模拟器和真机执行build\n然后就可以在项目目录的Products文件夹下看到编译好的.framework库,show in finder\n可以看到上一级有Release-iphoneos和Release-iphonesimulator两个文件夹，对应真机和模拟器\n合并两个文件夹下的IJKMediaFramework.framework/IJKMediaFramework 为一个\nlipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径\nlipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n\n执行后的IJKMediaFramework替换到原来的两个文件夹中即可\n```\n\n### 拖入项目\n```\n将Release-iphoneos/IJKMediaFramework.framework文件拖入自己项目的Framework文件夹，至此ijkplayer的编译以及导入全部完成\n```","source":"_posts/ijkPlayer编译集成.md","raw":"---\ntitle: ijkpalyer编译集成\ntags:\n  - iOS\ncategories: []\ntoc: false\ndate: 2020-03-10 12:24:55\n---\n\n> ijk安卓和iOS的编译过程大同小异,只要搞清楚配置文件的规则都是一样的，本文以iOS为例\n\n## 拉代码\n```\ngit clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios\n# 进入代码所在文件夹\ncd ijkplayer-ios\n```\n<!-- more --> \n## 文件说明\n### 关键文件说明：\n```\n# 初始化ios源码的脚本\nijkplayer-ios/init-ios.sh\n# 初始化ios HTTPS支持的脚本\nijkplayer-ios/init-ios-openssl.sh\n\n# 对应着ijkplayer在ios平台的源码\nijkplayer-ios/ios\n./compile-ffmpeg.sh 编译ffmpeg脚本\n./compile-openssl.sh 编译https支持脚本\n# 执行以上脚本编译完成后的产物\nijkplayer-ios/ios/build\n\n\n# 配置解码器配置文件所在的文件夹 \nijkplayer-ios/config\n./module-default.sh 更多的编解码器/格式\n./module-lite-hevc.sh 较少的编解码器/格式(包括hevc)\n./module-lite.sh 较少的编解码器/格式(默认情况)\n./module.sh 软连接以上三个其中一个 软连接方法 ln -s module-lite.sh module.sh\n\n```\n### 编辑配置说明：\n```\n#修改框架支持的arm指令集架构\nijkplayer-ios/init-ios.sh 中找到FF_ALL_ARCHS_IOS8_SDK字段,保留自己想要的架构\njkplayer-ios/init-ios-openssl.sh 同上\nijkplayer-ios/ios/compile-ffmpeg.sh 同上\nijkplayer-ios/ios/compile-openssl.sh 同上\n\n# arm指令集说明\n模拟器32位处理器测试需要i386架构，（iphone5,iphone5s以下的模拟器）\n模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)\n真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7,      ipnone5,iphone5s真机/armv7s）\n真机64位处理器需要arm64架构。(iphone6,iphone6p以上的真机)\n```\n\n## 编译步骤\n### 初始化源码\n```\n# 编辑配置\n修改ijkplayer-ios/init-ios.sh支持的架构,修改方式看编辑配置一节\n执行ijkplayer-ios/init-ios.sh\n```\n### HTTPS支持\n```\n如需支持HTTPS播放,需要执行ijkplayer-ios/init-ios-openssl.sh脚本初始化openssl源码\n# 编辑配置\n修改jkplayer-ios/init-ios-openssl.sh支持的架构,修改方式看编辑配置说明一节\n   \n# 在解码器配置文件中添加一行配置\nexport COMMON_FF_CFG_FLAGS=\"$COMMON_FF_CFG_FLAGS --enable-openssl\"\n\n执行ijkplayer-ios/init-ios-openssl.sh\n```\n\n### 编译\n```\ncd ios\n# 编辑配置 修改支持的架构,修改方式看编辑配置说明一节\n./compile-ffmpeg.sh \n./compile-openssl.sh\n\n编译openssl, 如果不需要https可以跳过这一步\n# 清理上次编译的产物\n./compile-openssl.sh clean\n# 编译openssl\n./compile-openssl.sh all\n\n编译ffmpeg\n# 清理上次编译的产物\n./compile-ffmpeg.sh clean\n# 编译ffmpeg\n./compile-ffmpeg.sh all \n```\n\n### 添加支持库\n```\n如果执行了openssl编译,需要手动添加openssl的支持库\n打开ijkplayer-ios/ios/IJKMediaPlayer/IJKMediaPlayer.xcodeproj\ntarget->IJKMediaFramework->General->Frameworks and Libraries->添加->Add Other...\n找到ijkplayer-ios/ios/build/universal/lib下的libcrypto.a 和libssl.a添加\n```\n\n### 合并动态库\n```\n修改Edit scheme -> Run -> Build Configuration为Release\n分别选择模拟器和真机执行build\n然后就可以在项目目录的Products文件夹下看到编译好的.framework库,show in finder\n可以看到上一级有Release-iphoneos和Release-iphonesimulator两个文件夹，对应真机和模拟器\n合并两个文件夹下的IJKMediaFramework.framework/IJKMediaFramework 为一个\nlipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径\nlipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework\n\n执行后的IJKMediaFramework替换到原来的两个文件夹中即可\n```\n\n### 拖入项目\n```\n将Release-iphoneos/IJKMediaFramework.framework文件拖入自己项目的Framework文件夹，至此ijkplayer的编译以及导入全部完成\n```","slug":"ijkPlayer编译集成","published":1,"updated":"2021-07-12T07:16:54.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg60004tdm20it274d8","content":"<blockquote>\n<p>ijk安卓和iOS的编译过程大同小异,只要搞清楚配置文件的规则都是一样的，本文以iOS为例</p>\n</blockquote>\n<h2 id=\"拉代码\"><a href=\"#拉代码\" class=\"headerlink\" title=\"拉代码\"></a>拉代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios</span><br><span class=\"line\"># 进入代码所在文件夹</span><br><span class=\"line\">cd ijkplayer-ios</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span> \n<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><h3 id=\"关键文件说明：\"><a href=\"#关键文件说明：\" class=\"headerlink\" title=\"关键文件说明：\"></a>关键文件说明：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化ios源码的脚本</span><br><span class=\"line\">ijkplayer-ios/init-ios.sh</span><br><span class=\"line\"># 初始化ios HTTPS支持的脚本</span><br><span class=\"line\">ijkplayer-ios/init-ios-openssl.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 对应着ijkplayer在ios平台的源码</span><br><span class=\"line\">ijkplayer-ios/ios</span><br><span class=\"line\">./compile-ffmpeg.sh 编译ffmpeg脚本</span><br><span class=\"line\">./compile-openssl.sh 编译https支持脚本</span><br><span class=\"line\"># 执行以上脚本编译完成后的产物</span><br><span class=\"line\">ijkplayer-ios/ios/build</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 配置解码器配置文件所在的文件夹 </span><br><span class=\"line\">ijkplayer-ios/config</span><br><span class=\"line\">./module-default.sh 更多的编解码器/格式</span><br><span class=\"line\">./module-lite-hevc.sh 较少的编解码器/格式(包括hevc)</span><br><span class=\"line\">./module-lite.sh 较少的编解码器/格式(默认情况)</span><br><span class=\"line\">./module.sh 软连接以上三个其中一个 软连接方法 ln -s module-lite.sh module.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑配置说明：\"><a href=\"#编辑配置说明：\" class=\"headerlink\" title=\"编辑配置说明：\"></a>编辑配置说明：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改框架支持的arm指令集架构</span><br><span class=\"line\">ijkplayer-ios/init-ios.sh 中找到FF_ALL_ARCHS_IOS8_SDK字段,保留自己想要的架构</span><br><span class=\"line\">jkplayer-ios/init-ios-openssl.sh 同上</span><br><span class=\"line\">ijkplayer-ios/ios/compile-ffmpeg.sh 同上</span><br><span class=\"line\">ijkplayer-ios/ios/compile-openssl.sh 同上</span><br><span class=\"line\"></span><br><span class=\"line\"># arm指令集说明</span><br><span class=\"line\">模拟器32位处理器测试需要i386架构，（iphone5,iphone5s以下的模拟器）</span><br><span class=\"line\">模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)</span><br><span class=\"line\">真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7,      ipnone5,iphone5s真机/armv7s）</span><br><span class=\"line\">真机64位处理器需要arm64架构。(iphone6,iphone6p以上的真机)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><h3 id=\"初始化源码\"><a href=\"#初始化源码\" class=\"headerlink\" title=\"初始化源码\"></a>初始化源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑配置</span><br><span class=\"line\">修改ijkplayer-ios/init-ios.sh支持的架构,修改方式看编辑配置一节</span><br><span class=\"line\">执行ijkplayer-ios/init-ios.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTPS支持\"><a href=\"#HTTPS支持\" class=\"headerlink\" title=\"HTTPS支持\"></a>HTTPS支持</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如需支持HTTPS播放,需要执行ijkplayer-ios/init-ios-openssl.sh脚本初始化openssl源码</span><br><span class=\"line\"># 编辑配置</span><br><span class=\"line\">修改jkplayer-ios/init-ios-openssl.sh支持的架构,修改方式看编辑配置说明一节</span><br><span class=\"line\">   </span><br><span class=\"line\"># 在解码器配置文件中添加一行配置</span><br><span class=\"line\">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-openssl&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行ijkplayer-ios/init-ios-openssl.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ios</span><br><span class=\"line\"># 编辑配置 修改支持的架构,修改方式看编辑配置说明一节</span><br><span class=\"line\">./compile-ffmpeg.sh </span><br><span class=\"line\">./compile-openssl.sh</span><br><span class=\"line\"></span><br><span class=\"line\">编译openssl, 如果不需要https可以跳过这一步</span><br><span class=\"line\"># 清理上次编译的产物</span><br><span class=\"line\">./compile-openssl.sh clean</span><br><span class=\"line\"># 编译openssl</span><br><span class=\"line\">./compile-openssl.sh all</span><br><span class=\"line\"></span><br><span class=\"line\">编译ffmpeg</span><br><span class=\"line\"># 清理上次编译的产物</span><br><span class=\"line\">./compile-ffmpeg.sh clean</span><br><span class=\"line\"># 编译ffmpeg</span><br><span class=\"line\">./compile-ffmpeg.sh all </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加支持库\"><a href=\"#添加支持库\" class=\"headerlink\" title=\"添加支持库\"></a>添加支持库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果执行了openssl编译,需要手动添加openssl的支持库</span><br><span class=\"line\">打开ijkplayer-ios/ios/IJKMediaPlayer/IJKMediaPlayer.xcodeproj</span><br><span class=\"line\">target-&gt;IJKMediaFramework-&gt;General-&gt;Frameworks and Libraries-&gt;添加-&gt;Add Other...</span><br><span class=\"line\">找到ijkplayer-ios/ios/build/universal/lib下的libcrypto.a 和libssl.a添加</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并动态库\"><a href=\"#合并动态库\" class=\"headerlink\" title=\"合并动态库\"></a>合并动态库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改Edit scheme -&gt; Run -&gt; Build Configuration为Release</span><br><span class=\"line\">分别选择模拟器和真机执行build</span><br><span class=\"line\">然后就可以在项目目录的Products文件夹下看到编译好的.framework库,show in finder</span><br><span class=\"line\">可以看到上一级有Release-iphoneos和Release-iphonesimulator两个文件夹，对应真机和模拟器</span><br><span class=\"line\">合并两个文件夹下的IJKMediaFramework.framework/IJKMediaFramework 为一个</span><br><span class=\"line\">lipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径</span><br><span class=\"line\">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework</span><br><span class=\"line\"></span><br><span class=\"line\">执行后的IJKMediaFramework替换到原来的两个文件夹中即可</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖入项目\"><a href=\"#拖入项目\" class=\"headerlink\" title=\"拖入项目\"></a>拖入项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将Release-iphoneos/IJKMediaFramework.framework文件拖入自己项目的Framework文件夹，至此ijkplayer的编译以及导入全部完成</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>ijk安卓和iOS的编译过程大同小异,只要搞清楚配置文件的规则都是一样的，本文以iOS为例</p>\n</blockquote>\n<h2 id=\"拉代码\"><a href=\"#拉代码\" class=\"headerlink\" title=\"拉代码\"></a>拉代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-ios</span><br><span class=\"line\"># 进入代码所在文件夹</span><br><span class=\"line\">cd ijkplayer-ios</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><h3 id=\"关键文件说明：\"><a href=\"#关键文件说明：\" class=\"headerlink\" title=\"关键文件说明：\"></a>关键文件说明：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化ios源码的脚本</span><br><span class=\"line\">ijkplayer-ios/init-ios.sh</span><br><span class=\"line\"># 初始化ios HTTPS支持的脚本</span><br><span class=\"line\">ijkplayer-ios/init-ios-openssl.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 对应着ijkplayer在ios平台的源码</span><br><span class=\"line\">ijkplayer-ios/ios</span><br><span class=\"line\">./compile-ffmpeg.sh 编译ffmpeg脚本</span><br><span class=\"line\">./compile-openssl.sh 编译https支持脚本</span><br><span class=\"line\"># 执行以上脚本编译完成后的产物</span><br><span class=\"line\">ijkplayer-ios/ios/build</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 配置解码器配置文件所在的文件夹 </span><br><span class=\"line\">ijkplayer-ios/config</span><br><span class=\"line\">./module-default.sh 更多的编解码器/格式</span><br><span class=\"line\">./module-lite-hevc.sh 较少的编解码器/格式(包括hevc)</span><br><span class=\"line\">./module-lite.sh 较少的编解码器/格式(默认情况)</span><br><span class=\"line\">./module.sh 软连接以上三个其中一个 软连接方法 ln -s module-lite.sh module.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑配置说明：\"><a href=\"#编辑配置说明：\" class=\"headerlink\" title=\"编辑配置说明：\"></a>编辑配置说明：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改框架支持的arm指令集架构</span><br><span class=\"line\">ijkplayer-ios/init-ios.sh 中找到FF_ALL_ARCHS_IOS8_SDK字段,保留自己想要的架构</span><br><span class=\"line\">jkplayer-ios/init-ios-openssl.sh 同上</span><br><span class=\"line\">ijkplayer-ios/ios/compile-ffmpeg.sh 同上</span><br><span class=\"line\">ijkplayer-ios/ios/compile-openssl.sh 同上</span><br><span class=\"line\"></span><br><span class=\"line\"># arm指令集说明</span><br><span class=\"line\">模拟器32位处理器测试需要i386架构，（iphone5,iphone5s以下的模拟器）</span><br><span class=\"line\">模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)</span><br><span class=\"line\">真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7,      ipnone5,iphone5s真机/armv7s）</span><br><span class=\"line\">真机64位处理器需要arm64架构。(iphone6,iphone6p以上的真机)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><h3 id=\"初始化源码\"><a href=\"#初始化源码\" class=\"headerlink\" title=\"初始化源码\"></a>初始化源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑配置</span><br><span class=\"line\">修改ijkplayer-ios/init-ios.sh支持的架构,修改方式看编辑配置一节</span><br><span class=\"line\">执行ijkplayer-ios/init-ios.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTPS支持\"><a href=\"#HTTPS支持\" class=\"headerlink\" title=\"HTTPS支持\"></a>HTTPS支持</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如需支持HTTPS播放,需要执行ijkplayer-ios/init-ios-openssl.sh脚本初始化openssl源码</span><br><span class=\"line\"># 编辑配置</span><br><span class=\"line\">修改jkplayer-ios/init-ios-openssl.sh支持的架构,修改方式看编辑配置说明一节</span><br><span class=\"line\">   </span><br><span class=\"line\"># 在解码器配置文件中添加一行配置</span><br><span class=\"line\">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-openssl&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行ijkplayer-ios/init-ios-openssl.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ios</span><br><span class=\"line\"># 编辑配置 修改支持的架构,修改方式看编辑配置说明一节</span><br><span class=\"line\">./compile-ffmpeg.sh </span><br><span class=\"line\">./compile-openssl.sh</span><br><span class=\"line\"></span><br><span class=\"line\">编译openssl, 如果不需要https可以跳过这一步</span><br><span class=\"line\"># 清理上次编译的产物</span><br><span class=\"line\">./compile-openssl.sh clean</span><br><span class=\"line\"># 编译openssl</span><br><span class=\"line\">./compile-openssl.sh all</span><br><span class=\"line\"></span><br><span class=\"line\">编译ffmpeg</span><br><span class=\"line\"># 清理上次编译的产物</span><br><span class=\"line\">./compile-ffmpeg.sh clean</span><br><span class=\"line\"># 编译ffmpeg</span><br><span class=\"line\">./compile-ffmpeg.sh all </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加支持库\"><a href=\"#添加支持库\" class=\"headerlink\" title=\"添加支持库\"></a>添加支持库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果执行了openssl编译,需要手动添加openssl的支持库</span><br><span class=\"line\">打开ijkplayer-ios/ios/IJKMediaPlayer/IJKMediaPlayer.xcodeproj</span><br><span class=\"line\">target-&gt;IJKMediaFramework-&gt;General-&gt;Frameworks and Libraries-&gt;添加-&gt;Add Other...</span><br><span class=\"line\">找到ijkplayer-ios/ios/build/universal/lib下的libcrypto.a 和libssl.a添加</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并动态库\"><a href=\"#合并动态库\" class=\"headerlink\" title=\"合并动态库\"></a>合并动态库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改Edit scheme -&gt; Run -&gt; Build Configuration为Release</span><br><span class=\"line\">分别选择模拟器和真机执行build</span><br><span class=\"line\">然后就可以在项目目录的Products文件夹下看到编译好的.framework库,show in finder</span><br><span class=\"line\">可以看到上一级有Release-iphoneos和Release-iphonesimulator两个文件夹，对应真机和模拟器</span><br><span class=\"line\">合并两个文件夹下的IJKMediaFramework.framework/IJKMediaFramework 为一个</span><br><span class=\"line\">lipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径</span><br><span class=\"line\">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework</span><br><span class=\"line\"></span><br><span class=\"line\">执行后的IJKMediaFramework替换到原来的两个文件夹中即可</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖入项目\"><a href=\"#拖入项目\" class=\"headerlink\" title=\"拖入项目\"></a>拖入项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将Release-iphoneos/IJKMediaFramework.framework文件拖入自己项目的Framework文件夹，至此ijkplayer的编译以及导入全部完成</span><br></pre></td></tr></table></figure>"},{"title":"ubantu一键换内核并安装锐速脚本(收藏)","date":"2017-10-19T09:04:40.000Z","_content":"{% note danger %}\n* 没有任何多余的判断，非ubuntu16.04和ubuntu14.04请勿运行\n* 安装完会自动重启 正常现象 重启后就安装好了锐速，可以使用ps aux | grep appex来检测是否运行\n* 如果锐速没有自动安装可以使用/appex/appexinstall.sh来安装\n{% endnote %}\n\n\n#### 说明\n查看ubantu系统内核,非ubuntu16.04和ubuntu14.04请勿继续运行\n```\n$ dpkg --list | grep linux-image\n```\n请将[脚本内容](#脚本内容)中的代码复制,保存为ruisu.sh 存放到ubuntu中,然后执行下面的命令\n<!-- more --> \n#### 执行脚本\n```\n$ bash ruisu.sh\n```\n<span id = \"脚本内容\"></span>\n#### 脚本内容\n```\n#!/bin/bash\n\n# Ubuntu/14.04/3.16.0-43-generic/x64\n# Ubuntu/16.04/4.4.0-47-generic/x64\n\n[ -n \"`cat /etc/issue | grep \"Ubuntu 16.04\"`\" ] && echo \"Ubuntu 16.04\" && KER_VER=\"4.4.0-47-generic\"\n[ -n \"`cat /etc/issue | grep \"Ubuntu 14.04\"`\" ] && echo \"Ubuntu 14.04\" && KER_VER=\"3.16.0-43-generic\"\n\ncp /etc/default/grub /etc/default/grub.old\nsed -ir \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\\"Advanced options for Ubuntu>Ubuntu, with Linux $KER_VER\\\"/g\" /etc/default/grub\n# update-grub\napt-get update\napt-get install -y linux-image-extra-$KER_VER\n# reboot\n\nmkdir -p /appex\ncat > /appex/appexinstall.sh << TEMPEOF\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'install' << EOF\n\nEOF\ncp /etc/rc.local.old.ruisu /etc/rc.local\nrm /etc/rc.local.old.ruisu\nTEMPEOF\n\n# bash /appex/appexinstall.sh\n# ps aux | grep appex\n\n\nif [ ! -f \"/etc/rc.local.old.ruisu\" ]; then\necho \"first time run this script, backup the rc.local\"\ncp /etc/rc.local /etc/rc.local.old.ruisu\nfi\n# cp /etc/rc.local /etc/rc.local.old.ruisu\nsed -i '$d' /etc/rc.local\necho \"bash /appex/appexinstall.sh\" >> /etc/rc.local\necho \"exit 0\" >> /etc/rc.local\nreboot\n\n```\n\n","source":"_posts/ubantu一键换内核并安装锐速脚本.md","raw":"---\ntitle: ubantu一键换内核并安装锐速脚本(收藏)\ndate: 2017-10-19 17:04:40\ntags: ss,vps\n---\n{% note danger %}\n* 没有任何多余的判断，非ubuntu16.04和ubuntu14.04请勿运行\n* 安装完会自动重启 正常现象 重启后就安装好了锐速，可以使用ps aux | grep appex来检测是否运行\n* 如果锐速没有自动安装可以使用/appex/appexinstall.sh来安装\n{% endnote %}\n\n\n#### 说明\n查看ubantu系统内核,非ubuntu16.04和ubuntu14.04请勿继续运行\n```\n$ dpkg --list | grep linux-image\n```\n请将[脚本内容](#脚本内容)中的代码复制,保存为ruisu.sh 存放到ubuntu中,然后执行下面的命令\n<!-- more --> \n#### 执行脚本\n```\n$ bash ruisu.sh\n```\n<span id = \"脚本内容\"></span>\n#### 脚本内容\n```\n#!/bin/bash\n\n# Ubuntu/14.04/3.16.0-43-generic/x64\n# Ubuntu/16.04/4.4.0-47-generic/x64\n\n[ -n \"`cat /etc/issue | grep \"Ubuntu 16.04\"`\" ] && echo \"Ubuntu 16.04\" && KER_VER=\"4.4.0-47-generic\"\n[ -n \"`cat /etc/issue | grep \"Ubuntu 14.04\"`\" ] && echo \"Ubuntu 14.04\" && KER_VER=\"3.16.0-43-generic\"\n\ncp /etc/default/grub /etc/default/grub.old\nsed -ir \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\\"Advanced options for Ubuntu>Ubuntu, with Linux $KER_VER\\\"/g\" /etc/default/grub\n# update-grub\napt-get update\napt-get install -y linux-image-extra-$KER_VER\n# reboot\n\nmkdir -p /appex\ncat > /appex/appexinstall.sh << TEMPEOF\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'install' << EOF\n\nEOF\ncp /etc/rc.local.old.ruisu /etc/rc.local\nrm /etc/rc.local.old.ruisu\nTEMPEOF\n\n# bash /appex/appexinstall.sh\n# ps aux | grep appex\n\n\nif [ ! -f \"/etc/rc.local.old.ruisu\" ]; then\necho \"first time run this script, backup the rc.local\"\ncp /etc/rc.local /etc/rc.local.old.ruisu\nfi\n# cp /etc/rc.local /etc/rc.local.old.ruisu\nsed -i '$d' /etc/rc.local\necho \"bash /appex/appexinstall.sh\" >> /etc/rc.local\necho \"exit 0\" >> /etc/rc.local\nreboot\n\n```\n\n","slug":"ubantu一键换内核并安装锐速脚本","published":1,"updated":"2021-07-12T07:18:44.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg60005tdm29ffz82qv","content":"<div class=\"note danger\">\n            <ul><li>没有任何多余的判断，非ubuntu16.04和ubuntu14.04请勿运行</li><li>安装完会自动重启 正常现象 重启后就安装好了锐速，可以使用ps aux | grep appex来检测是否运行</li><li>如果锐速没有自动安装可以使用/appex/appexinstall.sh来安装</li></ul>\n          </div>\n\n\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>查看ubantu系统内核,非ubuntu16.04和ubuntu14.04请勿继续运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg --list | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>请将<a href=\"#%E8%84%9A%E6%9C%AC%E5%86%85%E5%AE%B9\">脚本内容</a>中的代码复制,保存为ruisu.sh 存放到ubuntu中,然后执行下面的命令</p>\n<span id=\"more\"></span> \n<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash ruisu.sh</span><br></pre></td></tr></table></figure>\n<p><span id = \"脚本内容\"></span></p>\n<h4 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># Ubuntu/14.04/3.16.0-43-generic/x64</span><br><span class=\"line\"># Ubuntu/16.04/4.4.0-47-generic/x64</span><br><span class=\"line\"></span><br><span class=\"line\">[ -n &quot;`cat /etc/issue | grep &quot;Ubuntu 16.04&quot;`&quot; ] &amp;&amp; echo &quot;Ubuntu 16.04&quot; &amp;&amp; KER_VER=&quot;4.4.0-47-generic&quot;</span><br><span class=\"line\">[ -n &quot;`cat /etc/issue | grep &quot;Ubuntu 14.04&quot;`&quot; ] &amp;&amp; echo &quot;Ubuntu 14.04&quot; &amp;&amp; KER_VER=&quot;3.16.0-43-generic&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/default/grub /etc/default/grub.old</span><br><span class=\"line\">sed -ir &quot;s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux $KER_VER\\&quot;/g&quot; /etc/default/grub</span><br><span class=\"line\"># update-grub</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y linux-image-extra-$KER_VER</span><br><span class=\"line\"># reboot</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /appex</span><br><span class=\"line\">cat &gt; /appex/appexinstall.sh &lt;&lt; TEMPEOF</span><br><span class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &#x27;install&#x27; &lt;&lt; EOF</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\">cp /etc/rc.local.old.ruisu /etc/rc.local</span><br><span class=\"line\">rm /etc/rc.local.old.ruisu</span><br><span class=\"line\">TEMPEOF</span><br><span class=\"line\"></span><br><span class=\"line\"># bash /appex/appexinstall.sh</span><br><span class=\"line\"># ps aux | grep appex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f &quot;/etc/rc.local.old.ruisu&quot; ]; then</span><br><span class=\"line\">echo &quot;first time run this script, backup the rc.local&quot;</span><br><span class=\"line\">cp /etc/rc.local /etc/rc.local.old.ruisu</span><br><span class=\"line\">fi</span><br><span class=\"line\"># cp /etc/rc.local /etc/rc.local.old.ruisu</span><br><span class=\"line\">sed -i &#x27;$d&#x27; /etc/rc.local</span><br><span class=\"line\">echo &quot;bash /appex/appexinstall.sh&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">echo &quot;exit 0&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div class=\"note danger\">\n            <ul><li>没有任何多余的判断，非ubuntu16.04和ubuntu14.04请勿运行</li><li>安装完会自动重启 正常现象 重启后就安装好了锐速，可以使用ps aux | grep appex来检测是否运行</li><li>如果锐速没有自动安装可以使用/appex/appexinstall.sh来安装</li></ul>\n          </div>\n\n\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>查看ubantu系统内核,非ubuntu16.04和ubuntu14.04请勿继续运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg --list | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>请将<a href=\"#%E8%84%9A%E6%9C%AC%E5%86%85%E5%AE%B9\">脚本内容</a>中的代码复制,保存为ruisu.sh 存放到ubuntu中,然后执行下面的命令</p>","more":"<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash ruisu.sh</span><br></pre></td></tr></table></figure>\n<p><span id = \"脚本内容\"></span></p>\n<h4 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># Ubuntu/14.04/3.16.0-43-generic/x64</span><br><span class=\"line\"># Ubuntu/16.04/4.4.0-47-generic/x64</span><br><span class=\"line\"></span><br><span class=\"line\">[ -n &quot;`cat /etc/issue | grep &quot;Ubuntu 16.04&quot;`&quot; ] &amp;&amp; echo &quot;Ubuntu 16.04&quot; &amp;&amp; KER_VER=&quot;4.4.0-47-generic&quot;</span><br><span class=\"line\">[ -n &quot;`cat /etc/issue | grep &quot;Ubuntu 14.04&quot;`&quot; ] &amp;&amp; echo &quot;Ubuntu 14.04&quot; &amp;&amp; KER_VER=&quot;3.16.0-43-generic&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/default/grub /etc/default/grub.old</span><br><span class=\"line\">sed -ir &quot;s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux $KER_VER\\&quot;/g&quot; /etc/default/grub</span><br><span class=\"line\"># update-grub</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y linux-image-extra-$KER_VER</span><br><span class=\"line\"># reboot</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /appex</span><br><span class=\"line\">cat &gt; /appex/appexinstall.sh &lt;&lt; TEMPEOF</span><br><span class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &#x27;install&#x27; &lt;&lt; EOF</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\">cp /etc/rc.local.old.ruisu /etc/rc.local</span><br><span class=\"line\">rm /etc/rc.local.old.ruisu</span><br><span class=\"line\">TEMPEOF</span><br><span class=\"line\"></span><br><span class=\"line\"># bash /appex/appexinstall.sh</span><br><span class=\"line\"># ps aux | grep appex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f &quot;/etc/rc.local.old.ruisu&quot; ]; then</span><br><span class=\"line\">echo &quot;first time run this script, backup the rc.local&quot;</span><br><span class=\"line\">cp /etc/rc.local /etc/rc.local.old.ruisu</span><br><span class=\"line\">fi</span><br><span class=\"line\"># cp /etc/rc.local /etc/rc.local.old.ruisu</span><br><span class=\"line\">sed -i &#x27;$d&#x27; /etc/rc.local</span><br><span class=\"line\">echo &quot;bash /appex/appexinstall.sh&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">echo &quot;exit 0&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"中小型移动端工程结构总结","date":"2017-01-05T05:01:37.000Z","_content":"{% note info %}\n工作几年,对iOS开发工程目录结构的一些总结,个人认为面对中小型项目这样的目录分层是合理的.\n<!-- more --> \n###### 优点\n这样划分,项目不会乱,配合代码规范可以提高项目可维护性,开发分工明确,可以应对常见的MVC,MVCS,MVP,MVVM等架构.\n###### 缺点\n划分的太细,有些类不太好分类,多人开发时需要提前订好规则,到底什么东西划分为哪类\n{% endnote %}\n\n##### 目录结构\n```\n|- Main\n    |- AppDelegate(程序入口)\n        |-AppDelegateService\n|-Classes(编码)\n    |-Module(模块)\n        |- Me(我的)\n        |- Home(首页)\n            |-View\n            |-Model\n            |-Controller\n            |-Api\n            |-Other\n        |-public(公用)\n    |-Expand(功能扩展)\n        |-3rdLib(三方库)\n        |-Tools(工具)\n        |-NetWork(网络工具)\n        |-DataBase(数据相关)\n        |-Macro(宏)\n        |-Manage(管理工具)\n|-Resources(资源)\n    |-图片资源\n    |-声音资源\n    |-文件资源\n\n```\n##### 网络层封装思路\n###### NetWorkTool\nPostEngine(请求引擎类)---------对请求的发送和响应结果进行处理\nResponse(响应类)-----------------封装了Http请求返回的数据结构\nAPI(接口类)--------------------------定义了接口方法\nAPIImpl(接口实现类)--------------实现接口方法。\n###### 设计思路\n低耦合，高内聚。API类为PostEngine的Category分类，所有网络请求最终通过PostEngine发送请求。Response规范化网络返回数据结构，预处理一些可能存在的数据问题。一个接口对应一个API分类，业务中用到哪个接口调用哪个API分类，无需引入时带来过多与自己无关的其他接口。\n","source":"_posts/中小型移动端工程结构总结.md","raw":"---\ntitle: 中小型移动端工程结构总结\ndate: 2017-1-5 13:01:37\ntags: iOS\n---\n{% note info %}\n工作几年,对iOS开发工程目录结构的一些总结,个人认为面对中小型项目这样的目录分层是合理的.\n<!-- more --> \n###### 优点\n这样划分,项目不会乱,配合代码规范可以提高项目可维护性,开发分工明确,可以应对常见的MVC,MVCS,MVP,MVVM等架构.\n###### 缺点\n划分的太细,有些类不太好分类,多人开发时需要提前订好规则,到底什么东西划分为哪类\n{% endnote %}\n\n##### 目录结构\n```\n|- Main\n    |- AppDelegate(程序入口)\n        |-AppDelegateService\n|-Classes(编码)\n    |-Module(模块)\n        |- Me(我的)\n        |- Home(首页)\n            |-View\n            |-Model\n            |-Controller\n            |-Api\n            |-Other\n        |-public(公用)\n    |-Expand(功能扩展)\n        |-3rdLib(三方库)\n        |-Tools(工具)\n        |-NetWork(网络工具)\n        |-DataBase(数据相关)\n        |-Macro(宏)\n        |-Manage(管理工具)\n|-Resources(资源)\n    |-图片资源\n    |-声音资源\n    |-文件资源\n\n```\n##### 网络层封装思路\n###### NetWorkTool\nPostEngine(请求引擎类)---------对请求的发送和响应结果进行处理\nResponse(响应类)-----------------封装了Http请求返回的数据结构\nAPI(接口类)--------------------------定义了接口方法\nAPIImpl(接口实现类)--------------实现接口方法。\n###### 设计思路\n低耦合，高内聚。API类为PostEngine的Category分类，所有网络请求最终通过PostEngine发送请求。Response规范化网络返回数据结构，预处理一些可能存在的数据问题。一个接口对应一个API分类，业务中用到哪个接口调用哪个API分类，无需引入时带来过多与自己无关的其他接口。\n","slug":"中小型移动端工程结构总结","published":1,"updated":"2021-07-12T07:17:50.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg70008tdm2hn294kbt","content":"<div class=\"note info\">\n            <p>工作几年,对iOS开发工程目录结构的一些总结,个人认为面对中小型项目这样的目录分层是合理的.</p><span id=\"more\"></span> <h6 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h6><p>这样划分,项目不会乱,配合代码规范可以提高项目可维护性,开发分工明确,可以应对常见的MVC,MVCS,MVP,MVVM等架构.</p><h6 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h6><p>划分的太细,有些类不太好分类,多人开发时需要提前订好规则,到底什么东西划分为哪类</p>\n          </div>\n\n<h5 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- Main</span><br><span class=\"line\">    |- AppDelegate(程序入口)</span><br><span class=\"line\">        |-AppDelegateService</span><br><span class=\"line\">|-Classes(编码)</span><br><span class=\"line\">    |-Module(模块)</span><br><span class=\"line\">        |- Me(我的)</span><br><span class=\"line\">        |- Home(首页)</span><br><span class=\"line\">            |-View</span><br><span class=\"line\">            |-Model</span><br><span class=\"line\">            |-Controller</span><br><span class=\"line\">            |-Api</span><br><span class=\"line\">            |-Other</span><br><span class=\"line\">        |-public(公用)</span><br><span class=\"line\">    |-Expand(功能扩展)</span><br><span class=\"line\">        |-3rdLib(三方库)</span><br><span class=\"line\">        |-Tools(工具)</span><br><span class=\"line\">        |-NetWork(网络工具)</span><br><span class=\"line\">        |-DataBase(数据相关)</span><br><span class=\"line\">        |-Macro(宏)</span><br><span class=\"line\">        |-Manage(管理工具)</span><br><span class=\"line\">|-Resources(资源)</span><br><span class=\"line\">    |-图片资源</span><br><span class=\"line\">    |-声音资源</span><br><span class=\"line\">    |-文件资源</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"网络层封装思路\"><a href=\"#网络层封装思路\" class=\"headerlink\" title=\"网络层封装思路\"></a>网络层封装思路</h5><h6 id=\"NetWorkTool\"><a href=\"#NetWorkTool\" class=\"headerlink\" title=\"NetWorkTool\"></a>NetWorkTool</h6><p>PostEngine(请求引擎类)———对请求的发送和响应结果进行处理<br>Response(响应类)—————–封装了Http请求返回的数据结构<br>API(接口类)————————–定义了接口方法<br>APIImpl(接口实现类)————–实现接口方法。</p>\n<h6 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h6><p>低耦合，高内聚。API类为PostEngine的Category分类，所有网络请求最终通过PostEngine发送请求。Response规范化网络返回数据结构，预处理一些可能存在的数据问题。一个接口对应一个API分类，业务中用到哪个接口调用哪个API分类，无需引入时带来过多与自己无关的其他接口。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\">\n            <p>工作几年,对iOS开发工程目录结构的一些总结,个人认为面对中小型项目这样的目录分层是合理的.</p>","more":"<h6 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h6><p>这样划分,项目不会乱,配合代码规范可以提高项目可维护性,开发分工明确,可以应对常见的MVC,MVCS,MVP,MVVM等架构.</p><h6 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h6><p>划分的太细,有些类不太好分类,多人开发时需要提前订好规则,到底什么东西划分为哪类</p>\n          </div>\n\n<h5 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- Main</span><br><span class=\"line\">    |- AppDelegate(程序入口)</span><br><span class=\"line\">        |-AppDelegateService</span><br><span class=\"line\">|-Classes(编码)</span><br><span class=\"line\">    |-Module(模块)</span><br><span class=\"line\">        |- Me(我的)</span><br><span class=\"line\">        |- Home(首页)</span><br><span class=\"line\">            |-View</span><br><span class=\"line\">            |-Model</span><br><span class=\"line\">            |-Controller</span><br><span class=\"line\">            |-Api</span><br><span class=\"line\">            |-Other</span><br><span class=\"line\">        |-public(公用)</span><br><span class=\"line\">    |-Expand(功能扩展)</span><br><span class=\"line\">        |-3rdLib(三方库)</span><br><span class=\"line\">        |-Tools(工具)</span><br><span class=\"line\">        |-NetWork(网络工具)</span><br><span class=\"line\">        |-DataBase(数据相关)</span><br><span class=\"line\">        |-Macro(宏)</span><br><span class=\"line\">        |-Manage(管理工具)</span><br><span class=\"line\">|-Resources(资源)</span><br><span class=\"line\">    |-图片资源</span><br><span class=\"line\">    |-声音资源</span><br><span class=\"line\">    |-文件资源</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"网络层封装思路\"><a href=\"#网络层封装思路\" class=\"headerlink\" title=\"网络层封装思路\"></a>网络层封装思路</h5><h6 id=\"NetWorkTool\"><a href=\"#NetWorkTool\" class=\"headerlink\" title=\"NetWorkTool\"></a>NetWorkTool</h6><p>PostEngine(请求引擎类)———对请求的发送和响应结果进行处理<br>Response(响应类)—————–封装了Http请求返回的数据结构<br>API(接口类)————————–定义了接口方法<br>APIImpl(接口实现类)————–实现接口方法。</p>\n<h6 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h6><p>低耦合，高内聚。API类为PostEngine的Category分类，所有网络请求最终通过PostEngine发送请求。Response规范化网络返回数据结构，预处理一些可能存在的数据问题。一个接口对应一个API分类，业务中用到哪个接口调用哪个API分类，无需引入时带来过多与自己无关的其他接口。</p>"},{"title":"使用Geth搭建eth钱包节点服务器(一次在ETH主网被攻击后的实验)","date":"2021-04-21T11:24:55.000Z","_content":"## 因\n因为工作需要,我最近在ETH主网上发了ERC20的合约，上了uniswap去中心化交易所，但是在上币后发现有黑客在扫描uni的上币合约，用极低的价格第一时间购买新发售的币. \n\n我们当然也损失惨重，为了搞明白这其中的原理，我自己搭建了以太坊的节点用来研究黑客的攻击手法，并用nodejs + ether实现了三明治攻击。 \n<!-- more --> \n搭建节点的客户端使用的是Geth，Geth是go语言编写的以太坊官方客户端，提供了以太坊各种交互功能\n\n## 服务器配置\n```\nOS: CentOS SELinux 8 x64\nCPU: 8 vCore\nRAM: 32768 MB\nStorage: 640 GB SSD\n```\n\n## 安装Geth\n```\n# 拉代码\ngit clone https://github.com/ethereum/go-ethereum.git\ncd go-ethereum/\ngit checkout release/1.10.8\n# 编译\ncd go-ethereum/\nmake all\n```\n#### 配置环境变量\n```\nvim /etc/profile\n将 export PATH=$PATH:/opt/ethereum/go-ethereum/build/bin 添加到文件最后\n运行 source /etc/profile 更新配置\n执行 geth version 如果有结果说明配置完成\n```\n### 使用Geth：\n```\n# 第一次使用可以加上dumpconfig 将配置文件保存下来,下次启动直接使用配置文件启动,修改参数也可以直接修改配置文件\ngeth --datadir /xxx/xxx/ --syncmode \"fast\" --mine --miner.threads=4 --miner.etherbase '0x0000' --http --http.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"  --http.addr 0.0.0.0 --http.port 8545  --http.corsdomain \"*\" --http.vhosts \"*\"   --ws --ws.addr 0.0.0.0 --ws.port 8546 --ws.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"  --ws.rpcprefix \"/\"   --ws.origins \"*\" --txpool.journal \"/xxx/xxx/\"  --verbosity 3 --maxpeers 100 --maxpendpeers 100 --allow-insecure-unlock --cache=8192 dumpconfig > \"/xxx/xxx.toml\"\n\n\n# 之后再启动可以使用命令 --config 指定配置文件启动\n# nohup表示在后台运行\n# & > xxx.out 表示输出log到文件\nnohup geth --config /xxx/xxx.toml & > nohup.out\n\n```\n\n#### 参数解释\n```\n# 同步数据存放的路径\n--datadir /xxx/xxx/ \n# 同步模式 (\"fast\", \"full\", \"snap\" or \"light\") (默认: snap)  \n# full同步全部数据,并重放区块中的交易以生成状态数据 \n# fast获取全部数据但不做重放,较老的数据可能会丢失  \n# snap只同步区块头，不同步区块体，也不同步状态数据\n--syncmode \"fast\" \n# 开启挖矿模式\n--mine\n# 挖矿启用线程数\n--miner.threads=4\n# 挖矿的钱包地址(说白了挖到的ETH存到哪)\n--miner.etherbase '0x0000'\n# 开启HTTP服务\n--http\n# 开放的HTTP接口\n--http.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"\n# HTTP服务监听地址\n--http.addr 0.0.0.0 \n# HTTP服务监听端口\n--http.port 8545 \n# 接受跨域请求的地址,用逗号分隔 *表示全部\n--http.corsdomain \"*\"\n# 接受请求的地址,用逗号分隔 *表示全部\n--http.vhosts \"*\" \n# 开启WebSocket服务\n--ws \n# WebSocket服务监听地址\n--ws.addr 0.0.0.0\n# WebSocket服务监听端口\n--ws.port 8546 \n# 开放的WebSocket接口\n--ws.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\" \n# JSON-RPC服务的HTTP路径前缀。使用'/'服务于所有路径。\n--ws.rpcprefix \"/\" \n# 接受来自*所有域名的请求\n--ws.origins \"*\" \n# pendingTransactions(待交易池)数据存储路径\n--txpool.journal \"/root/etherChainData/\"\n# 日志模式 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3)\n--verbosity 3\n# 最大连接同步节点数量（这个数量和CPU占用息息相关）\n--maxpeers 100 \n# 最大的挂起尝试连接数 默认0\n--maxpendpeers 100\n# 允许不安全的账户访问Account相关的HTTP API\n--allow-insecure-unlock\n# 当你使用了fast模式同步数据时，cache是必须的 1024是1G 2048是2G 根据你的内存情况决定\n--cache=8192\n# 保存启动参数到xxx.toml配置文件\ndumpconfig > \"/xxx/xxxx.toml\"\n```\n\n### 后续思路解析\n经过以上的步骤Geth客户端已经启动起来了，你可以开始写代码用HTTP或者WebSocket的方式连接它了\n\n说说我的实验结果\n##### 初步思路\nGeth搭建起来后,只要你有uni发币合约的地址其实就可以使用web3或者ether订阅这个合约的新币发布，通过解析交易信息就能拿到新池地址然后用自己的钱包去下单，但这远远不够，因为Uni上有很多陷阱合约,只能买不能卖，我们缺乏对这个行业的理解，和对陷阱合约代码分析的能力，所以很难做到短时间就盈利 \n##### 三明治攻击\n但是我又想到新的方法，找到具备这些分析能力的钱包地址，跟踪他们的交易，对他们进行三明治攻击，也就是监听他们的pending交易，抢先在他们完成交易前，完成我们自己的交易，在他们卖出前，卖出我们的交易，这样他们的买入操作就被夹在我们的买入卖出之间，完成了一次三明治攻击 \n\n刚开始确实可行，我用nodejs写了一整套的eth链全链扫描，从中筛选被攻击者，然后调用uni合约下单买入，卖出，甚至做了简单的前端页面，可以配置受害人地址，可以设置下单金额，甚至配置止盈止损，这套代码也确实赚到钱。 \n##### 阻塞攻击\n但是很快我发现这个路数行不通了，目前的缺点有三个，一个是我的受害人同时也是合约的攻击者，他们可能是矿池主或者其他什么，他们会批量发起交易，在一个区块内用不同的账户对同一个token购买，把一个区块占满，也叫阻塞攻击，这样可以让其他人在他们同一时间下不了单抢不了他们的赢利点，同时也拦截了三明治攻击，一个是geth需要的服务器配置很高，因为他们的阻塞攻击导致我们的很多三明治攻击不能完成，盈利远远抵不了支出。还有一个问题就是以太坊链的手续费太高了，基本gas到40左右就不是我可以承受的了\n##### 结语\n大概思路就是这样，区块链的世界很有意思，从监听新交易，三明治攻击，阻塞攻击，这里面套路层出不穷，而我发现的这些还仅仅是皮毛","source":"_posts/使用Geth搭建ETH节点服务器.md","raw":"---\ntitle: 使用Geth搭建eth钱包节点服务器(一次在ETH主网被攻击后的实验)\ndate: 2021-4-21 19:24:55\ntags: blockChain\n---\n## 因\n因为工作需要,我最近在ETH主网上发了ERC20的合约，上了uniswap去中心化交易所，但是在上币后发现有黑客在扫描uni的上币合约，用极低的价格第一时间购买新发售的币. \n\n我们当然也损失惨重，为了搞明白这其中的原理，我自己搭建了以太坊的节点用来研究黑客的攻击手法，并用nodejs + ether实现了三明治攻击。 \n<!-- more --> \n搭建节点的客户端使用的是Geth，Geth是go语言编写的以太坊官方客户端，提供了以太坊各种交互功能\n\n## 服务器配置\n```\nOS: CentOS SELinux 8 x64\nCPU: 8 vCore\nRAM: 32768 MB\nStorage: 640 GB SSD\n```\n\n## 安装Geth\n```\n# 拉代码\ngit clone https://github.com/ethereum/go-ethereum.git\ncd go-ethereum/\ngit checkout release/1.10.8\n# 编译\ncd go-ethereum/\nmake all\n```\n#### 配置环境变量\n```\nvim /etc/profile\n将 export PATH=$PATH:/opt/ethereum/go-ethereum/build/bin 添加到文件最后\n运行 source /etc/profile 更新配置\n执行 geth version 如果有结果说明配置完成\n```\n### 使用Geth：\n```\n# 第一次使用可以加上dumpconfig 将配置文件保存下来,下次启动直接使用配置文件启动,修改参数也可以直接修改配置文件\ngeth --datadir /xxx/xxx/ --syncmode \"fast\" --mine --miner.threads=4 --miner.etherbase '0x0000' --http --http.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"  --http.addr 0.0.0.0 --http.port 8545  --http.corsdomain \"*\" --http.vhosts \"*\"   --ws --ws.addr 0.0.0.0 --ws.port 8546 --ws.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"  --ws.rpcprefix \"/\"   --ws.origins \"*\" --txpool.journal \"/xxx/xxx/\"  --verbosity 3 --maxpeers 100 --maxpendpeers 100 --allow-insecure-unlock --cache=8192 dumpconfig > \"/xxx/xxx.toml\"\n\n\n# 之后再启动可以使用命令 --config 指定配置文件启动\n# nohup表示在后台运行\n# & > xxx.out 表示输出log到文件\nnohup geth --config /xxx/xxx.toml & > nohup.out\n\n```\n\n#### 参数解释\n```\n# 同步数据存放的路径\n--datadir /xxx/xxx/ \n# 同步模式 (\"fast\", \"full\", \"snap\" or \"light\") (默认: snap)  \n# full同步全部数据,并重放区块中的交易以生成状态数据 \n# fast获取全部数据但不做重放,较老的数据可能会丢失  \n# snap只同步区块头，不同步区块体，也不同步状态数据\n--syncmode \"fast\" \n# 开启挖矿模式\n--mine\n# 挖矿启用线程数\n--miner.threads=4\n# 挖矿的钱包地址(说白了挖到的ETH存到哪)\n--miner.etherbase '0x0000'\n# 开启HTTP服务\n--http\n# 开放的HTTP接口\n--http.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\"\n# HTTP服务监听地址\n--http.addr 0.0.0.0 \n# HTTP服务监听端口\n--http.port 8545 \n# 接受跨域请求的地址,用逗号分隔 *表示全部\n--http.corsdomain \"*\"\n# 接受请求的地址,用逗号分隔 *表示全部\n--http.vhosts \"*\" \n# 开启WebSocket服务\n--ws \n# WebSocket服务监听地址\n--ws.addr 0.0.0.0\n# WebSocket服务监听端口\n--ws.port 8546 \n# 开放的WebSocket接口\n--ws.api=\"admin,debug,web3,eth,txpool,personal,ethash,net\" \n# JSON-RPC服务的HTTP路径前缀。使用'/'服务于所有路径。\n--ws.rpcprefix \"/\" \n# 接受来自*所有域名的请求\n--ws.origins \"*\" \n# pendingTransactions(待交易池)数据存储路径\n--txpool.journal \"/root/etherChainData/\"\n# 日志模式 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3)\n--verbosity 3\n# 最大连接同步节点数量（这个数量和CPU占用息息相关）\n--maxpeers 100 \n# 最大的挂起尝试连接数 默认0\n--maxpendpeers 100\n# 允许不安全的账户访问Account相关的HTTP API\n--allow-insecure-unlock\n# 当你使用了fast模式同步数据时，cache是必须的 1024是1G 2048是2G 根据你的内存情况决定\n--cache=8192\n# 保存启动参数到xxx.toml配置文件\ndumpconfig > \"/xxx/xxxx.toml\"\n```\n\n### 后续思路解析\n经过以上的步骤Geth客户端已经启动起来了，你可以开始写代码用HTTP或者WebSocket的方式连接它了\n\n说说我的实验结果\n##### 初步思路\nGeth搭建起来后,只要你有uni发币合约的地址其实就可以使用web3或者ether订阅这个合约的新币发布，通过解析交易信息就能拿到新池地址然后用自己的钱包去下单，但这远远不够，因为Uni上有很多陷阱合约,只能买不能卖，我们缺乏对这个行业的理解，和对陷阱合约代码分析的能力，所以很难做到短时间就盈利 \n##### 三明治攻击\n但是我又想到新的方法，找到具备这些分析能力的钱包地址，跟踪他们的交易，对他们进行三明治攻击，也就是监听他们的pending交易，抢先在他们完成交易前，完成我们自己的交易，在他们卖出前，卖出我们的交易，这样他们的买入操作就被夹在我们的买入卖出之间，完成了一次三明治攻击 \n\n刚开始确实可行，我用nodejs写了一整套的eth链全链扫描，从中筛选被攻击者，然后调用uni合约下单买入，卖出，甚至做了简单的前端页面，可以配置受害人地址，可以设置下单金额，甚至配置止盈止损，这套代码也确实赚到钱。 \n##### 阻塞攻击\n但是很快我发现这个路数行不通了，目前的缺点有三个，一个是我的受害人同时也是合约的攻击者，他们可能是矿池主或者其他什么，他们会批量发起交易，在一个区块内用不同的账户对同一个token购买，把一个区块占满，也叫阻塞攻击，这样可以让其他人在他们同一时间下不了单抢不了他们的赢利点，同时也拦截了三明治攻击，一个是geth需要的服务器配置很高，因为他们的阻塞攻击导致我们的很多三明治攻击不能完成，盈利远远抵不了支出。还有一个问题就是以太坊链的手续费太高了，基本gas到40左右就不是我可以承受的了\n##### 结语\n大概思路就是这样，区块链的世界很有意思，从监听新交易，三明治攻击，阻塞攻击，这里面套路层出不穷，而我发现的这些还仅仅是皮毛","slug":"使用Geth搭建ETH节点服务器","published":1,"updated":"2021-09-01T05:46:51.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg80009tdm29t0j186o","content":"<h2 id=\"因\"><a href=\"#因\" class=\"headerlink\" title=\"因\"></a>因</h2><p>因为工作需要,我最近在ETH主网上发了ERC20的合约，上了uniswap去中心化交易所，但是在上币后发现有黑客在扫描uni的上币合约，用极低的价格第一时间购买新发售的币. </p>\n<p>我们当然也损失惨重，为了搞明白这其中的原理，我自己搭建了以太坊的节点用来研究黑客的攻击手法，并用nodejs + ether实现了三明治攻击。 </p>\n<span id=\"more\"></span> \n<p>搭建节点的客户端使用的是Geth，Geth是go语言编写的以太坊官方客户端，提供了以太坊各种交互功能</p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OS: CentOS SELinux 8 x64</span><br><span class=\"line\">CPU: 8 vCore</span><br><span class=\"line\">RAM: 32768 MB</span><br><span class=\"line\">Storage: 640 GB SSD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Geth\"><a href=\"#安装Geth\" class=\"headerlink\" title=\"安装Geth\"></a>安装Geth</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拉代码</span><br><span class=\"line\">git clone https://github.com/ethereum/go-ethereum.git</span><br><span class=\"line\">cd go-ethereum/</span><br><span class=\"line\">git checkout release/1.10.8</span><br><span class=\"line\"># 编译</span><br><span class=\"line\">cd go-ethereum/</span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">将 export PATH=$PATH:/opt/ethereum/go-ethereum/build/bin 添加到文件最后</span><br><span class=\"line\">运行 source /etc/profile 更新配置</span><br><span class=\"line\">执行 geth version 如果有结果说明配置完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Geth：\"><a href=\"#使用Geth：\" class=\"headerlink\" title=\"使用Geth：\"></a>使用Geth：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次使用可以加上dumpconfig 将配置文件保存下来,下次启动直接使用配置文件启动,修改参数也可以直接修改配置文件</span><br><span class=\"line\">geth --datadir /xxx/xxx/ --syncmode &quot;fast&quot; --mine --miner.threads=4 --miner.etherbase &#x27;0x0000&#x27; --http --http.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;  --http.addr 0.0.0.0 --http.port 8545  --http.corsdomain &quot;*&quot; --http.vhosts &quot;*&quot;   --ws --ws.addr 0.0.0.0 --ws.port 8546 --ws.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;  --ws.rpcprefix &quot;/&quot;   --ws.origins &quot;*&quot; --txpool.journal &quot;/xxx/xxx/&quot;  --verbosity 3 --maxpeers 100 --maxpendpeers 100 --allow-insecure-unlock --cache=8192 dumpconfig &gt; &quot;/xxx/xxx.toml&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 之后再启动可以使用命令 --config 指定配置文件启动</span><br><span class=\"line\"># nohup表示在后台运行</span><br><span class=\"line\"># &amp; &gt; xxx.out 表示输出log到文件</span><br><span class=\"line\">nohup geth --config /xxx/xxx.toml &amp; &gt; nohup.out</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 同步数据存放的路径</span><br><span class=\"line\">--datadir /xxx/xxx/ </span><br><span class=\"line\"># 同步模式 (&quot;fast&quot;, &quot;full&quot;, &quot;snap&quot; or &quot;light&quot;) (默认: snap)  </span><br><span class=\"line\"># full同步全部数据,并重放区块中的交易以生成状态数据 </span><br><span class=\"line\"># fast获取全部数据但不做重放,较老的数据可能会丢失  </span><br><span class=\"line\"># snap只同步区块头，不同步区块体，也不同步状态数据</span><br><span class=\"line\">--syncmode &quot;fast&quot; </span><br><span class=\"line\"># 开启挖矿模式</span><br><span class=\"line\">--mine</span><br><span class=\"line\"># 挖矿启用线程数</span><br><span class=\"line\">--miner.threads=4</span><br><span class=\"line\"># 挖矿的钱包地址(说白了挖到的ETH存到哪)</span><br><span class=\"line\">--miner.etherbase &#x27;0x0000&#x27;</span><br><span class=\"line\"># 开启HTTP服务</span><br><span class=\"line\">--http</span><br><span class=\"line\"># 开放的HTTP接口</span><br><span class=\"line\">--http.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;</span><br><span class=\"line\"># HTTP服务监听地址</span><br><span class=\"line\">--http.addr 0.0.0.0 </span><br><span class=\"line\"># HTTP服务监听端口</span><br><span class=\"line\">--http.port 8545 </span><br><span class=\"line\"># 接受跨域请求的地址,用逗号分隔 *表示全部</span><br><span class=\"line\">--http.corsdomain &quot;*&quot;</span><br><span class=\"line\"># 接受请求的地址,用逗号分隔 *表示全部</span><br><span class=\"line\">--http.vhosts &quot;*&quot; </span><br><span class=\"line\"># 开启WebSocket服务</span><br><span class=\"line\">--ws </span><br><span class=\"line\"># WebSocket服务监听地址</span><br><span class=\"line\">--ws.addr 0.0.0.0</span><br><span class=\"line\"># WebSocket服务监听端口</span><br><span class=\"line\">--ws.port 8546 </span><br><span class=\"line\"># 开放的WebSocket接口</span><br><span class=\"line\">--ws.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot; </span><br><span class=\"line\"># JSON-RPC服务的HTTP路径前缀。使用&#x27;/&#x27;服务于所有路径。</span><br><span class=\"line\">--ws.rpcprefix &quot;/&quot; </span><br><span class=\"line\"># 接受来自*所有域名的请求</span><br><span class=\"line\">--ws.origins &quot;*&quot; </span><br><span class=\"line\"># pendingTransactions(待交易池)数据存储路径</span><br><span class=\"line\">--txpool.journal &quot;/root/etherChainData/&quot;</span><br><span class=\"line\"># 日志模式 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3)</span><br><span class=\"line\">--verbosity 3</span><br><span class=\"line\"># 最大连接同步节点数量（这个数量和CPU占用息息相关）</span><br><span class=\"line\">--maxpeers 100 </span><br><span class=\"line\"># 最大的挂起尝试连接数 默认0</span><br><span class=\"line\">--maxpendpeers 100</span><br><span class=\"line\"># 允许不安全的账户访问Account相关的HTTP API</span><br><span class=\"line\">--allow-insecure-unlock</span><br><span class=\"line\"># 当你使用了fast模式同步数据时，cache是必须的 1024是1G 2048是2G 根据你的内存情况决定</span><br><span class=\"line\">--cache=8192</span><br><span class=\"line\"># 保存启动参数到xxx.toml配置文件</span><br><span class=\"line\">dumpconfig &gt; &quot;/xxx/xxxx.toml&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后续思路解析\"><a href=\"#后续思路解析\" class=\"headerlink\" title=\"后续思路解析\"></a>后续思路解析</h3><p>经过以上的步骤Geth客户端已经启动起来了，你可以开始写代码用HTTP或者WebSocket的方式连接它了</p>\n<p>说说我的实验结果</p>\n<h5 id=\"初步思路\"><a href=\"#初步思路\" class=\"headerlink\" title=\"初步思路\"></a>初步思路</h5><p>Geth搭建起来后,只要你有uni发币合约的地址其实就可以使用web3或者ether订阅这个合约的新币发布，通过解析交易信息就能拿到新池地址然后用自己的钱包去下单，但这远远不够，因为Uni上有很多陷阱合约,只能买不能卖，我们缺乏对这个行业的理解，和对陷阱合约代码分析的能力，所以很难做到短时间就盈利 </p>\n<h5 id=\"三明治攻击\"><a href=\"#三明治攻击\" class=\"headerlink\" title=\"三明治攻击\"></a>三明治攻击</h5><p>但是我又想到新的方法，找到具备这些分析能力的钱包地址，跟踪他们的交易，对他们进行三明治攻击，也就是监听他们的pending交易，抢先在他们完成交易前，完成我们自己的交易，在他们卖出前，卖出我们的交易，这样他们的买入操作就被夹在我们的买入卖出之间，完成了一次三明治攻击 </p>\n<p>刚开始确实可行，我用nodejs写了一整套的eth链全链扫描，从中筛选被攻击者，然后调用uni合约下单买入，卖出，甚至做了简单的前端页面，可以配置受害人地址，可以设置下单金额，甚至配置止盈止损，这套代码也确实赚到钱。 </p>\n<h5 id=\"阻塞攻击\"><a href=\"#阻塞攻击\" class=\"headerlink\" title=\"阻塞攻击\"></a>阻塞攻击</h5><p>但是很快我发现这个路数行不通了，目前的缺点有三个，一个是我的受害人同时也是合约的攻击者，他们可能是矿池主或者其他什么，他们会批量发起交易，在一个区块内用不同的账户对同一个token购买，把一个区块占满，也叫阻塞攻击，这样可以让其他人在他们同一时间下不了单抢不了他们的赢利点，同时也拦截了三明治攻击，一个是geth需要的服务器配置很高，因为他们的阻塞攻击导致我们的很多三明治攻击不能完成，盈利远远抵不了支出。还有一个问题就是以太坊链的手续费太高了，基本gas到40左右就不是我可以承受的了</p>\n<h5 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h5><p>大概思路就是这样，区块链的世界很有意思，从监听新交易，三明治攻击，阻塞攻击，这里面套路层出不穷，而我发现的这些还仅仅是皮毛</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"因\"><a href=\"#因\" class=\"headerlink\" title=\"因\"></a>因</h2><p>因为工作需要,我最近在ETH主网上发了ERC20的合约，上了uniswap去中心化交易所，但是在上币后发现有黑客在扫描uni的上币合约，用极低的价格第一时间购买新发售的币. </p>\n<p>我们当然也损失惨重，为了搞明白这其中的原理，我自己搭建了以太坊的节点用来研究黑客的攻击手法，并用nodejs + ether实现了三明治攻击。 </p>","more":"<p>搭建节点的客户端使用的是Geth，Geth是go语言编写的以太坊官方客户端，提供了以太坊各种交互功能</p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OS: CentOS SELinux 8 x64</span><br><span class=\"line\">CPU: 8 vCore</span><br><span class=\"line\">RAM: 32768 MB</span><br><span class=\"line\">Storage: 640 GB SSD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Geth\"><a href=\"#安装Geth\" class=\"headerlink\" title=\"安装Geth\"></a>安装Geth</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拉代码</span><br><span class=\"line\">git clone https://github.com/ethereum/go-ethereum.git</span><br><span class=\"line\">cd go-ethereum/</span><br><span class=\"line\">git checkout release/1.10.8</span><br><span class=\"line\"># 编译</span><br><span class=\"line\">cd go-ethereum/</span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">将 export PATH=$PATH:/opt/ethereum/go-ethereum/build/bin 添加到文件最后</span><br><span class=\"line\">运行 source /etc/profile 更新配置</span><br><span class=\"line\">执行 geth version 如果有结果说明配置完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Geth：\"><a href=\"#使用Geth：\" class=\"headerlink\" title=\"使用Geth：\"></a>使用Geth：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次使用可以加上dumpconfig 将配置文件保存下来,下次启动直接使用配置文件启动,修改参数也可以直接修改配置文件</span><br><span class=\"line\">geth --datadir /xxx/xxx/ --syncmode &quot;fast&quot; --mine --miner.threads=4 --miner.etherbase &#x27;0x0000&#x27; --http --http.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;  --http.addr 0.0.0.0 --http.port 8545  --http.corsdomain &quot;*&quot; --http.vhosts &quot;*&quot;   --ws --ws.addr 0.0.0.0 --ws.port 8546 --ws.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;  --ws.rpcprefix &quot;/&quot;   --ws.origins &quot;*&quot; --txpool.journal &quot;/xxx/xxx/&quot;  --verbosity 3 --maxpeers 100 --maxpendpeers 100 --allow-insecure-unlock --cache=8192 dumpconfig &gt; &quot;/xxx/xxx.toml&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 之后再启动可以使用命令 --config 指定配置文件启动</span><br><span class=\"line\"># nohup表示在后台运行</span><br><span class=\"line\"># &amp; &gt; xxx.out 表示输出log到文件</span><br><span class=\"line\">nohup geth --config /xxx/xxx.toml &amp; &gt; nohup.out</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 同步数据存放的路径</span><br><span class=\"line\">--datadir /xxx/xxx/ </span><br><span class=\"line\"># 同步模式 (&quot;fast&quot;, &quot;full&quot;, &quot;snap&quot; or &quot;light&quot;) (默认: snap)  </span><br><span class=\"line\"># full同步全部数据,并重放区块中的交易以生成状态数据 </span><br><span class=\"line\"># fast获取全部数据但不做重放,较老的数据可能会丢失  </span><br><span class=\"line\"># snap只同步区块头，不同步区块体，也不同步状态数据</span><br><span class=\"line\">--syncmode &quot;fast&quot; </span><br><span class=\"line\"># 开启挖矿模式</span><br><span class=\"line\">--mine</span><br><span class=\"line\"># 挖矿启用线程数</span><br><span class=\"line\">--miner.threads=4</span><br><span class=\"line\"># 挖矿的钱包地址(说白了挖到的ETH存到哪)</span><br><span class=\"line\">--miner.etherbase &#x27;0x0000&#x27;</span><br><span class=\"line\"># 开启HTTP服务</span><br><span class=\"line\">--http</span><br><span class=\"line\"># 开放的HTTP接口</span><br><span class=\"line\">--http.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot;</span><br><span class=\"line\"># HTTP服务监听地址</span><br><span class=\"line\">--http.addr 0.0.0.0 </span><br><span class=\"line\"># HTTP服务监听端口</span><br><span class=\"line\">--http.port 8545 </span><br><span class=\"line\"># 接受跨域请求的地址,用逗号分隔 *表示全部</span><br><span class=\"line\">--http.corsdomain &quot;*&quot;</span><br><span class=\"line\"># 接受请求的地址,用逗号分隔 *表示全部</span><br><span class=\"line\">--http.vhosts &quot;*&quot; </span><br><span class=\"line\"># 开启WebSocket服务</span><br><span class=\"line\">--ws </span><br><span class=\"line\"># WebSocket服务监听地址</span><br><span class=\"line\">--ws.addr 0.0.0.0</span><br><span class=\"line\"># WebSocket服务监听端口</span><br><span class=\"line\">--ws.port 8546 </span><br><span class=\"line\"># 开放的WebSocket接口</span><br><span class=\"line\">--ws.api=&quot;admin,debug,web3,eth,txpool,personal,ethash,net&quot; </span><br><span class=\"line\"># JSON-RPC服务的HTTP路径前缀。使用&#x27;/&#x27;服务于所有路径。</span><br><span class=\"line\">--ws.rpcprefix &quot;/&quot; </span><br><span class=\"line\"># 接受来自*所有域名的请求</span><br><span class=\"line\">--ws.origins &quot;*&quot; </span><br><span class=\"line\"># pendingTransactions(待交易池)数据存储路径</span><br><span class=\"line\">--txpool.journal &quot;/root/etherChainData/&quot;</span><br><span class=\"line\"># 日志模式 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3)</span><br><span class=\"line\">--verbosity 3</span><br><span class=\"line\"># 最大连接同步节点数量（这个数量和CPU占用息息相关）</span><br><span class=\"line\">--maxpeers 100 </span><br><span class=\"line\"># 最大的挂起尝试连接数 默认0</span><br><span class=\"line\">--maxpendpeers 100</span><br><span class=\"line\"># 允许不安全的账户访问Account相关的HTTP API</span><br><span class=\"line\">--allow-insecure-unlock</span><br><span class=\"line\"># 当你使用了fast模式同步数据时，cache是必须的 1024是1G 2048是2G 根据你的内存情况决定</span><br><span class=\"line\">--cache=8192</span><br><span class=\"line\"># 保存启动参数到xxx.toml配置文件</span><br><span class=\"line\">dumpconfig &gt; &quot;/xxx/xxxx.toml&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后续思路解析\"><a href=\"#后续思路解析\" class=\"headerlink\" title=\"后续思路解析\"></a>后续思路解析</h3><p>经过以上的步骤Geth客户端已经启动起来了，你可以开始写代码用HTTP或者WebSocket的方式连接它了</p>\n<p>说说我的实验结果</p>\n<h5 id=\"初步思路\"><a href=\"#初步思路\" class=\"headerlink\" title=\"初步思路\"></a>初步思路</h5><p>Geth搭建起来后,只要你有uni发币合约的地址其实就可以使用web3或者ether订阅这个合约的新币发布，通过解析交易信息就能拿到新池地址然后用自己的钱包去下单，但这远远不够，因为Uni上有很多陷阱合约,只能买不能卖，我们缺乏对这个行业的理解，和对陷阱合约代码分析的能力，所以很难做到短时间就盈利 </p>\n<h5 id=\"三明治攻击\"><a href=\"#三明治攻击\" class=\"headerlink\" title=\"三明治攻击\"></a>三明治攻击</h5><p>但是我又想到新的方法，找到具备这些分析能力的钱包地址，跟踪他们的交易，对他们进行三明治攻击，也就是监听他们的pending交易，抢先在他们完成交易前，完成我们自己的交易，在他们卖出前，卖出我们的交易，这样他们的买入操作就被夹在我们的买入卖出之间，完成了一次三明治攻击 </p>\n<p>刚开始确实可行，我用nodejs写了一整套的eth链全链扫描，从中筛选被攻击者，然后调用uni合约下单买入，卖出，甚至做了简单的前端页面，可以配置受害人地址，可以设置下单金额，甚至配置止盈止损，这套代码也确实赚到钱。 </p>\n<h5 id=\"阻塞攻击\"><a href=\"#阻塞攻击\" class=\"headerlink\" title=\"阻塞攻击\"></a>阻塞攻击</h5><p>但是很快我发现这个路数行不通了，目前的缺点有三个，一个是我的受害人同时也是合约的攻击者，他们可能是矿池主或者其他什么，他们会批量发起交易，在一个区块内用不同的账户对同一个token购买，把一个区块占满，也叫阻塞攻击，这样可以让其他人在他们同一时间下不了单抢不了他们的赢利点，同时也拦截了三明治攻击，一个是geth需要的服务器配置很高，因为他们的阻塞攻击导致我们的很多三明治攻击不能完成，盈利远远抵不了支出。还有一个问题就是以太坊链的手续费太高了，基本gas到40左右就不是我可以承受的了</p>\n<h5 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h5><p>大概思路就是这样，区块链的世界很有意思，从监听新交易，三明治攻击，阻塞攻击，这里面套路层出不穷，而我发现的这些还仅仅是皮毛</p>"},{"title":"构建令人愉悦的shell环境(mac)","date":"2017-11-16T06:38:56.000Z","_content":"> 工作中或多或少会用到命令行,无论你使用的是windows,Mac或者是Liunx,都应当拥有一个令人愉悦的命令行环境,让枯燥的命令行操作变得生动,易于上手.\n\n### 基本知识小科普\n#### 什么是Shell\nshell 英文翻译为壳\n在windows的CMD以及Mac OS的Terminal应当理解为命令行解释器 (Command Line Interface shell).\n他是用来连接命令行与系统的,用来管理你和操作系统间的交互.\n\n#### 什么是Bash\nbash 是一个为GNU项目编写的Unix shell.\n在Mac 或 Linux,这些基于Unix的系统的Shell版本都为Bash.\n\n#### 为什么要换掉Bash\n在Linux中默认的Shell版本为Bash,而我们使用Linux的场景一般往往是连接服务器,所以也就懒得更换掉这个默认的Shell了.\n但是在Mac OS中,系统默认是预装了除了Bash之外的其他版本Shell的,而Mac OS我们的使用场景往往是自己的工作机,所以替换一个舒适的Shell环境大有可为.\n这里我推荐的是zsh.\n<!-- more --> \n###### 什么是zsh\nzsh 是一个完全兼容了Bash,且更强大,使用更舒服的Shell.\n即便你熟悉了Bash的操作,也可以不需要很多学习成本的切换过来\nzsh的好处有很多,列举几点\n* zsh 的补全模式很方便 按两下TAB键可以触发zsh的补全,所有的补全选项都可以通过方向键或者Ctrl-n/p/f/b来选择\n* zsh 支持命令选项补全 例如ls - 连按两下TAB键,即可出现ls的所有选项供你选择\n* zsh 支持命令参数补全 例如kill进程,原本需要根据进程名查询进程ID,然后记下ID,再kill掉进程,而zsh可以做到只要kill <进程名> 它会自动补全进程的ID\n* zsh 强大的快速目录切换 经常会有的场景是你需要在两个目录下不停切换,总要CD很长的路径,zsh可以根据1-9的数字,快速访问你的历史访问路径.还可以通过d来查看目录访问历史\n\n还有什么目录补全之类的好处就不多赘述了,总之是一个使用起来很舒服的Shell.\n###### 什么是oh-my-zsh\n但是zsh 的默认配置及其复杂繁琐,新上手的同学推荐使用oh-my-zsh\noh-my-zsh 它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。\n\n#### iTerm\niTerm是用来替换Mac下命令行工具Terminal(终端)的,因为他的功能比Terminal更强大,我目前用到最实际的感受就是分屏功能确实爽,可以拆出很多个小的命令行窗口,并且各种快捷键操作非常舒服.\n\n安装iTerm 只需要到官网下载,正常安装即可.\nWindows下可以使用xShell替换CMD\n\n### 替换开始\nMac OS 首先安装iTerm\n\n#### 切换Shell\n首先查看本地安装的Shell\n```\n$ cat /etc/shells\n```\nMac OS默认安装了如下6个Shell\n```\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n```\n正常的切换到oh-my-zsh的步骤应当是\n1. clone oh-my-zsh的git库\n2. 备份zshrc文件\n3. 替换新的zshrc文件为oh-my-zsh\n\n这里我们直接使用脚本一键替换\n```\n# 这个脚本为我们做了上述的事情\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n切换Shell为zsh\n```\n$ chsh -s /bin/zsh\n```\n安装完成,重启iTerm.\n\n#### 美化shell环境\n##### iTerm美化\n我是用的主题是 [Tomorrow](https://github.com/chriskempson/tomorrow-theme)\n下载Tomorrow并解压.\n打开iTerm -> Preferences -> profiles -> Colors标签 ->右下角Color Presets ->import\n选择解压后的Tomorrow目录,找到目录下iTerm2文件夹,里面有5个主题文件,全选,导入.\n再次选择右下角Color Presets,会发现导入的主题已经出现在下面,我用的是Tomorrow Night Eighties.\n\n##### oh-my-zsh美化\noh-my-zsh也是可以使用主题的\n我是用的是ys主题\n本地主题可以在 ~/.oh-my-zsh/themes/中看到\n主题的样式可以去[oh-my-zsh官网主题列表](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)查看,官网还提供了除了141个自带主题之外的其他主题.\n我用的是自带的ys主题,因为有些主题为了好看,需要用到一些特殊字符,还要导入指定的字体,我嫌麻烦.\n想要修改主题也很简单\n```\n# 编辑配置文件\n$ vim ~/.zshrc\n# 修改ZSH_THEME字段 ZSH_THEME=\"主题名\"\nZSH_THEME=\"ys\"\n# 保存并退出\n$ wq\n```\n重启iTerm\n\n##### vim 美化\n我们美化了命令行工具,美化了Shell,但是最常用的Vim却不在他们美化的范围内,所以我们需要对vim处理一下,不然Vim打开的文件,都是纯白字色,辨识度很低.\n打开刚才下载的iTerm的Tomorrow主题文件夹\n> 没错,tomorrow主题不仅仅支持iTerm,还支持Atom,Eclipse,Xcode,Visual Studio,notepad++,OS X Terminal等等多种工具.\n\n找到vim文件夹 -> colors\n复制里面的vim主题文件到 ~/.vim/colors文件夹下\n编辑vim配置文件 ~/.vimrc  (mac 系统下默认好像是没有的,需要自己创建)\n```\n# 我使用的依然是 Tomorrow-Night-Eighties\ncolorscheme Tomorrow-Night-Eighties\n```\n以下是我的配置文件信息,我加入了注释,可以直接复制我的配置文件使用\n\n```\n$ vim ~/.vimrc\n\n\" Configuration file for vim\nset modelines=0     \" CVE-2007-2438\n\" 语法高亮\nsyntax on\n\" 主题\ncolorscheme Tomorrow-Night-Eighties\n\" 显示行号\nset number\n\n\" 自动缩进\nset autoindent\nset cindent\n\" Tab键的宽度\nset tabstop=4\n\" 统一缩进为4\nset softtabstop=4\nset shiftwidth=4\n\n\n\"搜索逐字符高亮\n set hlsearch\n set incsearch\n\n \" Normally we use vim-extensions. If you want true vi-compatibility\n \" remove change the following statements\n \" Use Vim defaults instead of 100% vi compatibility\n \" 不使用vi的键盘模式 使用vim自己的\n set nocompatible\n \" more powerful backspacing\n set backspace=2\n\n \" Don't write backup file if vim is being called by \"crontab -e\"\n au BufWrite /private/tmp/crontab.* set nowritebackup nobackup\n \" Don't write backup file if vim is being called by \"chpass\"\n au BufWrite /private/etc/pw.* set nowritebackup nobackup\n let skip_defaults_vim=1\n```\nps:开启行号是个很纠结的事,因为复制的时候会把行号也复制出来,但是不开启又看着不舒服.自由取舍吧.\n\n以下是我的iTerm截图\n![iTerm截图](/img/1510820449852.jpg)\n![iTerm截图](/img/1510820508851.jpg)\n![iTerm截图](/img/1510820994873.jpg)\n\n祝你愉快!\n","source":"_posts/构建令人愉悦的shell环境(mac).md","raw":"---\ntitle: 构建令人愉悦的shell环境(mac)\ndate: 2017-11-16 14:38:56\ntags: Mac,Linux\n---\n> 工作中或多或少会用到命令行,无论你使用的是windows,Mac或者是Liunx,都应当拥有一个令人愉悦的命令行环境,让枯燥的命令行操作变得生动,易于上手.\n\n### 基本知识小科普\n#### 什么是Shell\nshell 英文翻译为壳\n在windows的CMD以及Mac OS的Terminal应当理解为命令行解释器 (Command Line Interface shell).\n他是用来连接命令行与系统的,用来管理你和操作系统间的交互.\n\n#### 什么是Bash\nbash 是一个为GNU项目编写的Unix shell.\n在Mac 或 Linux,这些基于Unix的系统的Shell版本都为Bash.\n\n#### 为什么要换掉Bash\n在Linux中默认的Shell版本为Bash,而我们使用Linux的场景一般往往是连接服务器,所以也就懒得更换掉这个默认的Shell了.\n但是在Mac OS中,系统默认是预装了除了Bash之外的其他版本Shell的,而Mac OS我们的使用场景往往是自己的工作机,所以替换一个舒适的Shell环境大有可为.\n这里我推荐的是zsh.\n<!-- more --> \n###### 什么是zsh\nzsh 是一个完全兼容了Bash,且更强大,使用更舒服的Shell.\n即便你熟悉了Bash的操作,也可以不需要很多学习成本的切换过来\nzsh的好处有很多,列举几点\n* zsh 的补全模式很方便 按两下TAB键可以触发zsh的补全,所有的补全选项都可以通过方向键或者Ctrl-n/p/f/b来选择\n* zsh 支持命令选项补全 例如ls - 连按两下TAB键,即可出现ls的所有选项供你选择\n* zsh 支持命令参数补全 例如kill进程,原本需要根据进程名查询进程ID,然后记下ID,再kill掉进程,而zsh可以做到只要kill <进程名> 它会自动补全进程的ID\n* zsh 强大的快速目录切换 经常会有的场景是你需要在两个目录下不停切换,总要CD很长的路径,zsh可以根据1-9的数字,快速访问你的历史访问路径.还可以通过d来查看目录访问历史\n\n还有什么目录补全之类的好处就不多赘述了,总之是一个使用起来很舒服的Shell.\n###### 什么是oh-my-zsh\n但是zsh 的默认配置及其复杂繁琐,新上手的同学推荐使用oh-my-zsh\noh-my-zsh 它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。\n\n#### iTerm\niTerm是用来替换Mac下命令行工具Terminal(终端)的,因为他的功能比Terminal更强大,我目前用到最实际的感受就是分屏功能确实爽,可以拆出很多个小的命令行窗口,并且各种快捷键操作非常舒服.\n\n安装iTerm 只需要到官网下载,正常安装即可.\nWindows下可以使用xShell替换CMD\n\n### 替换开始\nMac OS 首先安装iTerm\n\n#### 切换Shell\n首先查看本地安装的Shell\n```\n$ cat /etc/shells\n```\nMac OS默认安装了如下6个Shell\n```\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n```\n正常的切换到oh-my-zsh的步骤应当是\n1. clone oh-my-zsh的git库\n2. 备份zshrc文件\n3. 替换新的zshrc文件为oh-my-zsh\n\n这里我们直接使用脚本一键替换\n```\n# 这个脚本为我们做了上述的事情\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n切换Shell为zsh\n```\n$ chsh -s /bin/zsh\n```\n安装完成,重启iTerm.\n\n#### 美化shell环境\n##### iTerm美化\n我是用的主题是 [Tomorrow](https://github.com/chriskempson/tomorrow-theme)\n下载Tomorrow并解压.\n打开iTerm -> Preferences -> profiles -> Colors标签 ->右下角Color Presets ->import\n选择解压后的Tomorrow目录,找到目录下iTerm2文件夹,里面有5个主题文件,全选,导入.\n再次选择右下角Color Presets,会发现导入的主题已经出现在下面,我用的是Tomorrow Night Eighties.\n\n##### oh-my-zsh美化\noh-my-zsh也是可以使用主题的\n我是用的是ys主题\n本地主题可以在 ~/.oh-my-zsh/themes/中看到\n主题的样式可以去[oh-my-zsh官网主题列表](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)查看,官网还提供了除了141个自带主题之外的其他主题.\n我用的是自带的ys主题,因为有些主题为了好看,需要用到一些特殊字符,还要导入指定的字体,我嫌麻烦.\n想要修改主题也很简单\n```\n# 编辑配置文件\n$ vim ~/.zshrc\n# 修改ZSH_THEME字段 ZSH_THEME=\"主题名\"\nZSH_THEME=\"ys\"\n# 保存并退出\n$ wq\n```\n重启iTerm\n\n##### vim 美化\n我们美化了命令行工具,美化了Shell,但是最常用的Vim却不在他们美化的范围内,所以我们需要对vim处理一下,不然Vim打开的文件,都是纯白字色,辨识度很低.\n打开刚才下载的iTerm的Tomorrow主题文件夹\n> 没错,tomorrow主题不仅仅支持iTerm,还支持Atom,Eclipse,Xcode,Visual Studio,notepad++,OS X Terminal等等多种工具.\n\n找到vim文件夹 -> colors\n复制里面的vim主题文件到 ~/.vim/colors文件夹下\n编辑vim配置文件 ~/.vimrc  (mac 系统下默认好像是没有的,需要自己创建)\n```\n# 我使用的依然是 Tomorrow-Night-Eighties\ncolorscheme Tomorrow-Night-Eighties\n```\n以下是我的配置文件信息,我加入了注释,可以直接复制我的配置文件使用\n\n```\n$ vim ~/.vimrc\n\n\" Configuration file for vim\nset modelines=0     \" CVE-2007-2438\n\" 语法高亮\nsyntax on\n\" 主题\ncolorscheme Tomorrow-Night-Eighties\n\" 显示行号\nset number\n\n\" 自动缩进\nset autoindent\nset cindent\n\" Tab键的宽度\nset tabstop=4\n\" 统一缩进为4\nset softtabstop=4\nset shiftwidth=4\n\n\n\"搜索逐字符高亮\n set hlsearch\n set incsearch\n\n \" Normally we use vim-extensions. If you want true vi-compatibility\n \" remove change the following statements\n \" Use Vim defaults instead of 100% vi compatibility\n \" 不使用vi的键盘模式 使用vim自己的\n set nocompatible\n \" more powerful backspacing\n set backspace=2\n\n \" Don't write backup file if vim is being called by \"crontab -e\"\n au BufWrite /private/tmp/crontab.* set nowritebackup nobackup\n \" Don't write backup file if vim is being called by \"chpass\"\n au BufWrite /private/etc/pw.* set nowritebackup nobackup\n let skip_defaults_vim=1\n```\nps:开启行号是个很纠结的事,因为复制的时候会把行号也复制出来,但是不开启又看着不舒服.自由取舍吧.\n\n以下是我的iTerm截图\n![iTerm截图](/img/1510820449852.jpg)\n![iTerm截图](/img/1510820508851.jpg)\n![iTerm截图](/img/1510820994873.jpg)\n\n祝你愉快!\n","slug":"构建令人愉悦的shell环境(mac)","published":1,"updated":"2021-07-12T07:17:36.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtg9000btdm291mo0a17","content":"<blockquote>\n<p>工作中或多或少会用到命令行,无论你使用的是windows,Mac或者是Liunx,都应当拥有一个令人愉悦的命令行环境,让枯燥的命令行操作变得生动,易于上手.</p>\n</blockquote>\n<h3 id=\"基本知识小科普\"><a href=\"#基本知识小科普\" class=\"headerlink\" title=\"基本知识小科普\"></a>基本知识小科普</h3><h4 id=\"什么是Shell\"><a href=\"#什么是Shell\" class=\"headerlink\" title=\"什么是Shell\"></a>什么是Shell</h4><p>shell 英文翻译为壳<br>在windows的CMD以及Mac OS的Terminal应当理解为命令行解释器 (Command Line Interface shell).<br>他是用来连接命令行与系统的,用来管理你和操作系统间的交互.</p>\n<h4 id=\"什么是Bash\"><a href=\"#什么是Bash\" class=\"headerlink\" title=\"什么是Bash\"></a>什么是Bash</h4><p>bash 是一个为GNU项目编写的Unix shell.<br>在Mac 或 Linux,这些基于Unix的系统的Shell版本都为Bash.</p>\n<h4 id=\"为什么要换掉Bash\"><a href=\"#为什么要换掉Bash\" class=\"headerlink\" title=\"为什么要换掉Bash\"></a>为什么要换掉Bash</h4><p>在Linux中默认的Shell版本为Bash,而我们使用Linux的场景一般往往是连接服务器,所以也就懒得更换掉这个默认的Shell了.<br>但是在Mac OS中,系统默认是预装了除了Bash之外的其他版本Shell的,而Mac OS我们的使用场景往往是自己的工作机,所以替换一个舒适的Shell环境大有可为.<br>这里我推荐的是zsh.</p>\n<span id=\"more\"></span> \n<h6 id=\"什么是zsh\"><a href=\"#什么是zsh\" class=\"headerlink\" title=\"什么是zsh\"></a>什么是zsh</h6><p>zsh 是一个完全兼容了Bash,且更强大,使用更舒服的Shell.<br>即便你熟悉了Bash的操作,也可以不需要很多学习成本的切换过来<br>zsh的好处有很多,列举几点</p>\n<ul>\n<li>zsh 的补全模式很方便 按两下TAB键可以触发zsh的补全,所有的补全选项都可以通过方向键或者Ctrl-n/p/f/b来选择</li>\n<li>zsh 支持命令选项补全 例如ls - 连按两下TAB键,即可出现ls的所有选项供你选择</li>\n<li>zsh 支持命令参数补全 例如kill进程,原本需要根据进程名查询进程ID,然后记下ID,再kill掉进程,而zsh可以做到只要kill &lt;进程名&gt; 它会自动补全进程的ID</li>\n<li>zsh 强大的快速目录切换 经常会有的场景是你需要在两个目录下不停切换,总要CD很长的路径,zsh可以根据1-9的数字,快速访问你的历史访问路径.还可以通过d来查看目录访问历史</li>\n</ul>\n<p>还有什么目录补全之类的好处就不多赘述了,总之是一个使用起来很舒服的Shell.</p>\n<h6 id=\"什么是oh-my-zsh\"><a href=\"#什么是oh-my-zsh\" class=\"headerlink\" title=\"什么是oh-my-zsh\"></a>什么是oh-my-zsh</h6><p>但是zsh 的默认配置及其复杂繁琐,新上手的同学推荐使用oh-my-zsh<br>oh-my-zsh 它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。</p>\n<h4 id=\"iTerm\"><a href=\"#iTerm\" class=\"headerlink\" title=\"iTerm\"></a>iTerm</h4><p>iTerm是用来替换Mac下命令行工具Terminal(终端)的,因为他的功能比Terminal更强大,我目前用到最实际的感受就是分屏功能确实爽,可以拆出很多个小的命令行窗口,并且各种快捷键操作非常舒服.</p>\n<p>安装iTerm 只需要到官网下载,正常安装即可.<br>Windows下可以使用xShell替换CMD</p>\n<h3 id=\"替换开始\"><a href=\"#替换开始\" class=\"headerlink\" title=\"替换开始\"></a>替换开始</h3><p>Mac OS 首先安装iTerm</p>\n<h4 id=\"切换Shell\"><a href=\"#切换Shell\" class=\"headerlink\" title=\"切换Shell\"></a>切换Shell</h4><p>首先查看本地安装的Shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/shells</span><br></pre></td></tr></table></figure>\n<p>Mac OS默认安装了如下6个Shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash</span><br><span class=\"line\">/bin/csh</span><br><span class=\"line\">/bin/ksh</span><br><span class=\"line\">/bin/sh</span><br><span class=\"line\">/bin/tcsh</span><br><span class=\"line\">/bin/zsh</span><br></pre></td></tr></table></figure>\n<p>正常的切换到oh-my-zsh的步骤应当是</p>\n<ol>\n<li>clone oh-my-zsh的git库</li>\n<li>备份zshrc文件</li>\n<li>替换新的zshrc文件为oh-my-zsh</li>\n</ol>\n<p>这里我们直接使用脚本一键替换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个脚本为我们做了上述的事情</span><br><span class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>切换Shell为zsh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n<p>安装完成,重启iTerm.</p>\n<h4 id=\"美化shell环境\"><a href=\"#美化shell环境\" class=\"headerlink\" title=\"美化shell环境\"></a>美化shell环境</h4><h5 id=\"iTerm美化\"><a href=\"#iTerm美化\" class=\"headerlink\" title=\"iTerm美化\"></a>iTerm美化</h5><p>我是用的主题是 <a href=\"https://github.com/chriskempson/tomorrow-theme\">Tomorrow</a><br>下载Tomorrow并解压.<br>打开iTerm -&gt; Preferences -&gt; profiles -&gt; Colors标签 -&gt;右下角Color Presets -&gt;import<br>选择解压后的Tomorrow目录,找到目录下iTerm2文件夹,里面有5个主题文件,全选,导入.<br>再次选择右下角Color Presets,会发现导入的主题已经出现在下面,我用的是Tomorrow Night Eighties.</p>\n<h5 id=\"oh-my-zsh美化\"><a href=\"#oh-my-zsh美化\" class=\"headerlink\" title=\"oh-my-zsh美化\"></a>oh-my-zsh美化</h5><p>oh-my-zsh也是可以使用主题的<br>我是用的是ys主题<br>本地主题可以在 ~/.oh-my-zsh/themes/中看到<br>主题的样式可以去<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\">oh-my-zsh官网主题列表</a>查看,官网还提供了除了141个自带主题之外的其他主题.<br>我用的是自带的ys主题,因为有些主题为了好看,需要用到一些特殊字符,还要导入指定的字体,我嫌麻烦.<br>想要修改主题也很简单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑配置文件</span><br><span class=\"line\">$ vim ~/.zshrc</span><br><span class=\"line\"># 修改ZSH_THEME字段 ZSH_THEME=&quot;主题名&quot;</span><br><span class=\"line\">ZSH_THEME=&quot;ys&quot;</span><br><span class=\"line\"># 保存并退出</span><br><span class=\"line\">$ wq</span><br></pre></td></tr></table></figure>\n<p>重启iTerm</p>\n<h5 id=\"vim-美化\"><a href=\"#vim-美化\" class=\"headerlink\" title=\"vim 美化\"></a>vim 美化</h5><p>我们美化了命令行工具,美化了Shell,但是最常用的Vim却不在他们美化的范围内,所以我们需要对vim处理一下,不然Vim打开的文件,都是纯白字色,辨识度很低.<br>打开刚才下载的iTerm的Tomorrow主题文件夹</p>\n<blockquote>\n<p>没错,tomorrow主题不仅仅支持iTerm,还支持Atom,Eclipse,Xcode,Visual Studio,notepad++,OS X Terminal等等多种工具.</p>\n</blockquote>\n<p>找到vim文件夹 -&gt; colors<br>复制里面的vim主题文件到 ~/.vim/colors文件夹下<br>编辑vim配置文件 ~/.vimrc  (mac 系统下默认好像是没有的,需要自己创建)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我使用的依然是 Tomorrow-Night-Eighties</span><br><span class=\"line\">colorscheme Tomorrow-Night-Eighties</span><br></pre></td></tr></table></figure>\n<p>以下是我的配置文件信息,我加入了注释,可以直接复制我的配置文件使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.vimrc</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Configuration file for vim</span><br><span class=\"line\">set modelines=0     &quot; CVE-2007-2438</span><br><span class=\"line\">&quot; 语法高亮</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">&quot; 主题</span><br><span class=\"line\">colorscheme Tomorrow-Night-Eighties</span><br><span class=\"line\">&quot; 显示行号</span><br><span class=\"line\">set number</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; 自动缩进</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set cindent</span><br><span class=\"line\">&quot; Tab键的宽度</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">&quot; 统一缩进为4</span><br><span class=\"line\">set softtabstop=4</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;搜索逐字符高亮</span><br><span class=\"line\"> set hlsearch</span><br><span class=\"line\"> set incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot; Normally we use vim-extensions. If you want true vi-compatibility</span><br><span class=\"line\"> &quot; remove change the following statements</span><br><span class=\"line\"> &quot; Use Vim defaults instead of 100% vi compatibility</span><br><span class=\"line\"> &quot; 不使用vi的键盘模式 使用vim自己的</span><br><span class=\"line\"> set nocompatible</span><br><span class=\"line\"> &quot; more powerful backspacing</span><br><span class=\"line\"> set backspace=2</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot; Don&#x27;t write backup file if vim is being called by &quot;crontab -e&quot;</span><br><span class=\"line\"> au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</span><br><span class=\"line\"> &quot; Don&#x27;t write backup file if vim is being called by &quot;chpass&quot;</span><br><span class=\"line\"> au BufWrite /private/etc/pw.* set nowritebackup nobackup</span><br><span class=\"line\"> let skip_defaults_vim=1</span><br></pre></td></tr></table></figure>\n<p>ps:开启行号是个很纠结的事,因为复制的时候会把行号也复制出来,但是不开启又看着不舒服.自由取舍吧.</p>\n<p>以下是我的iTerm截图<br><img src=\"/img/1510820449852.jpg\" alt=\"iTerm截图\"><br><img src=\"/img/1510820508851.jpg\" alt=\"iTerm截图\"><br><img src=\"/img/1510820994873.jpg\" alt=\"iTerm截图\"></p>\n<p>祝你愉快!</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>工作中或多或少会用到命令行,无论你使用的是windows,Mac或者是Liunx,都应当拥有一个令人愉悦的命令行环境,让枯燥的命令行操作变得生动,易于上手.</p>\n</blockquote>\n<h3 id=\"基本知识小科普\"><a href=\"#基本知识小科普\" class=\"headerlink\" title=\"基本知识小科普\"></a>基本知识小科普</h3><h4 id=\"什么是Shell\"><a href=\"#什么是Shell\" class=\"headerlink\" title=\"什么是Shell\"></a>什么是Shell</h4><p>shell 英文翻译为壳<br>在windows的CMD以及Mac OS的Terminal应当理解为命令行解释器 (Command Line Interface shell).<br>他是用来连接命令行与系统的,用来管理你和操作系统间的交互.</p>\n<h4 id=\"什么是Bash\"><a href=\"#什么是Bash\" class=\"headerlink\" title=\"什么是Bash\"></a>什么是Bash</h4><p>bash 是一个为GNU项目编写的Unix shell.<br>在Mac 或 Linux,这些基于Unix的系统的Shell版本都为Bash.</p>\n<h4 id=\"为什么要换掉Bash\"><a href=\"#为什么要换掉Bash\" class=\"headerlink\" title=\"为什么要换掉Bash\"></a>为什么要换掉Bash</h4><p>在Linux中默认的Shell版本为Bash,而我们使用Linux的场景一般往往是连接服务器,所以也就懒得更换掉这个默认的Shell了.<br>但是在Mac OS中,系统默认是预装了除了Bash之外的其他版本Shell的,而Mac OS我们的使用场景往往是自己的工作机,所以替换一个舒适的Shell环境大有可为.<br>这里我推荐的是zsh.</p>","more":"<h6 id=\"什么是zsh\"><a href=\"#什么是zsh\" class=\"headerlink\" title=\"什么是zsh\"></a>什么是zsh</h6><p>zsh 是一个完全兼容了Bash,且更强大,使用更舒服的Shell.<br>即便你熟悉了Bash的操作,也可以不需要很多学习成本的切换过来<br>zsh的好处有很多,列举几点</p>\n<ul>\n<li>zsh 的补全模式很方便 按两下TAB键可以触发zsh的补全,所有的补全选项都可以通过方向键或者Ctrl-n/p/f/b来选择</li>\n<li>zsh 支持命令选项补全 例如ls - 连按两下TAB键,即可出现ls的所有选项供你选择</li>\n<li>zsh 支持命令参数补全 例如kill进程,原本需要根据进程名查询进程ID,然后记下ID,再kill掉进程,而zsh可以做到只要kill &lt;进程名&gt; 它会自动补全进程的ID</li>\n<li>zsh 强大的快速目录切换 经常会有的场景是你需要在两个目录下不停切换,总要CD很长的路径,zsh可以根据1-9的数字,快速访问你的历史访问路径.还可以通过d来查看目录访问历史</li>\n</ul>\n<p>还有什么目录补全之类的好处就不多赘述了,总之是一个使用起来很舒服的Shell.</p>\n<h6 id=\"什么是oh-my-zsh\"><a href=\"#什么是oh-my-zsh\" class=\"headerlink\" title=\"什么是oh-my-zsh\"></a>什么是oh-my-zsh</h6><p>但是zsh 的默认配置及其复杂繁琐,新上手的同学推荐使用oh-my-zsh<br>oh-my-zsh 它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。</p>\n<h4 id=\"iTerm\"><a href=\"#iTerm\" class=\"headerlink\" title=\"iTerm\"></a>iTerm</h4><p>iTerm是用来替换Mac下命令行工具Terminal(终端)的,因为他的功能比Terminal更强大,我目前用到最实际的感受就是分屏功能确实爽,可以拆出很多个小的命令行窗口,并且各种快捷键操作非常舒服.</p>\n<p>安装iTerm 只需要到官网下载,正常安装即可.<br>Windows下可以使用xShell替换CMD</p>\n<h3 id=\"替换开始\"><a href=\"#替换开始\" class=\"headerlink\" title=\"替换开始\"></a>替换开始</h3><p>Mac OS 首先安装iTerm</p>\n<h4 id=\"切换Shell\"><a href=\"#切换Shell\" class=\"headerlink\" title=\"切换Shell\"></a>切换Shell</h4><p>首先查看本地安装的Shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/shells</span><br></pre></td></tr></table></figure>\n<p>Mac OS默认安装了如下6个Shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash</span><br><span class=\"line\">/bin/csh</span><br><span class=\"line\">/bin/ksh</span><br><span class=\"line\">/bin/sh</span><br><span class=\"line\">/bin/tcsh</span><br><span class=\"line\">/bin/zsh</span><br></pre></td></tr></table></figure>\n<p>正常的切换到oh-my-zsh的步骤应当是</p>\n<ol>\n<li>clone oh-my-zsh的git库</li>\n<li>备份zshrc文件</li>\n<li>替换新的zshrc文件为oh-my-zsh</li>\n</ol>\n<p>这里我们直接使用脚本一键替换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个脚本为我们做了上述的事情</span><br><span class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>切换Shell为zsh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n<p>安装完成,重启iTerm.</p>\n<h4 id=\"美化shell环境\"><a href=\"#美化shell环境\" class=\"headerlink\" title=\"美化shell环境\"></a>美化shell环境</h4><h5 id=\"iTerm美化\"><a href=\"#iTerm美化\" class=\"headerlink\" title=\"iTerm美化\"></a>iTerm美化</h5><p>我是用的主题是 <a href=\"https://github.com/chriskempson/tomorrow-theme\">Tomorrow</a><br>下载Tomorrow并解压.<br>打开iTerm -&gt; Preferences -&gt; profiles -&gt; Colors标签 -&gt;右下角Color Presets -&gt;import<br>选择解压后的Tomorrow目录,找到目录下iTerm2文件夹,里面有5个主题文件,全选,导入.<br>再次选择右下角Color Presets,会发现导入的主题已经出现在下面,我用的是Tomorrow Night Eighties.</p>\n<h5 id=\"oh-my-zsh美化\"><a href=\"#oh-my-zsh美化\" class=\"headerlink\" title=\"oh-my-zsh美化\"></a>oh-my-zsh美化</h5><p>oh-my-zsh也是可以使用主题的<br>我是用的是ys主题<br>本地主题可以在 ~/.oh-my-zsh/themes/中看到<br>主题的样式可以去<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\">oh-my-zsh官网主题列表</a>查看,官网还提供了除了141个自带主题之外的其他主题.<br>我用的是自带的ys主题,因为有些主题为了好看,需要用到一些特殊字符,还要导入指定的字体,我嫌麻烦.<br>想要修改主题也很简单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑配置文件</span><br><span class=\"line\">$ vim ~/.zshrc</span><br><span class=\"line\"># 修改ZSH_THEME字段 ZSH_THEME=&quot;主题名&quot;</span><br><span class=\"line\">ZSH_THEME=&quot;ys&quot;</span><br><span class=\"line\"># 保存并退出</span><br><span class=\"line\">$ wq</span><br></pre></td></tr></table></figure>\n<p>重启iTerm</p>\n<h5 id=\"vim-美化\"><a href=\"#vim-美化\" class=\"headerlink\" title=\"vim 美化\"></a>vim 美化</h5><p>我们美化了命令行工具,美化了Shell,但是最常用的Vim却不在他们美化的范围内,所以我们需要对vim处理一下,不然Vim打开的文件,都是纯白字色,辨识度很低.<br>打开刚才下载的iTerm的Tomorrow主题文件夹</p>\n<blockquote>\n<p>没错,tomorrow主题不仅仅支持iTerm,还支持Atom,Eclipse,Xcode,Visual Studio,notepad++,OS X Terminal等等多种工具.</p>\n</blockquote>\n<p>找到vim文件夹 -&gt; colors<br>复制里面的vim主题文件到 ~/.vim/colors文件夹下<br>编辑vim配置文件 ~/.vimrc  (mac 系统下默认好像是没有的,需要自己创建)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我使用的依然是 Tomorrow-Night-Eighties</span><br><span class=\"line\">colorscheme Tomorrow-Night-Eighties</span><br></pre></td></tr></table></figure>\n<p>以下是我的配置文件信息,我加入了注释,可以直接复制我的配置文件使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.vimrc</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Configuration file for vim</span><br><span class=\"line\">set modelines=0     &quot; CVE-2007-2438</span><br><span class=\"line\">&quot; 语法高亮</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">&quot; 主题</span><br><span class=\"line\">colorscheme Tomorrow-Night-Eighties</span><br><span class=\"line\">&quot; 显示行号</span><br><span class=\"line\">set number</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; 自动缩进</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set cindent</span><br><span class=\"line\">&quot; Tab键的宽度</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">&quot; 统一缩进为4</span><br><span class=\"line\">set softtabstop=4</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;搜索逐字符高亮</span><br><span class=\"line\"> set hlsearch</span><br><span class=\"line\"> set incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot; Normally we use vim-extensions. If you want true vi-compatibility</span><br><span class=\"line\"> &quot; remove change the following statements</span><br><span class=\"line\"> &quot; Use Vim defaults instead of 100% vi compatibility</span><br><span class=\"line\"> &quot; 不使用vi的键盘模式 使用vim自己的</span><br><span class=\"line\"> set nocompatible</span><br><span class=\"line\"> &quot; more powerful backspacing</span><br><span class=\"line\"> set backspace=2</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot; Don&#x27;t write backup file if vim is being called by &quot;crontab -e&quot;</span><br><span class=\"line\"> au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</span><br><span class=\"line\"> &quot; Don&#x27;t write backup file if vim is being called by &quot;chpass&quot;</span><br><span class=\"line\"> au BufWrite /private/etc/pw.* set nowritebackup nobackup</span><br><span class=\"line\"> let skip_defaults_vim=1</span><br></pre></td></tr></table></figure>\n<p>ps:开启行号是个很纠结的事,因为复制的时候会把行号也复制出来,但是不开启又看着不舒服.自由取舍吧.</p>\n<p>以下是我的iTerm截图<br><img src=\"/img/1510820449852.jpg\" alt=\"iTerm截图\"><br><img src=\"/img/1510820508851.jpg\" alt=\"iTerm截图\"><br><img src=\"/img/1510820994873.jpg\" alt=\"iTerm截图\"></p>\n<p>祝你愉快!</p>"},{"title":"程序员必备的翻墙姿势+ss搭建vps服务器","date":"2016-12-21T08:28:11.000Z","_content":"### 程序员需要一个自由的互联网！！！\n{% note info %} 其实除了下面描述的vps搭建方法，如果不差钱想要搭建vps服务器，可以去阿里云租个香港服务器最低配置就可以，大概1.2K一年，流量不要买固定的带宽，按量付费，速度选最快，充100块能用超久，速度飞起  {% endnote %}\n\n#### 翻墙的几种手段\n这里就不介绍，修改Hosts、蓝灯、GoAgent、Tor等方式了\n<!-- more --> \n##### VPN\nVPN其实就是把你整个网关出口跟远端服务器之间建立一个隧道，你的所有的出口数据都会经过VPN服务器进行转发。\n##### 优点:\n全局代理，配置简单。\n##### 缺点:\n缺点也很明显，无差别代理，访问国内网站，相当于先跳转到国外，再访问国内网站，速度可想而知。\n\n网上可以找到各种免费的VPN代理，也有收费。这里推荐GreenVPN，注册之后可以有免费的VPN用，也可以付费。（PS，网上各种假冒网站，注意甄别！）\n\n具体如何使用，这里就不过多介绍了，\n\n总结：VPN适合需要系统全局翻墙，并且是按需使用的方式。\n\n#### Shadowdsocks\n##### Shadowdsocks介绍(摘自维基百科)\nshadowsocks是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。\n\n在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以事实上并未停止维护，而是转由其他贡献者们持续维护中。\n##### Shadowsocks的优劣：\n##### 优势:\n安全。所有数据流量全部经过加密，加密算法可选并支持自定义算法。另外，远程DNS解析也使得本地的ISP无法通过DNS查询获取你所访问的网站。\n\n速度相对较快。由于其隐蔽性，只会有很少的数据包会被GFW丢弃，从而保证了连接速度。\n\n客户端配置简单。配置时只需要填写IP /域名、端口号，密码，然后选择加密方式即可。\n\n智能切换。 传统的VPN方式，在切换网络时非常不方便， 比如连上国外的 VPN 之后会发现访问国内的网站速度严重下降。ShadowSocks支持PAC列表，根据PAC中的规则，有针对性地选用恰当的网络访问方式，兼顾了访问速度与访问效率。移动客户端还支持针对不同应用设置单独代理。\n\n代码开源。不像某些蜜罐式的翻墙工具，开源的代码保证了无后门，从而为上网的隐私性与安全性提供保障。\n\n跨平台。支持主流系统包括Windows，Linux，Mac，Android,IOS，都有对应的客户端支持。\n\n##### 劣势:\n技术成本。若自己搭建ShadowSocks服务，需要一定的技术成本。因为大部分服务端是基于运行Linux的VPS（虚拟主机）搭建，因此需要学会使用putty等远程管理工具的使用方法，并掌握一定的Linux基本命令行操作。\n\n金钱成本。租用国外的服务器，需要价格不菲的费用。 若使用免费ShadowSocks账号，可能有一定的安全成本。有一些人会将自己的ShadowSocks节点免费分享出来，这些人是非常值得肯定和称赞的！但是其中有一小部分人别有居心，例如在ShadowSocks的服务器端监听网络流量，进行中间人攻击等，这类钓鱼服务器会严重损害用户的个人信息安全。 若购买收费的ShadowSocks账号， 需要一定的金钱成本 由于很多ShadowSocks卖家都是以盈利为目的，需要花费一定的费用。 那么，自己想要有一个影梭账号的话，到底是选用哪种比较好呢？可以看到网上很多卖ShadowSocks账号的，有的价格很便宜，比自己搭服务器划算多了，是不是直接购买一个账号比较好呢？ 在这里我建议大家自己搭服务器\n\n上面介绍的优势，就是我推荐大家使用的理由，而劣势就是写文章的缘由。\n\n#### 关于VPN\n虽然Shadowdsocks很好用，但是有的时候，总会碰到一个先有鸡还是有蛋的情况，你要配置Shadowdsocks，但是需要先翻墙，所以为了避免这种情况，最好还有备一个VPN还是有必要的。\n\n#### 使用和配置Shadowdsocks客户端\n> 由于iOS系统安全性，需要越狱才能安装Shadowdsocks，如果你已经越狱，你可以自行编译安装，源码\n##### iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）\n\n如果搜不到,可以使用境外AppStoreID搜索下载客户端.\n\nSurge:强烈推荐，虽然价格偏高，但是使用体验最好\n\nShadowrocket：价格便宜，买不起上面的，就买这个吧\n\npotatso:价格比上面贵一些，但是代码开源,有能力的可以自己编译安装。\n\nAndroid(Google Play) Shadowsocks\n\nps.不想花钱的,可以试试PP助手之类的软件安装.\n\n##### 客户端使用\n\n这里只介绍MAC系统使用，如果已经有了Shadowsocks帐号：\n\n服务器设定 ->IP、端口、加密、密码，一一对应填写。\n\n测试服务器是否配置成功：\n\n勾选配置好的服务器，选择全局模式，然后打开Google,如果可以就进行下一步。\n\n如果打不开，检查填写有误，检查是否使用了默认的443端口，是否开启了其它代理。\n##### 更新 PAC\n关于PAC介绍可以搜一下这篇文章：SS软件中的pac自动代理模式是什么？\n\nMac版的ss客户端已经停滞更新，官方版本一直停滞在2.6.3。所以，gfwlist地址的改变，直接导致了PAC无法更新了。解决方法有两种，你任选一种吧。\n\n方法A：\n直接改用民间大神修改的2.6.5版本即可，Releases版本：ShadowsocksX-2.6.5[https://github.com/RobertYan/ShadowsocksX/releases](https://github.com/RobertYan/ShadowsocksX/releases)\n\n方法B：\n如果不信任其他人修改的版本，你可以使用这个脚本更新PAC[https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a](https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a)\n测试 PAC 是否生效，选择自动模式代理，再次打开Google，如果可以打开，说明配置成功。\n\n##### 配置Shadowdsocks服务器\n这里只介绍，购买VPS服务器，来搭建Shadowdsocks服务端。不讨论购买现成的帐号。\n\n###### 服务器选择一：搬瓦工bandwagonhost\n关键字：价格低、一键配置、支付宝\n价格：$2.99/月，也会有$3.99一年的特价机器,。\n\n服务器购买注意：买价格最便宜的就可以了，优先：洛杉矶和佛罗里达（也可以随时切换）,电信用户不支持搬瓦工,如果是电信不用考虑了\n\n###### 服务器选择二：Vultr\n\n关键字：配置高，可做服务器、速度快\n\n价格：$5/月\n\n服务器购买注意：必须选择日本VPS！！\n\n注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本\n\n###### 服务器选择三：Linode\n关键字：本人使用,配置高，可做服务器、速度快\n\n价格：$5/月\n\n服务器购买注意：都说Linode日本服务器最快,但是Linode老机房的机器已经没有了,我用的是东京2号机房5美元版,实际体验速度并不是特别快,其他机房有待亲测.\n\n注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本\n\n##### 总结与注意\n要想简单便宜，可以选择搬瓦工，但我自己贴身体会来讲，虽然刷网页虽然够了，但是看视频下载文件，还是有些慢，这个时候你可以选择Vultr,和Linode,当然了,我自己用过最爽的还是阿里云的香港vps.\n\n#### Shadowdsocks配合其他软件使用\nshadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理，不能像vpn那样把整个电脑都代理。因此，一般情况下只有支持socks5的软件才能使用shadowsocks代理。当然我们也可以借助命令行来实现，具体见下面介绍：\n\n##### 终端走代理的方法\n###### 在终端下使用\n```\n$ export ALL_PROXY=socks5://127.0.0.1:1080\n```\n###### 清除代理\n```\n$ unset ALL_PROXY\n```\n为了测试是否成功可以使用以下命令查看IP\n```\n$ curl -i http://ip.cn\n```\n以上命令只对本窗口生效，为了方便呢，可以在~/.bash_profile中加上这个。（如果没有bash_profile文件自行创建）\n```\nfunction setproxy() {\n# export {HTTP,HTTPS,FTP}_PROXY=\"http://127.0.0.1:3128\" 也可以设置http代理\nexport ALL_PROXY=socks5://127.0.0.1:1080\n}\nfunction unsetproxy() {\n# unset {HTTP,HTTPS,FTP}_PROXY\nunset ALL_PROXY\n}\n```\n需要使用代理的时候setproxy，不用了就unsetproxy\n\n就可以很方便的在shell环境下切换设置代理了。\n\n###### 路由器上使用Shadowdsocks配置局域网\n每个路由器都不太一样，自行谷歌吧。\n\n#### Shadowdsocks 进阶\n##### Shadowdsocks加速的几种方案\n方案一：国内服务器安装Haproxy代理Shadowsocks实现加速\n\n方案二：使用锐速加速\n\n方案三：FilnalSpeed加速方案\n\n锐速的使用可以看我的博客\n\n### Linux系统使用SS自动脚本搭建服务器\n\n#### 说明\n1. 一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；\n2. 各版本的启动脚本及配置文件名不再重合；\n3. 每次运行可安装一种版本；\n4. 支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；\n5. 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；\n6. Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。\n\n#### 默认配置\n* 服务器端口：自己设定（如不设定，默认为 8989）\n* 密码：自己设定（如不设定，默认为 teddysun.com）\n* 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）\n* 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）\n* 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）\n* 备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。\n#### 客户端下载\n* 常规版 Windows 客户端\n[https://github.com/shadowsocks/shadowsocks-windows/releases](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n* ShadowsocksR 版 Windows 客户端\n[https://github.com/shadowsocksr/shadowsocksr-csharp/releases](https://github.com/shadowsocksr/shadowsocksr-csharp/releases)\n\n#### 安装方法\nssh登录后,使用以下命令\n```\n$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n$ chmod +x shadowsocks-all.sh\n$ ./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n安装成功完成后,脚本提示\n```\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP        :your_server_ip\nYour Server Port      :your_server_port\nYour Password         :your_password\nYour Encryption Method:your_encryption_method\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n#### 卸载\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n\n使用root用户登录，运行以下命令：\n```\n./shadowsocks-all.sh uninstall\n```\n#### 启动\n```\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n```\n#### 各版本默认配置文件\n```\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n```\n#### 单用户配置文件示例\n```\n{\n\"server\":\"0.0.0.0\",\n\"server_port\":your_server_port,\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080,\n\"password\":\"your_password\",\n\"timeout\":300,\n\"method\":\"your_encryption_method\",\n\"fast_open\": false\n}\n```\n#### 多用户多端口配置文件示例\n```\n{\n\"server\":\"0.0.0.0\",\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080,\n\"port_password\":{\n\"8989\":\"password0\",\n\"9001\":\"password1\",\n\"9002\":\"password2\",\n\"9003\":\"password3\",\n\"9004\":\"password4\"\n},\n\"timeout\":300,\n\"method\":\"your_encryption_method\",\n\"fast_open\": false\n}\n```\n","source":"_posts/程序员必备的翻墙姿势.md","raw":"---\ntitle: 程序员必备的翻墙姿势+ss搭建vps服务器\ndate: 2016-12-21 16:28:11\ntags: ss,vps\n---\n### 程序员需要一个自由的互联网！！！\n{% note info %} 其实除了下面描述的vps搭建方法，如果不差钱想要搭建vps服务器，可以去阿里云租个香港服务器最低配置就可以，大概1.2K一年，流量不要买固定的带宽，按量付费，速度选最快，充100块能用超久，速度飞起  {% endnote %}\n\n#### 翻墙的几种手段\n这里就不介绍，修改Hosts、蓝灯、GoAgent、Tor等方式了\n<!-- more --> \n##### VPN\nVPN其实就是把你整个网关出口跟远端服务器之间建立一个隧道，你的所有的出口数据都会经过VPN服务器进行转发。\n##### 优点:\n全局代理，配置简单。\n##### 缺点:\n缺点也很明显，无差别代理，访问国内网站，相当于先跳转到国外，再访问国内网站，速度可想而知。\n\n网上可以找到各种免费的VPN代理，也有收费。这里推荐GreenVPN，注册之后可以有免费的VPN用，也可以付费。（PS，网上各种假冒网站，注意甄别！）\n\n具体如何使用，这里就不过多介绍了，\n\n总结：VPN适合需要系统全局翻墙，并且是按需使用的方式。\n\n#### Shadowdsocks\n##### Shadowdsocks介绍(摘自维基百科)\nshadowsocks是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。\n\n在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以事实上并未停止维护，而是转由其他贡献者们持续维护中。\n##### Shadowsocks的优劣：\n##### 优势:\n安全。所有数据流量全部经过加密，加密算法可选并支持自定义算法。另外，远程DNS解析也使得本地的ISP无法通过DNS查询获取你所访问的网站。\n\n速度相对较快。由于其隐蔽性，只会有很少的数据包会被GFW丢弃，从而保证了连接速度。\n\n客户端配置简单。配置时只需要填写IP /域名、端口号，密码，然后选择加密方式即可。\n\n智能切换。 传统的VPN方式，在切换网络时非常不方便， 比如连上国外的 VPN 之后会发现访问国内的网站速度严重下降。ShadowSocks支持PAC列表，根据PAC中的规则，有针对性地选用恰当的网络访问方式，兼顾了访问速度与访问效率。移动客户端还支持针对不同应用设置单独代理。\n\n代码开源。不像某些蜜罐式的翻墙工具，开源的代码保证了无后门，从而为上网的隐私性与安全性提供保障。\n\n跨平台。支持主流系统包括Windows，Linux，Mac，Android,IOS，都有对应的客户端支持。\n\n##### 劣势:\n技术成本。若自己搭建ShadowSocks服务，需要一定的技术成本。因为大部分服务端是基于运行Linux的VPS（虚拟主机）搭建，因此需要学会使用putty等远程管理工具的使用方法，并掌握一定的Linux基本命令行操作。\n\n金钱成本。租用国外的服务器，需要价格不菲的费用。 若使用免费ShadowSocks账号，可能有一定的安全成本。有一些人会将自己的ShadowSocks节点免费分享出来，这些人是非常值得肯定和称赞的！但是其中有一小部分人别有居心，例如在ShadowSocks的服务器端监听网络流量，进行中间人攻击等，这类钓鱼服务器会严重损害用户的个人信息安全。 若购买收费的ShadowSocks账号， 需要一定的金钱成本 由于很多ShadowSocks卖家都是以盈利为目的，需要花费一定的费用。 那么，自己想要有一个影梭账号的话，到底是选用哪种比较好呢？可以看到网上很多卖ShadowSocks账号的，有的价格很便宜，比自己搭服务器划算多了，是不是直接购买一个账号比较好呢？ 在这里我建议大家自己搭服务器\n\n上面介绍的优势，就是我推荐大家使用的理由，而劣势就是写文章的缘由。\n\n#### 关于VPN\n虽然Shadowdsocks很好用，但是有的时候，总会碰到一个先有鸡还是有蛋的情况，你要配置Shadowdsocks，但是需要先翻墙，所以为了避免这种情况，最好还有备一个VPN还是有必要的。\n\n#### 使用和配置Shadowdsocks客户端\n> 由于iOS系统安全性，需要越狱才能安装Shadowdsocks，如果你已经越狱，你可以自行编译安装，源码\n##### iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）\n\n如果搜不到,可以使用境外AppStoreID搜索下载客户端.\n\nSurge:强烈推荐，虽然价格偏高，但是使用体验最好\n\nShadowrocket：价格便宜，买不起上面的，就买这个吧\n\npotatso:价格比上面贵一些，但是代码开源,有能力的可以自己编译安装。\n\nAndroid(Google Play) Shadowsocks\n\nps.不想花钱的,可以试试PP助手之类的软件安装.\n\n##### 客户端使用\n\n这里只介绍MAC系统使用，如果已经有了Shadowsocks帐号：\n\n服务器设定 ->IP、端口、加密、密码，一一对应填写。\n\n测试服务器是否配置成功：\n\n勾选配置好的服务器，选择全局模式，然后打开Google,如果可以就进行下一步。\n\n如果打不开，检查填写有误，检查是否使用了默认的443端口，是否开启了其它代理。\n##### 更新 PAC\n关于PAC介绍可以搜一下这篇文章：SS软件中的pac自动代理模式是什么？\n\nMac版的ss客户端已经停滞更新，官方版本一直停滞在2.6.3。所以，gfwlist地址的改变，直接导致了PAC无法更新了。解决方法有两种，你任选一种吧。\n\n方法A：\n直接改用民间大神修改的2.6.5版本即可，Releases版本：ShadowsocksX-2.6.5[https://github.com/RobertYan/ShadowsocksX/releases](https://github.com/RobertYan/ShadowsocksX/releases)\n\n方法B：\n如果不信任其他人修改的版本，你可以使用这个脚本更新PAC[https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a](https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a)\n测试 PAC 是否生效，选择自动模式代理，再次打开Google，如果可以打开，说明配置成功。\n\n##### 配置Shadowdsocks服务器\n这里只介绍，购买VPS服务器，来搭建Shadowdsocks服务端。不讨论购买现成的帐号。\n\n###### 服务器选择一：搬瓦工bandwagonhost\n关键字：价格低、一键配置、支付宝\n价格：$2.99/月，也会有$3.99一年的特价机器,。\n\n服务器购买注意：买价格最便宜的就可以了，优先：洛杉矶和佛罗里达（也可以随时切换）,电信用户不支持搬瓦工,如果是电信不用考虑了\n\n###### 服务器选择二：Vultr\n\n关键字：配置高，可做服务器、速度快\n\n价格：$5/月\n\n服务器购买注意：必须选择日本VPS！！\n\n注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本\n\n###### 服务器选择三：Linode\n关键字：本人使用,配置高，可做服务器、速度快\n\n价格：$5/月\n\n服务器购买注意：都说Linode日本服务器最快,但是Linode老机房的机器已经没有了,我用的是东京2号机房5美元版,实际体验速度并不是特别快,其他机房有待亲测.\n\n注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本\n\n##### 总结与注意\n要想简单便宜，可以选择搬瓦工，但我自己贴身体会来讲，虽然刷网页虽然够了，但是看视频下载文件，还是有些慢，这个时候你可以选择Vultr,和Linode,当然了,我自己用过最爽的还是阿里云的香港vps.\n\n#### Shadowdsocks配合其他软件使用\nshadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理，不能像vpn那样把整个电脑都代理。因此，一般情况下只有支持socks5的软件才能使用shadowsocks代理。当然我们也可以借助命令行来实现，具体见下面介绍：\n\n##### 终端走代理的方法\n###### 在终端下使用\n```\n$ export ALL_PROXY=socks5://127.0.0.1:1080\n```\n###### 清除代理\n```\n$ unset ALL_PROXY\n```\n为了测试是否成功可以使用以下命令查看IP\n```\n$ curl -i http://ip.cn\n```\n以上命令只对本窗口生效，为了方便呢，可以在~/.bash_profile中加上这个。（如果没有bash_profile文件自行创建）\n```\nfunction setproxy() {\n# export {HTTP,HTTPS,FTP}_PROXY=\"http://127.0.0.1:3128\" 也可以设置http代理\nexport ALL_PROXY=socks5://127.0.0.1:1080\n}\nfunction unsetproxy() {\n# unset {HTTP,HTTPS,FTP}_PROXY\nunset ALL_PROXY\n}\n```\n需要使用代理的时候setproxy，不用了就unsetproxy\n\n就可以很方便的在shell环境下切换设置代理了。\n\n###### 路由器上使用Shadowdsocks配置局域网\n每个路由器都不太一样，自行谷歌吧。\n\n#### Shadowdsocks 进阶\n##### Shadowdsocks加速的几种方案\n方案一：国内服务器安装Haproxy代理Shadowsocks实现加速\n\n方案二：使用锐速加速\n\n方案三：FilnalSpeed加速方案\n\n锐速的使用可以看我的博客\n\n### Linux系统使用SS自动脚本搭建服务器\n\n#### 说明\n1. 一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；\n2. 各版本的启动脚本及配置文件名不再重合；\n3. 每次运行可安装一种版本；\n4. 支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；\n5. 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；\n6. Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。\n\n#### 默认配置\n* 服务器端口：自己设定（如不设定，默认为 8989）\n* 密码：自己设定（如不设定，默认为 teddysun.com）\n* 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）\n* 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）\n* 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）\n* 备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。\n#### 客户端下载\n* 常规版 Windows 客户端\n[https://github.com/shadowsocks/shadowsocks-windows/releases](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n* ShadowsocksR 版 Windows 客户端\n[https://github.com/shadowsocksr/shadowsocksr-csharp/releases](https://github.com/shadowsocksr/shadowsocksr-csharp/releases)\n\n#### 安装方法\nssh登录后,使用以下命令\n```\n$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n$ chmod +x shadowsocks-all.sh\n$ ./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n安装成功完成后,脚本提示\n```\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP        :your_server_ip\nYour Server Port      :your_server_port\nYour Password         :your_password\nYour Encryption Method:your_encryption_method\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n#### 卸载\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n\n使用root用户登录，运行以下命令：\n```\n./shadowsocks-all.sh uninstall\n```\n#### 启动\n```\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n```\n#### 各版本默认配置文件\n```\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n```\n#### 单用户配置文件示例\n```\n{\n\"server\":\"0.0.0.0\",\n\"server_port\":your_server_port,\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080,\n\"password\":\"your_password\",\n\"timeout\":300,\n\"method\":\"your_encryption_method\",\n\"fast_open\": false\n}\n```\n#### 多用户多端口配置文件示例\n```\n{\n\"server\":\"0.0.0.0\",\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080,\n\"port_password\":{\n\"8989\":\"password0\",\n\"9001\":\"password1\",\n\"9002\":\"password2\",\n\"9003\":\"password3\",\n\"9004\":\"password4\"\n},\n\"timeout\":300,\n\"method\":\"your_encryption_method\",\n\"fast_open\": false\n}\n```\n","slug":"程序员必备的翻墙姿势","published":1,"updated":"2021-07-12T07:17:19.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtga000dtdm203wg6s12","content":"<h3 id=\"程序员需要一个自由的互联网！！！\"><a href=\"#程序员需要一个自由的互联网！！！\" class=\"headerlink\" title=\"程序员需要一个自由的互联网！！！\"></a>程序员需要一个自由的互联网！！！</h3><div class=\"note info\">\n            <p>其实除了下面描述的vps搭建方法，如果不差钱想要搭建vps服务器，可以去阿里云租个香港服务器最低配置就可以，大概1.2K一年，流量不要买固定的带宽，按量付费，速度选最快，充100块能用超久，速度飞起  </p>\n          </div>\n\n<h4 id=\"翻墙的几种手段\"><a href=\"#翻墙的几种手段\" class=\"headerlink\" title=\"翻墙的几种手段\"></a>翻墙的几种手段</h4><p>这里就不介绍，修改Hosts、蓝灯、GoAgent、Tor等方式了</p>\n<span id=\"more\"></span> \n<h5 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h5><p>VPN其实就是把你整个网关出口跟远端服务器之间建立一个隧道，你的所有的出口数据都会经过VPN服务器进行转发。</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h5><p>全局代理，配置简单。</p>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h5><p>缺点也很明显，无差别代理，访问国内网站，相当于先跳转到国外，再访问国内网站，速度可想而知。</p>\n<p>网上可以找到各种免费的VPN代理，也有收费。这里推荐GreenVPN，注册之后可以有免费的VPN用，也可以付费。（PS，网上各种假冒网站，注意甄别！）</p>\n<p>具体如何使用，这里就不过多介绍了，</p>\n<p>总结：VPN适合需要系统全局翻墙，并且是按需使用的方式。</p>\n<h4 id=\"Shadowdsocks\"><a href=\"#Shadowdsocks\" class=\"headerlink\" title=\"Shadowdsocks\"></a>Shadowdsocks</h4><h5 id=\"Shadowdsocks介绍-摘自维基百科\"><a href=\"#Shadowdsocks介绍-摘自维基百科\" class=\"headerlink\" title=\"Shadowdsocks介绍(摘自维基百科)\"></a>Shadowdsocks介绍(摘自维基百科)</h5><p>shadowsocks是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。</p>\n<p>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以事实上并未停止维护，而是转由其他贡献者们持续维护中。</p>\n<h5 id=\"Shadowsocks的优劣：\"><a href=\"#Shadowsocks的优劣：\" class=\"headerlink\" title=\"Shadowsocks的优劣：\"></a>Shadowsocks的优劣：</h5><h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势:\"></a>优势:</h5><p>安全。所有数据流量全部经过加密，加密算法可选并支持自定义算法。另外，远程DNS解析也使得本地的ISP无法通过DNS查询获取你所访问的网站。</p>\n<p>速度相对较快。由于其隐蔽性，只会有很少的数据包会被GFW丢弃，从而保证了连接速度。</p>\n<p>客户端配置简单。配置时只需要填写IP /域名、端口号，密码，然后选择加密方式即可。</p>\n<p>智能切换。 传统的VPN方式，在切换网络时非常不方便， 比如连上国外的 VPN 之后会发现访问国内的网站速度严重下降。ShadowSocks支持PAC列表，根据PAC中的规则，有针对性地选用恰当的网络访问方式，兼顾了访问速度与访问效率。移动客户端还支持针对不同应用设置单独代理。</p>\n<p>代码开源。不像某些蜜罐式的翻墙工具，开源的代码保证了无后门，从而为上网的隐私性与安全性提供保障。</p>\n<p>跨平台。支持主流系统包括Windows，Linux，Mac，Android,IOS，都有对应的客户端支持。</p>\n<h5 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势:\"></a>劣势:</h5><p>技术成本。若自己搭建ShadowSocks服务，需要一定的技术成本。因为大部分服务端是基于运行Linux的VPS（虚拟主机）搭建，因此需要学会使用putty等远程管理工具的使用方法，并掌握一定的Linux基本命令行操作。</p>\n<p>金钱成本。租用国外的服务器，需要价格不菲的费用。 若使用免费ShadowSocks账号，可能有一定的安全成本。有一些人会将自己的ShadowSocks节点免费分享出来，这些人是非常值得肯定和称赞的！但是其中有一小部分人别有居心，例如在ShadowSocks的服务器端监听网络流量，进行中间人攻击等，这类钓鱼服务器会严重损害用户的个人信息安全。 若购买收费的ShadowSocks账号， 需要一定的金钱成本 由于很多ShadowSocks卖家都是以盈利为目的，需要花费一定的费用。 那么，自己想要有一个影梭账号的话，到底是选用哪种比较好呢？可以看到网上很多卖ShadowSocks账号的，有的价格很便宜，比自己搭服务器划算多了，是不是直接购买一个账号比较好呢？ 在这里我建议大家自己搭服务器</p>\n<p>上面介绍的优势，就是我推荐大家使用的理由，而劣势就是写文章的缘由。</p>\n<h4 id=\"关于VPN\"><a href=\"#关于VPN\" class=\"headerlink\" title=\"关于VPN\"></a>关于VPN</h4><p>虽然Shadowdsocks很好用，但是有的时候，总会碰到一个先有鸡还是有蛋的情况，你要配置Shadowdsocks，但是需要先翻墙，所以为了避免这种情况，最好还有备一个VPN还是有必要的。</p>\n<h4 id=\"使用和配置Shadowdsocks客户端\"><a href=\"#使用和配置Shadowdsocks客户端\" class=\"headerlink\" title=\"使用和配置Shadowdsocks客户端\"></a>使用和配置Shadowdsocks客户端</h4><blockquote>\n<p>由于iOS系统安全性，需要越狱才能安装Shadowdsocks，如果你已经越狱，你可以自行编译安装，源码</p>\n</blockquote>\n<h5 id=\"iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9-）\"><a href=\"#iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9-）\" class=\"headerlink\" title=\"iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）\"></a>iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）</h5><p>如果搜不到,可以使用境外AppStoreID搜索下载客户端.</p>\n<p>Surge:强烈推荐，虽然价格偏高，但是使用体验最好</p>\n<p>Shadowrocket：价格便宜，买不起上面的，就买这个吧</p>\n<p>potatso:价格比上面贵一些，但是代码开源,有能力的可以自己编译安装。</p>\n<p>Android(Google Play) Shadowsocks</p>\n<p>ps.不想花钱的,可以试试PP助手之类的软件安装.</p>\n<h5 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h5><p>这里只介绍MAC系统使用，如果已经有了Shadowsocks帐号：</p>\n<p>服务器设定 -&gt;IP、端口、加密、密码，一一对应填写。</p>\n<p>测试服务器是否配置成功：</p>\n<p>勾选配置好的服务器，选择全局模式，然后打开Google,如果可以就进行下一步。</p>\n<p>如果打不开，检查填写有误，检查是否使用了默认的443端口，是否开启了其它代理。</p>\n<h5 id=\"更新-PAC\"><a href=\"#更新-PAC\" class=\"headerlink\" title=\"更新 PAC\"></a>更新 PAC</h5><p>关于PAC介绍可以搜一下这篇文章：SS软件中的pac自动代理模式是什么？</p>\n<p>Mac版的ss客户端已经停滞更新，官方版本一直停滞在2.6.3。所以，gfwlist地址的改变，直接导致了PAC无法更新了。解决方法有两种，你任选一种吧。</p>\n<p>方法A：<br>直接改用民间大神修改的2.6.5版本即可，Releases版本：ShadowsocksX-2.6.5<a href=\"https://github.com/RobertYan/ShadowsocksX/releases\">https://github.com/RobertYan/ShadowsocksX/releases</a></p>\n<p>方法B：<br>如果不信任其他人修改的版本，你可以使用这个脚本更新PAC<a href=\"https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a\">https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a</a><br>测试 PAC 是否生效，选择自动模式代理，再次打开Google，如果可以打开，说明配置成功。</p>\n<h5 id=\"配置Shadowdsocks服务器\"><a href=\"#配置Shadowdsocks服务器\" class=\"headerlink\" title=\"配置Shadowdsocks服务器\"></a>配置Shadowdsocks服务器</h5><p>这里只介绍，购买VPS服务器，来搭建Shadowdsocks服务端。不讨论购买现成的帐号。</p>\n<h6 id=\"服务器选择一：搬瓦工bandwagonhost\"><a href=\"#服务器选择一：搬瓦工bandwagonhost\" class=\"headerlink\" title=\"服务器选择一：搬瓦工bandwagonhost\"></a>服务器选择一：搬瓦工bandwagonhost</h6><p>关键字：价格低、一键配置、支付宝<br>价格：$2.99/月，也会有$3.99一年的特价机器,。</p>\n<p>服务器购买注意：买价格最便宜的就可以了，优先：洛杉矶和佛罗里达（也可以随时切换）,电信用户不支持搬瓦工,如果是电信不用考虑了</p>\n<h6 id=\"服务器选择二：Vultr\"><a href=\"#服务器选择二：Vultr\" class=\"headerlink\" title=\"服务器选择二：Vultr\"></a>服务器选择二：Vultr</h6><p>关键字：配置高，可做服务器、速度快</p>\n<p>价格：$5/月</p>\n<p>服务器购买注意：必须选择日本VPS！！</p>\n<p>注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本</p>\n<h6 id=\"服务器选择三：Linode\"><a href=\"#服务器选择三：Linode\" class=\"headerlink\" title=\"服务器选择三：Linode\"></a>服务器选择三：Linode</h6><p>关键字：本人使用,配置高，可做服务器、速度快</p>\n<p>价格：$5/月</p>\n<p>服务器购买注意：都说Linode日本服务器最快,但是Linode老机房的机器已经没有了,我用的是东京2号机房5美元版,实际体验速度并不是特别快,其他机房有待亲测.</p>\n<p>注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本</p>\n<h5 id=\"总结与注意\"><a href=\"#总结与注意\" class=\"headerlink\" title=\"总结与注意\"></a>总结与注意</h5><p>要想简单便宜，可以选择搬瓦工，但我自己贴身体会来讲，虽然刷网页虽然够了，但是看视频下载文件，还是有些慢，这个时候你可以选择Vultr,和Linode,当然了,我自己用过最爽的还是阿里云的香港vps.</p>\n<h4 id=\"Shadowdsocks配合其他软件使用\"><a href=\"#Shadowdsocks配合其他软件使用\" class=\"headerlink\" title=\"Shadowdsocks配合其他软件使用\"></a>Shadowdsocks配合其他软件使用</h4><p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理，不能像vpn那样把整个电脑都代理。因此，一般情况下只有支持socks5的软件才能使用shadowsocks代理。当然我们也可以借助命令行来实现，具体见下面介绍：</p>\n<h5 id=\"终端走代理的方法\"><a href=\"#终端走代理的方法\" class=\"headerlink\" title=\"终端走代理的方法\"></a>终端走代理的方法</h5><h6 id=\"在终端下使用\"><a href=\"#在终端下使用\" class=\"headerlink\" title=\"在终端下使用\"></a>在终端下使用</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<h6 id=\"清除代理\"><a href=\"#清除代理\" class=\"headerlink\" title=\"清除代理\"></a>清除代理</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ unset ALL_PROXY</span><br></pre></td></tr></table></figure>\n<p>为了测试是否成功可以使用以下命令查看IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i http://ip.cn</span><br></pre></td></tr></table></figure>\n<p>以上命令只对本窗口生效，为了方便呢，可以在~/.bash_profile中加上这个。（如果没有bash_profile文件自行创建）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setproxy() &#123;</span><br><span class=\"line\"># export &#123;HTTP,HTTPS,FTP&#125;_PROXY=&quot;http://127.0.0.1:3128&quot; 也可以设置http代理</span><br><span class=\"line\">export ALL_PROXY=socks5://127.0.0.1:1080</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function unsetproxy() &#123;</span><br><span class=\"line\"># unset &#123;HTTP,HTTPS,FTP&#125;_PROXY</span><br><span class=\"line\">unset ALL_PROXY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要使用代理的时候setproxy，不用了就unsetproxy</p>\n<p>就可以很方便的在shell环境下切换设置代理了。</p>\n<h6 id=\"路由器上使用Shadowdsocks配置局域网\"><a href=\"#路由器上使用Shadowdsocks配置局域网\" class=\"headerlink\" title=\"路由器上使用Shadowdsocks配置局域网\"></a>路由器上使用Shadowdsocks配置局域网</h6><p>每个路由器都不太一样，自行谷歌吧。</p>\n<h4 id=\"Shadowdsocks-进阶\"><a href=\"#Shadowdsocks-进阶\" class=\"headerlink\" title=\"Shadowdsocks 进阶\"></a>Shadowdsocks 进阶</h4><h5 id=\"Shadowdsocks加速的几种方案\"><a href=\"#Shadowdsocks加速的几种方案\" class=\"headerlink\" title=\"Shadowdsocks加速的几种方案\"></a>Shadowdsocks加速的几种方案</h5><p>方案一：国内服务器安装Haproxy代理Shadowsocks实现加速</p>\n<p>方案二：使用锐速加速</p>\n<p>方案三：FilnalSpeed加速方案</p>\n<p>锐速的使用可以看我的博客</p>\n<h3 id=\"Linux系统使用SS自动脚本搭建服务器\"><a href=\"#Linux系统使用SS自动脚本搭建服务器\" class=\"headerlink\" title=\"Linux系统使用SS自动脚本搭建服务器\"></a>Linux系统使用SS自动脚本搭建服务器</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；</li>\n<li>各版本的启动脚本及配置文件名不再重合；</li>\n<li>每次运行可安装一种版本；</li>\n<li>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；</li>\n<li>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</li>\n<li>Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</li>\n</ol>\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><ul>\n<li><p>服务器端口：自己设定（如不设定，默认为 8989）</p>\n</li>\n<li><p>密码：自己设定（如不设定，默认为 teddysun.com）</p>\n</li>\n<li><p>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</p>\n</li>\n<li><p>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</p>\n</li>\n<li><p>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</p>\n</li>\n<li><p>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>\n<h4 id=\"客户端下载\"><a href=\"#客户端下载\" class=\"headerlink\" title=\"客户端下载\"></a>客户端下载</h4></li>\n<li><p>常规版 Windows 客户端<br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n</li>\n<li><p>ShadowsocksR 版 Windows 客户端<br><a href=\"https://github.com/shadowsocksr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksr/shadowsocksr-csharp/releases</a></p>\n</li>\n</ul>\n<h4 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h4><p>ssh登录后,使用以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">$ chmod +x shadowsocks-all.sh</span><br><span class=\"line\">$ ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p>安装成功完成后,脚本提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP        :your_server_ip</span><br><span class=\"line\">Your Server Port      :your_server_port</span><br><span class=\"line\">Your Password         :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<h4 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>\n<p>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span><br><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure>\n<h4 id=\"各版本默认配置文件\"><a href=\"#各版本默认配置文件\" class=\"headerlink\" title=\"各版本默认配置文件\"></a>各版本默认配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/shadowsocks-python/config.json</span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/shadowsocks-r/config.json</span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/shadowsocks-go/config.json</span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"单用户配置文件示例\"><a href=\"#单用户配置文件示例\" class=\"headerlink\" title=\"单用户配置文件示例\"></a>单用户配置文件示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;server_port&quot;:your_server_port,</span><br><span class=\"line\">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;:1080,</span><br><span class=\"line\">&quot;password&quot;:&quot;your_password&quot;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多用户多端口配置文件示例\"><a href=\"#多用户多端口配置文件示例\" class=\"headerlink\" title=\"多用户多端口配置文件示例\"></a>多用户多端口配置文件示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;:1080,</span><br><span class=\"line\">&quot;port_password&quot;:&#123;</span><br><span class=\"line\">&quot;8989&quot;:&quot;password0&quot;,</span><br><span class=\"line\">&quot;9001&quot;:&quot;password1&quot;,</span><br><span class=\"line\">&quot;9002&quot;:&quot;password2&quot;,</span><br><span class=\"line\">&quot;9003&quot;:&quot;password3&quot;,</span><br><span class=\"line\">&quot;9004&quot;:&quot;password4&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"程序员需要一个自由的互联网！！！\"><a href=\"#程序员需要一个自由的互联网！！！\" class=\"headerlink\" title=\"程序员需要一个自由的互联网！！！\"></a>程序员需要一个自由的互联网！！！</h3><div class=\"note info\">\n            <p>其实除了下面描述的vps搭建方法，如果不差钱想要搭建vps服务器，可以去阿里云租个香港服务器最低配置就可以，大概1.2K一年，流量不要买固定的带宽，按量付费，速度选最快，充100块能用超久，速度飞起  </p>\n          </div>\n\n<h4 id=\"翻墙的几种手段\"><a href=\"#翻墙的几种手段\" class=\"headerlink\" title=\"翻墙的几种手段\"></a>翻墙的几种手段</h4><p>这里就不介绍，修改Hosts、蓝灯、GoAgent、Tor等方式了</p>","more":"<h5 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h5><p>VPN其实就是把你整个网关出口跟远端服务器之间建立一个隧道，你的所有的出口数据都会经过VPN服务器进行转发。</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h5><p>全局代理，配置简单。</p>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h5><p>缺点也很明显，无差别代理，访问国内网站，相当于先跳转到国外，再访问国内网站，速度可想而知。</p>\n<p>网上可以找到各种免费的VPN代理，也有收费。这里推荐GreenVPN，注册之后可以有免费的VPN用，也可以付费。（PS，网上各种假冒网站，注意甄别！）</p>\n<p>具体如何使用，这里就不过多介绍了，</p>\n<p>总结：VPN适合需要系统全局翻墙，并且是按需使用的方式。</p>\n<h4 id=\"Shadowdsocks\"><a href=\"#Shadowdsocks\" class=\"headerlink\" title=\"Shadowdsocks\"></a>Shadowdsocks</h4><h5 id=\"Shadowdsocks介绍-摘自维基百科\"><a href=\"#Shadowdsocks介绍-摘自维基百科\" class=\"headerlink\" title=\"Shadowdsocks介绍(摘自维基百科)\"></a>Shadowdsocks介绍(摘自维基百科)</h5><p>shadowsocks是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。</p>\n<p>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以事实上并未停止维护，而是转由其他贡献者们持续维护中。</p>\n<h5 id=\"Shadowsocks的优劣：\"><a href=\"#Shadowsocks的优劣：\" class=\"headerlink\" title=\"Shadowsocks的优劣：\"></a>Shadowsocks的优劣：</h5><h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势:\"></a>优势:</h5><p>安全。所有数据流量全部经过加密，加密算法可选并支持自定义算法。另外，远程DNS解析也使得本地的ISP无法通过DNS查询获取你所访问的网站。</p>\n<p>速度相对较快。由于其隐蔽性，只会有很少的数据包会被GFW丢弃，从而保证了连接速度。</p>\n<p>客户端配置简单。配置时只需要填写IP /域名、端口号，密码，然后选择加密方式即可。</p>\n<p>智能切换。 传统的VPN方式，在切换网络时非常不方便， 比如连上国外的 VPN 之后会发现访问国内的网站速度严重下降。ShadowSocks支持PAC列表，根据PAC中的规则，有针对性地选用恰当的网络访问方式，兼顾了访问速度与访问效率。移动客户端还支持针对不同应用设置单独代理。</p>\n<p>代码开源。不像某些蜜罐式的翻墙工具，开源的代码保证了无后门，从而为上网的隐私性与安全性提供保障。</p>\n<p>跨平台。支持主流系统包括Windows，Linux，Mac，Android,IOS，都有对应的客户端支持。</p>\n<h5 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势:\"></a>劣势:</h5><p>技术成本。若自己搭建ShadowSocks服务，需要一定的技术成本。因为大部分服务端是基于运行Linux的VPS（虚拟主机）搭建，因此需要学会使用putty等远程管理工具的使用方法，并掌握一定的Linux基本命令行操作。</p>\n<p>金钱成本。租用国外的服务器，需要价格不菲的费用。 若使用免费ShadowSocks账号，可能有一定的安全成本。有一些人会将自己的ShadowSocks节点免费分享出来，这些人是非常值得肯定和称赞的！但是其中有一小部分人别有居心，例如在ShadowSocks的服务器端监听网络流量，进行中间人攻击等，这类钓鱼服务器会严重损害用户的个人信息安全。 若购买收费的ShadowSocks账号， 需要一定的金钱成本 由于很多ShadowSocks卖家都是以盈利为目的，需要花费一定的费用。 那么，自己想要有一个影梭账号的话，到底是选用哪种比较好呢？可以看到网上很多卖ShadowSocks账号的，有的价格很便宜，比自己搭服务器划算多了，是不是直接购买一个账号比较好呢？ 在这里我建议大家自己搭服务器</p>\n<p>上面介绍的优势，就是我推荐大家使用的理由，而劣势就是写文章的缘由。</p>\n<h4 id=\"关于VPN\"><a href=\"#关于VPN\" class=\"headerlink\" title=\"关于VPN\"></a>关于VPN</h4><p>虽然Shadowdsocks很好用，但是有的时候，总会碰到一个先有鸡还是有蛋的情况，你要配置Shadowdsocks，但是需要先翻墙，所以为了避免这种情况，最好还有备一个VPN还是有必要的。</p>\n<h4 id=\"使用和配置Shadowdsocks客户端\"><a href=\"#使用和配置Shadowdsocks客户端\" class=\"headerlink\" title=\"使用和配置Shadowdsocks客户端\"></a>使用和配置Shadowdsocks客户端</h4><blockquote>\n<p>由于iOS系统安全性，需要越狱才能安装Shadowdsocks，如果你已经越狱，你可以自行编译安装，源码</p>\n</blockquote>\n<h5 id=\"iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9-）\"><a href=\"#iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9-）\" class=\"headerlink\" title=\"iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）\"></a>iOS不越狱客户端推荐（以下软件使用了iOS9系统的新特性，也就是话说仅支持iOS9+）</h5><p>如果搜不到,可以使用境外AppStoreID搜索下载客户端.</p>\n<p>Surge:强烈推荐，虽然价格偏高，但是使用体验最好</p>\n<p>Shadowrocket：价格便宜，买不起上面的，就买这个吧</p>\n<p>potatso:价格比上面贵一些，但是代码开源,有能力的可以自己编译安装。</p>\n<p>Android(Google Play) Shadowsocks</p>\n<p>ps.不想花钱的,可以试试PP助手之类的软件安装.</p>\n<h5 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h5><p>这里只介绍MAC系统使用，如果已经有了Shadowsocks帐号：</p>\n<p>服务器设定 -&gt;IP、端口、加密、密码，一一对应填写。</p>\n<p>测试服务器是否配置成功：</p>\n<p>勾选配置好的服务器，选择全局模式，然后打开Google,如果可以就进行下一步。</p>\n<p>如果打不开，检查填写有误，检查是否使用了默认的443端口，是否开启了其它代理。</p>\n<h5 id=\"更新-PAC\"><a href=\"#更新-PAC\" class=\"headerlink\" title=\"更新 PAC\"></a>更新 PAC</h5><p>关于PAC介绍可以搜一下这篇文章：SS软件中的pac自动代理模式是什么？</p>\n<p>Mac版的ss客户端已经停滞更新，官方版本一直停滞在2.6.3。所以，gfwlist地址的改变，直接导致了PAC无法更新了。解决方法有两种，你任选一种吧。</p>\n<p>方法A：<br>直接改用民间大神修改的2.6.5版本即可，Releases版本：ShadowsocksX-2.6.5<a href=\"https://github.com/RobertYan/ShadowsocksX/releases\">https://github.com/RobertYan/ShadowsocksX/releases</a></p>\n<p>方法B：<br>如果不信任其他人修改的版本，你可以使用这个脚本更新PAC<a href=\"https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a\">https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a</a><br>测试 PAC 是否生效，选择自动模式代理，再次打开Google，如果可以打开，说明配置成功。</p>\n<h5 id=\"配置Shadowdsocks服务器\"><a href=\"#配置Shadowdsocks服务器\" class=\"headerlink\" title=\"配置Shadowdsocks服务器\"></a>配置Shadowdsocks服务器</h5><p>这里只介绍，购买VPS服务器，来搭建Shadowdsocks服务端。不讨论购买现成的帐号。</p>\n<h6 id=\"服务器选择一：搬瓦工bandwagonhost\"><a href=\"#服务器选择一：搬瓦工bandwagonhost\" class=\"headerlink\" title=\"服务器选择一：搬瓦工bandwagonhost\"></a>服务器选择一：搬瓦工bandwagonhost</h6><p>关键字：价格低、一键配置、支付宝<br>价格：$2.99/月，也会有$3.99一年的特价机器,。</p>\n<p>服务器购买注意：买价格最便宜的就可以了，优先：洛杉矶和佛罗里达（也可以随时切换）,电信用户不支持搬瓦工,如果是电信不用考虑了</p>\n<h6 id=\"服务器选择二：Vultr\"><a href=\"#服务器选择二：Vultr\" class=\"headerlink\" title=\"服务器选择二：Vultr\"></a>服务器选择二：Vultr</h6><p>关键字：配置高，可做服务器、速度快</p>\n<p>价格：$5/月</p>\n<p>服务器购买注意：必须选择日本VPS！！</p>\n<p>注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本</p>\n<h6 id=\"服务器选择三：Linode\"><a href=\"#服务器选择三：Linode\" class=\"headerlink\" title=\"服务器选择三：Linode\"></a>服务器选择三：Linode</h6><p>关键字：本人使用,配置高，可做服务器、速度快</p>\n<p>价格：$5/月</p>\n<p>服务器购买注意：都说Linode日本服务器最快,但是Linode老机房的机器已经没有了,我用的是东京2号机房5美元版,实际体验速度并不是特别快,其他机房有待亲测.</p>\n<p>注意：由于Vultr没有一键配置选项，所以需要手动配置，但是网上已经有人给出一键安装的脚本：Shadowsocks Python版一键安装脚本</p>\n<h5 id=\"总结与注意\"><a href=\"#总结与注意\" class=\"headerlink\" title=\"总结与注意\"></a>总结与注意</h5><p>要想简单便宜，可以选择搬瓦工，但我自己贴身体会来讲，虽然刷网页虽然够了，但是看视频下载文件，还是有些慢，这个时候你可以选择Vultr,和Linode,当然了,我自己用过最爽的还是阿里云的香港vps.</p>\n<h4 id=\"Shadowdsocks配合其他软件使用\"><a href=\"#Shadowdsocks配合其他软件使用\" class=\"headerlink\" title=\"Shadowdsocks配合其他软件使用\"></a>Shadowdsocks配合其他软件使用</h4><p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理，不能像vpn那样把整个电脑都代理。因此，一般情况下只有支持socks5的软件才能使用shadowsocks代理。当然我们也可以借助命令行来实现，具体见下面介绍：</p>\n<h5 id=\"终端走代理的方法\"><a href=\"#终端走代理的方法\" class=\"headerlink\" title=\"终端走代理的方法\"></a>终端走代理的方法</h5><h6 id=\"在终端下使用\"><a href=\"#在终端下使用\" class=\"headerlink\" title=\"在终端下使用\"></a>在终端下使用</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<h6 id=\"清除代理\"><a href=\"#清除代理\" class=\"headerlink\" title=\"清除代理\"></a>清除代理</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ unset ALL_PROXY</span><br></pre></td></tr></table></figure>\n<p>为了测试是否成功可以使用以下命令查看IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i http://ip.cn</span><br></pre></td></tr></table></figure>\n<p>以上命令只对本窗口生效，为了方便呢，可以在~/.bash_profile中加上这个。（如果没有bash_profile文件自行创建）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setproxy() &#123;</span><br><span class=\"line\"># export &#123;HTTP,HTTPS,FTP&#125;_PROXY=&quot;http://127.0.0.1:3128&quot; 也可以设置http代理</span><br><span class=\"line\">export ALL_PROXY=socks5://127.0.0.1:1080</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function unsetproxy() &#123;</span><br><span class=\"line\"># unset &#123;HTTP,HTTPS,FTP&#125;_PROXY</span><br><span class=\"line\">unset ALL_PROXY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要使用代理的时候setproxy，不用了就unsetproxy</p>\n<p>就可以很方便的在shell环境下切换设置代理了。</p>\n<h6 id=\"路由器上使用Shadowdsocks配置局域网\"><a href=\"#路由器上使用Shadowdsocks配置局域网\" class=\"headerlink\" title=\"路由器上使用Shadowdsocks配置局域网\"></a>路由器上使用Shadowdsocks配置局域网</h6><p>每个路由器都不太一样，自行谷歌吧。</p>\n<h4 id=\"Shadowdsocks-进阶\"><a href=\"#Shadowdsocks-进阶\" class=\"headerlink\" title=\"Shadowdsocks 进阶\"></a>Shadowdsocks 进阶</h4><h5 id=\"Shadowdsocks加速的几种方案\"><a href=\"#Shadowdsocks加速的几种方案\" class=\"headerlink\" title=\"Shadowdsocks加速的几种方案\"></a>Shadowdsocks加速的几种方案</h5><p>方案一：国内服务器安装Haproxy代理Shadowsocks实现加速</p>\n<p>方案二：使用锐速加速</p>\n<p>方案三：FilnalSpeed加速方案</p>\n<p>锐速的使用可以看我的博客</p>\n<h3 id=\"Linux系统使用SS自动脚本搭建服务器\"><a href=\"#Linux系统使用SS自动脚本搭建服务器\" class=\"headerlink\" title=\"Linux系统使用SS自动脚本搭建服务器\"></a>Linux系统使用SS自动脚本搭建服务器</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；</li>\n<li>各版本的启动脚本及配置文件名不再重合；</li>\n<li>每次运行可安装一种版本；</li>\n<li>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；</li>\n<li>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</li>\n<li>Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</li>\n</ol>\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><ul>\n<li><p>服务器端口：自己设定（如不设定，默认为 8989）</p>\n</li>\n<li><p>密码：自己设定（如不设定，默认为 teddysun.com）</p>\n</li>\n<li><p>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</p>\n</li>\n<li><p>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</p>\n</li>\n<li><p>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</p>\n</li>\n<li><p>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>\n<h4 id=\"客户端下载\"><a href=\"#客户端下载\" class=\"headerlink\" title=\"客户端下载\"></a>客户端下载</h4></li>\n<li><p>常规版 Windows 客户端<br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n</li>\n<li><p>ShadowsocksR 版 Windows 客户端<br><a href=\"https://github.com/shadowsocksr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksr/shadowsocksr-csharp/releases</a></p>\n</li>\n</ul>\n<h4 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h4><p>ssh登录后,使用以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">$ chmod +x shadowsocks-all.sh</span><br><span class=\"line\">$ ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p>安装成功完成后,脚本提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP        :your_server_ip</span><br><span class=\"line\">Your Server Port      :your_server_port</span><br><span class=\"line\">Your Password         :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<h4 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>\n<p>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span><br><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure>\n<h4 id=\"各版本默认配置文件\"><a href=\"#各版本默认配置文件\" class=\"headerlink\" title=\"各版本默认配置文件\"></a>各版本默认配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/shadowsocks-python/config.json</span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/shadowsocks-r/config.json</span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/shadowsocks-go/config.json</span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"单用户配置文件示例\"><a href=\"#单用户配置文件示例\" class=\"headerlink\" title=\"单用户配置文件示例\"></a>单用户配置文件示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;server_port&quot;:your_server_port,</span><br><span class=\"line\">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;:1080,</span><br><span class=\"line\">&quot;password&quot;:&quot;your_password&quot;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多用户多端口配置文件示例\"><a href=\"#多用户多端口配置文件示例\" class=\"headerlink\" title=\"多用户多端口配置文件示例\"></a>多用户多端口配置文件示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;:1080,</span><br><span class=\"line\">&quot;port_password&quot;:&#123;</span><br><span class=\"line\">&quot;8989&quot;:&quot;password0&quot;,</span><br><span class=\"line\">&quot;9001&quot;:&quot;password1&quot;,</span><br><span class=\"line\">&quot;9002&quot;:&quot;password2&quot;,</span><br><span class=\"line\">&quot;9003&quot;:&quot;password3&quot;,</span><br><span class=\"line\">&quot;9004&quot;:&quot;password4&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"给centOS安装锐速","date":"2016-12-25T03:53:56.000Z","_content":"> 最近鼓捣服务器玩脱了,导致ssh连不上,端口也没占用,防火墙也没开,就是不行,索性直接重装,正好趁这个机会把以前没有写下的东西记录下来\n\n## 什么是锐速\n锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。蜗牛在为服务器安装锐速后，测试服务器全球下载、本地上传下载速度变化不大；但使用超级ping发现，丢包现象明显减少。另外一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。\n<!-- more --> \n## 安装锐速\n这里使用网上找到的脚本 直接copy以下命令\n```\n#如果没有安装wget下载工具,执行这一条进行安装\n$ yum -y install wget\n\n#下载脚本\n$ wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.sh\n\n#执行脚本\n$ bash serverspeeder.sh\n```\n安装过程很简单，如果你的VPS内核支持安装，根本无需你手动操作，直接一键完成。\n\n如果你VPS内核没有找到匹配的锐速版本，会自动提示选择接近版本。\n\n当然你还肯会遇到内核不支持的情况，那么需要我们先手动更改可以匹配锐速的内核。目前此破解版锐速支持的内核有：\n* CentOS-6.8：2.6.32-642.el7.x86_64\n* CentOS-7.2：3.10.0-327.el7.x86_64\n* CentOS：4.4.0-x86_64-linode63\n* Ubuntu_14.04：4.2.0-35-generic\n* Debian_8：3.16.0-4-amd64。\n\n替换内核的方法请看下面:\n[为你的CentOS替换内核](#替换内核)\n\n\n### 锐速serverspeeder常用命令:\n```\nservice serverSpeeder start #启动\nservice serverSpeeder stop #停止\nservice serverSpeeder reload #重新加载配置\nservice serverSpeeder restart #重启\nservice serverSpeeder status #状态\nservice serverSpeeder stats #统计\nservice serverSpeeder renewLic #更新许可文件\nservice serverSpeeder update #更新\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f #卸载\n```\n<span id = \"替换内核\"></span>\n## 为你的CentOS替换内核\n\n#### 根据系统版本更换内核\n查看自己的系统版本\n\n```\nhead -n 1 /etc/issue\n```\n##### CentOS 6.8\n\nCentOS 6支持安装锐速的内核：\n2.6.32-504.3.3.el6.x86_64\n\n首先运行下面命令为自己的VPS下载安装内核。\n```\n#查看当前内核版本\nuname -r\n#下载内核\nwget http://ftp.scientificlinux.org/linux/scientific/6.6/x86_64/updates/security/kernel-2.6.32-504.3.3.el6.x86_64.rpm\n#安装内核\nrpm -ivh kernel-2.6.32-504.3.3.el6.x86_64.rpm --force\n```\n##### CentOS 7\n\n```\n#查看当前内核版本\nuname -r\n#下载内核\nwget http://ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/kernel-3.10.0-327.el7.x86_64.rpm\n#安装内核\nrpm -ivh kernel-3.10.0-327.el7.x86_64.rpm --force\n\n```\n> 正常系统执行到这里就可以使用\"reboot\"命令重启,然后\"uname -r\"查看是否替换成功了,但是我的vps服务商是linode,原本没问题,这次更换内核发现,安装成功后怎么也无法默认启动这个内核,reboot之后还是原来的内核,如果你也有这样的问题,请接着下面的操作\n\n#### linode调整默认启动内核\nLinode 的机器全部用的是定制的内核,并且在控制台强制限制了机器默认启动的内核,所以需要做一些其他工作\n##### 更新系统\n```\n#更新系统,目前会更新到6.9\n$ yum install epel-release -y\n#更新yum\n$ yum update -y\n```\n##### 安装 grub 引导\n```\n$ yum install grub -y\n```\n##### 新建 menu.lst 引导文件\n先看看你机器安装的最新内核是什么\n```\n$ ls -l /boot\n```\n会显示一大堆东西\n```\n总用量 98992\n-rw-r--r--. 1 root root   106312 12月 16 2014 config-2.6.32-504.3.3.el6.x86_64\n-rw-r--r--. 1 root root   108108 2月  24 2017 config-2.6.32-642.15.1.el6.x86_64\n-rw-r--r--. 1 root root   108103 5月  10 2016 config-2.6.32-642.el6.x86_64\n-rw-r--r--. 1 root root   108169 10月  5 21:27 config-2.6.32-696.13.2.el6.x86_64\ndrwxr-xr-x. 3 root root     4096 3月   1 2017 efi\ndrwxr-xr-x. 2 root root     4096 10月 12 09:46 grub\n-rw-------. 1 root root 17532160 10月 12 09:43 initramfs-2.6.32-504.3.3.el6.x86_64.img\n\n```\n显而易见我们要的是2.6.32-504.3.3.el6.x86_64的内核\n\n输入命令\n```\n$ nano /boot/grub/menu.lst\n```\n然后按照下面的格式填写menu.lst中的内容模版,每行的版本号替换成你系统安装的内核版本\n```\ndefault 0\ntimeout 5\n\ntitle CentOS 2.6.32-504.3.3.el6.x86_64\n\nroot (hd0)\n\nkernel /boot/vmlinuz2.6.32-504.3.3.el6.x86_64 root=/dev/sda\n\ninitrd /boot/initramfs-2.6.32-504.3.3.el6.x86_64.img\n```\n如果文件已存在,有多个title时,说明你有安装多个内核,找到对应可用的内核,或者新添加一个,将default改为你需要的顺序即可,default的意思是系统默认启动第几个title\n##### Linode 控制面板修改启动方式\n对应 VPS 的系统盘 Edit 下的 Kernel 选择 【GRUB(Legacy)】保存后，Reboot\n##### 启动后，验证内核\n```\n$ uname -a\n```\n\n执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。\n```\nrpm -qa | grep kernel\n```\n\n重启VPS，查看内核是否修改成功。\n```\nreboot #重启VPS\nuname -r #当前使用内核版本\n```\n","source":"_posts/给centOS安装锐速.md","raw":"---\ntitle: 给centOS安装锐速\ndate: 2016-12-25 11:53:56\ntags: ss,vps\n---\n> 最近鼓捣服务器玩脱了,导致ssh连不上,端口也没占用,防火墙也没开,就是不行,索性直接重装,正好趁这个机会把以前没有写下的东西记录下来\n\n## 什么是锐速\n锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。蜗牛在为服务器安装锐速后，测试服务器全球下载、本地上传下载速度变化不大；但使用超级ping发现，丢包现象明显减少。另外一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。\n<!-- more --> \n## 安装锐速\n这里使用网上找到的脚本 直接copy以下命令\n```\n#如果没有安装wget下载工具,执行这一条进行安装\n$ yum -y install wget\n\n#下载脚本\n$ wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.sh\n\n#执行脚本\n$ bash serverspeeder.sh\n```\n安装过程很简单，如果你的VPS内核支持安装，根本无需你手动操作，直接一键完成。\n\n如果你VPS内核没有找到匹配的锐速版本，会自动提示选择接近版本。\n\n当然你还肯会遇到内核不支持的情况，那么需要我们先手动更改可以匹配锐速的内核。目前此破解版锐速支持的内核有：\n* CentOS-6.8：2.6.32-642.el7.x86_64\n* CentOS-7.2：3.10.0-327.el7.x86_64\n* CentOS：4.4.0-x86_64-linode63\n* Ubuntu_14.04：4.2.0-35-generic\n* Debian_8：3.16.0-4-amd64。\n\n替换内核的方法请看下面:\n[为你的CentOS替换内核](#替换内核)\n\n\n### 锐速serverspeeder常用命令:\n```\nservice serverSpeeder start #启动\nservice serverSpeeder stop #停止\nservice serverSpeeder reload #重新加载配置\nservice serverSpeeder restart #重启\nservice serverSpeeder status #状态\nservice serverSpeeder stats #统计\nservice serverSpeeder renewLic #更新许可文件\nservice serverSpeeder update #更新\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f #卸载\n```\n<span id = \"替换内核\"></span>\n## 为你的CentOS替换内核\n\n#### 根据系统版本更换内核\n查看自己的系统版本\n\n```\nhead -n 1 /etc/issue\n```\n##### CentOS 6.8\n\nCentOS 6支持安装锐速的内核：\n2.6.32-504.3.3.el6.x86_64\n\n首先运行下面命令为自己的VPS下载安装内核。\n```\n#查看当前内核版本\nuname -r\n#下载内核\nwget http://ftp.scientificlinux.org/linux/scientific/6.6/x86_64/updates/security/kernel-2.6.32-504.3.3.el6.x86_64.rpm\n#安装内核\nrpm -ivh kernel-2.6.32-504.3.3.el6.x86_64.rpm --force\n```\n##### CentOS 7\n\n```\n#查看当前内核版本\nuname -r\n#下载内核\nwget http://ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/kernel-3.10.0-327.el7.x86_64.rpm\n#安装内核\nrpm -ivh kernel-3.10.0-327.el7.x86_64.rpm --force\n\n```\n> 正常系统执行到这里就可以使用\"reboot\"命令重启,然后\"uname -r\"查看是否替换成功了,但是我的vps服务商是linode,原本没问题,这次更换内核发现,安装成功后怎么也无法默认启动这个内核,reboot之后还是原来的内核,如果你也有这样的问题,请接着下面的操作\n\n#### linode调整默认启动内核\nLinode 的机器全部用的是定制的内核,并且在控制台强制限制了机器默认启动的内核,所以需要做一些其他工作\n##### 更新系统\n```\n#更新系统,目前会更新到6.9\n$ yum install epel-release -y\n#更新yum\n$ yum update -y\n```\n##### 安装 grub 引导\n```\n$ yum install grub -y\n```\n##### 新建 menu.lst 引导文件\n先看看你机器安装的最新内核是什么\n```\n$ ls -l /boot\n```\n会显示一大堆东西\n```\n总用量 98992\n-rw-r--r--. 1 root root   106312 12月 16 2014 config-2.6.32-504.3.3.el6.x86_64\n-rw-r--r--. 1 root root   108108 2月  24 2017 config-2.6.32-642.15.1.el6.x86_64\n-rw-r--r--. 1 root root   108103 5月  10 2016 config-2.6.32-642.el6.x86_64\n-rw-r--r--. 1 root root   108169 10月  5 21:27 config-2.6.32-696.13.2.el6.x86_64\ndrwxr-xr-x. 3 root root     4096 3月   1 2017 efi\ndrwxr-xr-x. 2 root root     4096 10月 12 09:46 grub\n-rw-------. 1 root root 17532160 10月 12 09:43 initramfs-2.6.32-504.3.3.el6.x86_64.img\n\n```\n显而易见我们要的是2.6.32-504.3.3.el6.x86_64的内核\n\n输入命令\n```\n$ nano /boot/grub/menu.lst\n```\n然后按照下面的格式填写menu.lst中的内容模版,每行的版本号替换成你系统安装的内核版本\n```\ndefault 0\ntimeout 5\n\ntitle CentOS 2.6.32-504.3.3.el6.x86_64\n\nroot (hd0)\n\nkernel /boot/vmlinuz2.6.32-504.3.3.el6.x86_64 root=/dev/sda\n\ninitrd /boot/initramfs-2.6.32-504.3.3.el6.x86_64.img\n```\n如果文件已存在,有多个title时,说明你有安装多个内核,找到对应可用的内核,或者新添加一个,将default改为你需要的顺序即可,default的意思是系统默认启动第几个title\n##### Linode 控制面板修改启动方式\n对应 VPS 的系统盘 Edit 下的 Kernel 选择 【GRUB(Legacy)】保存后，Reboot\n##### 启动后，验证内核\n```\n$ uname -a\n```\n\n执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。\n```\nrpm -qa | grep kernel\n```\n\n重启VPS，查看内核是否修改成功。\n```\nreboot #重启VPS\nuname -r #当前使用内核版本\n```\n","slug":"给centOS安装锐速","published":1,"updated":"2021-07-12T07:17:26.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt12xtgc000ftdm2en93fxl6","content":"<blockquote>\n<p>最近鼓捣服务器玩脱了,导致ssh连不上,端口也没占用,防火墙也没开,就是不行,索性直接重装,正好趁这个机会把以前没有写下的东西记录下来</p>\n</blockquote>\n<h2 id=\"什么是锐速\"><a href=\"#什么是锐速\" class=\"headerlink\" title=\"什么是锐速\"></a>什么是锐速</h2><p>锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。蜗牛在为服务器安装锐速后，测试服务器全球下载、本地上传下载速度变化不大；但使用超级ping发现，丢包现象明显减少。另外一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。</p>\n<span id=\"more\"></span> \n<h2 id=\"安装锐速\"><a href=\"#安装锐速\" class=\"headerlink\" title=\"安装锐速\"></a>安装锐速</h2><p>这里使用网上找到的脚本 直接copy以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果没有安装wget下载工具,执行这一条进行安装</span><br><span class=\"line\">$ yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\">#下载脚本</span><br><span class=\"line\">$ wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#执行脚本</span><br><span class=\"line\">$ bash serverspeeder.sh</span><br></pre></td></tr></table></figure>\n<p>安装过程很简单，如果你的VPS内核支持安装，根本无需你手动操作，直接一键完成。</p>\n<p>如果你VPS内核没有找到匹配的锐速版本，会自动提示选择接近版本。</p>\n<p>当然你还肯会遇到内核不支持的情况，那么需要我们先手动更改可以匹配锐速的内核。目前此破解版锐速支持的内核有：</p>\n<ul>\n<li>CentOS-6.8：2.6.32-642.el7.x86_64</li>\n<li>CentOS-7.2：3.10.0-327.el7.x86_64</li>\n<li>CentOS：4.4.0-x86_64-linode63</li>\n<li>Ubuntu_14.04：4.2.0-35-generic</li>\n<li>Debian_8：3.16.0-4-amd64。</li>\n</ul>\n<p>替换内核的方法请看下面:<br><a href=\"#%E6%9B%BF%E6%8D%A2%E5%86%85%E6%A0%B8\">为你的CentOS替换内核</a></p>\n<h3 id=\"锐速serverspeeder常用命令\"><a href=\"#锐速serverspeeder常用命令\" class=\"headerlink\" title=\"锐速serverspeeder常用命令:\"></a>锐速serverspeeder常用命令:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service serverSpeeder start #启动</span><br><span class=\"line\">service serverSpeeder stop #停止</span><br><span class=\"line\">service serverSpeeder reload #重新加载配置</span><br><span class=\"line\">service serverSpeeder restart #重启</span><br><span class=\"line\">service serverSpeeder status #状态</span><br><span class=\"line\">service serverSpeeder stats #统计</span><br><span class=\"line\">service serverSpeeder renewLic #更新许可文件</span><br><span class=\"line\">service serverSpeeder update #更新</span><br><span class=\"line\">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f #卸载</span><br></pre></td></tr></table></figure>\n<p><span id = \"替换内核\"></span></p>\n<h2 id=\"为你的CentOS替换内核\"><a href=\"#为你的CentOS替换内核\" class=\"headerlink\" title=\"为你的CentOS替换内核\"></a>为你的CentOS替换内核</h2><h4 id=\"根据系统版本更换内核\"><a href=\"#根据系统版本更换内核\" class=\"headerlink\" title=\"根据系统版本更换内核\"></a>根据系统版本更换内核</h4><p>查看自己的系统版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head -n 1 /etc/issue</span><br></pre></td></tr></table></figure>\n<h5 id=\"CentOS-6-8\"><a href=\"#CentOS-6-8\" class=\"headerlink\" title=\"CentOS 6.8\"></a>CentOS 6.8</h5><p>CentOS 6支持安装锐速的内核：<br>2.6.32-504.3.3.el6.x86_64</p>\n<p>首先运行下面命令为自己的VPS下载安装内核。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看当前内核版本</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">#下载内核</span><br><span class=\"line\">wget http://ftp.scientificlinux.org/linux/scientific/6.6/x86_64/updates/security/kernel-2.6.32-504.3.3.el6.x86_64.rpm</span><br><span class=\"line\">#安装内核</span><br><span class=\"line\">rpm -ivh kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span><br></pre></td></tr></table></figure>\n<h5 id=\"CentOS-7\"><a href=\"#CentOS-7\" class=\"headerlink\" title=\"CentOS 7\"></a>CentOS 7</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看当前内核版本</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">#下载内核</span><br><span class=\"line\">wget http://ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/kernel-3.10.0-327.el7.x86_64.rpm</span><br><span class=\"line\">#安装内核</span><br><span class=\"line\">rpm -ivh kernel-3.10.0-327.el7.x86_64.rpm --force</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>正常系统执行到这里就可以使用”reboot”命令重启,然后”uname -r”查看是否替换成功了,但是我的vps服务商是linode,原本没问题,这次更换内核发现,安装成功后怎么也无法默认启动这个内核,reboot之后还是原来的内核,如果你也有这样的问题,请接着下面的操作</p>\n</blockquote>\n<h4 id=\"linode调整默认启动内核\"><a href=\"#linode调整默认启动内核\" class=\"headerlink\" title=\"linode调整默认启动内核\"></a>linode调整默认启动内核</h4><p>Linode 的机器全部用的是定制的内核,并且在控制台强制限制了机器默认启动的内核,所以需要做一些其他工作</p>\n<h5 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新系统,目前会更新到6.9</span><br><span class=\"line\">$ yum install epel-release -y</span><br><span class=\"line\">#更新yum</span><br><span class=\"line\">$ yum update -y</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装-grub-引导\"><a href=\"#安装-grub-引导\" class=\"headerlink\" title=\"安装 grub 引导\"></a>安装 grub 引导</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install grub -y</span><br></pre></td></tr></table></figure>\n<h5 id=\"新建-menu-lst-引导文件\"><a href=\"#新建-menu-lst-引导文件\" class=\"headerlink\" title=\"新建 menu.lst 引导文件\"></a>新建 menu.lst 引导文件</h5><p>先看看你机器安装的最新内核是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l /boot</span><br></pre></td></tr></table></figure>\n<p>会显示一大堆东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总用量 98992</span><br><span class=\"line\">-rw-r--r--. 1 root root   106312 12月 16 2014 config-2.6.32-504.3.3.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108108 2月  24 2017 config-2.6.32-642.15.1.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108103 5月  10 2016 config-2.6.32-642.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108169 10月  5 21:27 config-2.6.32-696.13.2.el6.x86_64</span><br><span class=\"line\">drwxr-xr-x. 3 root root     4096 3月   1 2017 efi</span><br><span class=\"line\">drwxr-xr-x. 2 root root     4096 10月 12 09:46 grub</span><br><span class=\"line\">-rw-------. 1 root root 17532160 10月 12 09:43 initramfs-2.6.32-504.3.3.el6.x86_64.img</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显而易见我们要的是2.6.32-504.3.3.el6.x86_64的内核</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nano /boot/grub/menu.lst</span><br></pre></td></tr></table></figure>\n<p>然后按照下面的格式填写menu.lst中的内容模版,每行的版本号替换成你系统安装的内核版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default 0</span><br><span class=\"line\">timeout 5</span><br><span class=\"line\"></span><br><span class=\"line\">title CentOS 2.6.32-504.3.3.el6.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">root (hd0)</span><br><span class=\"line\"></span><br><span class=\"line\">kernel /boot/vmlinuz2.6.32-504.3.3.el6.x86_64 root=/dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\">initrd /boot/initramfs-2.6.32-504.3.3.el6.x86_64.img</span><br></pre></td></tr></table></figure>\n<p>如果文件已存在,有多个title时,说明你有安装多个内核,找到对应可用的内核,或者新添加一个,将default改为你需要的顺序即可,default的意思是系统默认启动第几个title</p>\n<h5 id=\"Linode-控制面板修改启动方式\"><a href=\"#Linode-控制面板修改启动方式\" class=\"headerlink\" title=\"Linode 控制面板修改启动方式\"></a>Linode 控制面板修改启动方式</h5><p>对应 VPS 的系统盘 Edit 下的 Kernel 选择 【GRUB(Legacy)】保存后，Reboot</p>\n<h5 id=\"启动后，验证内核\"><a href=\"#启动后，验证内核\" class=\"headerlink\" title=\"启动后，验证内核\"></a>启动后，验证内核</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -a</span><br></pre></td></tr></table></figure>\n\n<p>执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>\n\n<p>重启VPS，查看内核是否修改成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot #重启VPS</span><br><span class=\"line\">uname -r #当前使用内核版本</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近鼓捣服务器玩脱了,导致ssh连不上,端口也没占用,防火墙也没开,就是不行,索性直接重装,正好趁这个机会把以前没有写下的东西记录下来</p>\n</blockquote>\n<h2 id=\"什么是锐速\"><a href=\"#什么是锐速\" class=\"headerlink\" title=\"什么是锐速\"></a>什么是锐速</h2><p>锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。蜗牛在为服务器安装锐速后，测试服务器全球下载、本地上传下载速度变化不大；但使用超级ping发现，丢包现象明显减少。另外一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。</p>","more":"<h2 id=\"安装锐速\"><a href=\"#安装锐速\" class=\"headerlink\" title=\"安装锐速\"></a>安装锐速</h2><p>这里使用网上找到的脚本 直接copy以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果没有安装wget下载工具,执行这一条进行安装</span><br><span class=\"line\">$ yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\">#下载脚本</span><br><span class=\"line\">$ wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#执行脚本</span><br><span class=\"line\">$ bash serverspeeder.sh</span><br></pre></td></tr></table></figure>\n<p>安装过程很简单，如果你的VPS内核支持安装，根本无需你手动操作，直接一键完成。</p>\n<p>如果你VPS内核没有找到匹配的锐速版本，会自动提示选择接近版本。</p>\n<p>当然你还肯会遇到内核不支持的情况，那么需要我们先手动更改可以匹配锐速的内核。目前此破解版锐速支持的内核有：</p>\n<ul>\n<li>CentOS-6.8：2.6.32-642.el7.x86_64</li>\n<li>CentOS-7.2：3.10.0-327.el7.x86_64</li>\n<li>CentOS：4.4.0-x86_64-linode63</li>\n<li>Ubuntu_14.04：4.2.0-35-generic</li>\n<li>Debian_8：3.16.0-4-amd64。</li>\n</ul>\n<p>替换内核的方法请看下面:<br><a href=\"#%E6%9B%BF%E6%8D%A2%E5%86%85%E6%A0%B8\">为你的CentOS替换内核</a></p>\n<h3 id=\"锐速serverspeeder常用命令\"><a href=\"#锐速serverspeeder常用命令\" class=\"headerlink\" title=\"锐速serverspeeder常用命令:\"></a>锐速serverspeeder常用命令:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service serverSpeeder start #启动</span><br><span class=\"line\">service serverSpeeder stop #停止</span><br><span class=\"line\">service serverSpeeder reload #重新加载配置</span><br><span class=\"line\">service serverSpeeder restart #重启</span><br><span class=\"line\">service serverSpeeder status #状态</span><br><span class=\"line\">service serverSpeeder stats #统计</span><br><span class=\"line\">service serverSpeeder renewLic #更新许可文件</span><br><span class=\"line\">service serverSpeeder update #更新</span><br><span class=\"line\">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f #卸载</span><br></pre></td></tr></table></figure>\n<p><span id = \"替换内核\"></span></p>\n<h2 id=\"为你的CentOS替换内核\"><a href=\"#为你的CentOS替换内核\" class=\"headerlink\" title=\"为你的CentOS替换内核\"></a>为你的CentOS替换内核</h2><h4 id=\"根据系统版本更换内核\"><a href=\"#根据系统版本更换内核\" class=\"headerlink\" title=\"根据系统版本更换内核\"></a>根据系统版本更换内核</h4><p>查看自己的系统版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head -n 1 /etc/issue</span><br></pre></td></tr></table></figure>\n<h5 id=\"CentOS-6-8\"><a href=\"#CentOS-6-8\" class=\"headerlink\" title=\"CentOS 6.8\"></a>CentOS 6.8</h5><p>CentOS 6支持安装锐速的内核：<br>2.6.32-504.3.3.el6.x86_64</p>\n<p>首先运行下面命令为自己的VPS下载安装内核。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看当前内核版本</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">#下载内核</span><br><span class=\"line\">wget http://ftp.scientificlinux.org/linux/scientific/6.6/x86_64/updates/security/kernel-2.6.32-504.3.3.el6.x86_64.rpm</span><br><span class=\"line\">#安装内核</span><br><span class=\"line\">rpm -ivh kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span><br></pre></td></tr></table></figure>\n<h5 id=\"CentOS-7\"><a href=\"#CentOS-7\" class=\"headerlink\" title=\"CentOS 7\"></a>CentOS 7</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看当前内核版本</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">#下载内核</span><br><span class=\"line\">wget http://ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/kernel-3.10.0-327.el7.x86_64.rpm</span><br><span class=\"line\">#安装内核</span><br><span class=\"line\">rpm -ivh kernel-3.10.0-327.el7.x86_64.rpm --force</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>正常系统执行到这里就可以使用”reboot”命令重启,然后”uname -r”查看是否替换成功了,但是我的vps服务商是linode,原本没问题,这次更换内核发现,安装成功后怎么也无法默认启动这个内核,reboot之后还是原来的内核,如果你也有这样的问题,请接着下面的操作</p>\n</blockquote>\n<h4 id=\"linode调整默认启动内核\"><a href=\"#linode调整默认启动内核\" class=\"headerlink\" title=\"linode调整默认启动内核\"></a>linode调整默认启动内核</h4><p>Linode 的机器全部用的是定制的内核,并且在控制台强制限制了机器默认启动的内核,所以需要做一些其他工作</p>\n<h5 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新系统,目前会更新到6.9</span><br><span class=\"line\">$ yum install epel-release -y</span><br><span class=\"line\">#更新yum</span><br><span class=\"line\">$ yum update -y</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装-grub-引导\"><a href=\"#安装-grub-引导\" class=\"headerlink\" title=\"安装 grub 引导\"></a>安装 grub 引导</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install grub -y</span><br></pre></td></tr></table></figure>\n<h5 id=\"新建-menu-lst-引导文件\"><a href=\"#新建-menu-lst-引导文件\" class=\"headerlink\" title=\"新建 menu.lst 引导文件\"></a>新建 menu.lst 引导文件</h5><p>先看看你机器安装的最新内核是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l /boot</span><br></pre></td></tr></table></figure>\n<p>会显示一大堆东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总用量 98992</span><br><span class=\"line\">-rw-r--r--. 1 root root   106312 12月 16 2014 config-2.6.32-504.3.3.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108108 2月  24 2017 config-2.6.32-642.15.1.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108103 5月  10 2016 config-2.6.32-642.el6.x86_64</span><br><span class=\"line\">-rw-r--r--. 1 root root   108169 10月  5 21:27 config-2.6.32-696.13.2.el6.x86_64</span><br><span class=\"line\">drwxr-xr-x. 3 root root     4096 3月   1 2017 efi</span><br><span class=\"line\">drwxr-xr-x. 2 root root     4096 10月 12 09:46 grub</span><br><span class=\"line\">-rw-------. 1 root root 17532160 10月 12 09:43 initramfs-2.6.32-504.3.3.el6.x86_64.img</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显而易见我们要的是2.6.32-504.3.3.el6.x86_64的内核</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nano /boot/grub/menu.lst</span><br></pre></td></tr></table></figure>\n<p>然后按照下面的格式填写menu.lst中的内容模版,每行的版本号替换成你系统安装的内核版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default 0</span><br><span class=\"line\">timeout 5</span><br><span class=\"line\"></span><br><span class=\"line\">title CentOS 2.6.32-504.3.3.el6.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">root (hd0)</span><br><span class=\"line\"></span><br><span class=\"line\">kernel /boot/vmlinuz2.6.32-504.3.3.el6.x86_64 root=/dev/sda</span><br><span class=\"line\"></span><br><span class=\"line\">initrd /boot/initramfs-2.6.32-504.3.3.el6.x86_64.img</span><br></pre></td></tr></table></figure>\n<p>如果文件已存在,有多个title时,说明你有安装多个内核,找到对应可用的内核,或者新添加一个,将default改为你需要的顺序即可,default的意思是系统默认启动第几个title</p>\n<h5 id=\"Linode-控制面板修改启动方式\"><a href=\"#Linode-控制面板修改启动方式\" class=\"headerlink\" title=\"Linode 控制面板修改启动方式\"></a>Linode 控制面板修改启动方式</h5><p>对应 VPS 的系统盘 Edit 下的 Kernel 选择 【GRUB(Legacy)】保存后，Reboot</p>\n<h5 id=\"启动后，验证内核\"><a href=\"#启动后，验证内核\" class=\"headerlink\" title=\"启动后，验证内核\"></a>启动后，验证内核</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -a</span><br></pre></td></tr></table></figure>\n\n<p>执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>\n\n<p>重启VPS，查看内核是否修改成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot #重启VPS</span><br><span class=\"line\">uname -r #当前使用内核版本</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckt12xtfz0000tdm25r206ams","tag_id":"ckt12xtg40002tdm20rbp6may","_id":"ckt12xtg70007tdm2ec65b4h1"},{"post_id":"ckt12xtg30001tdm2blxt22qy","tag_id":"ckt12xtg70006tdm27ym531yn","_id":"ckt12xtg9000ctdm24u0t0ngz"},{"post_id":"ckt12xtg50003tdm23q6w55ps","tag_id":"ckt12xtg9000atdm29p9dckhr","_id":"ckt12xtgc000gtdm2bf541pkf"},{"post_id":"ckt12xtg60004tdm20it274d8","tag_id":"ckt12xtg9000atdm29p9dckhr","_id":"ckt12xtgd000itdm29958eb83"},{"post_id":"ckt12xtg60005tdm29ffz82qv","tag_id":"ckt12xtgd000htdm2abj3cwtt","_id":"ckt12xtgd000ktdm2c0jk3zsa"},{"post_id":"ckt12xtg70008tdm2hn294kbt","tag_id":"ckt12xtg9000atdm29p9dckhr","_id":"ckt12xtge000mtdm2btl1c6uv"},{"post_id":"ckt12xtg80009tdm29t0j186o","tag_id":"ckt12xtgd000ltdm23ylbagmk","_id":"ckt12xtge000otdm2g1ps1h24"},{"post_id":"ckt12xtg9000btdm291mo0a17","tag_id":"ckt12xtge000ntdm2ahjp5e38","_id":"ckt12xtgf000qtdm22iloe4ig"},{"post_id":"ckt12xtga000dtdm203wg6s12","tag_id":"ckt12xtgd000htdm2abj3cwtt","_id":"ckt12xtgf000stdm24s4i43zj"},{"post_id":"ckt12xtgc000ftdm2en93fxl6","tag_id":"ckt12xtgd000htdm2abj3cwtt","_id":"ckt12xtgf000ttdm26puf1aii"}],"Tag":[{"name":"hexo静态博客","_id":"ckt12xtg40002tdm20rbp6may"},{"name":"git","_id":"ckt12xtg70006tdm27ym531yn"},{"name":"iOS","_id":"ckt12xtg9000atdm29p9dckhr"},{"name":"ss,vps","_id":"ckt12xtgd000htdm2abj3cwtt"},{"name":"blockChain","_id":"ckt12xtgd000ltdm23ylbagmk"},{"name":"Mac,Linux","_id":"ckt12xtge000ntdm2ahjp5e38"}]}}